{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PART - A"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "gUsmK5e-Nj-9"
   },
   "source": [
    "•DOMAIN: Digital content management \n",
    "\n",
    "•CONTEXT: \n",
    "Classification is probably the most popular task that you would deal with in real life. Text in the form of blogs, posts, articles, etc. are written every second. It is a challenge to predict the information about the writer without knowing about him/her. We are going to create a classifier that predicts multiple features of the author of a given text. We have designed it as a Multi label classification problem. \n",
    "\n",
    "•DATA DESCRIPTION: \n",
    "Over 600,000 posts from more than 19 thousand bloggers The Blog Authorship Corpus consists of the collected posts of 19,320 bloggers gathered from blogger.com in August 2004. The corpus incorporates a total of 681,288 posts and over 140 million words - or approximately 35 posts and 7250 words per person. Each blog is presented as a separate file, the name of which indicates a blogger id# and the blogger’s self-provided gender, age, industry, and astrological sign. (All are labelled for gender and age but for many, industry and/or sign is marked as unknown.) All bloggers included in the corpus fall into one of three age groups: \n",
    "\n",
    "•8240 \"10s\" blogs (ages 13-17)\n",
    "\n",
    "•8086 \"20s\" blogs(ages 23-27) \n",
    "\n",
    "•2994 \"30s\" blogs (ages 33-47) \n",
    "\n",
    "\n",
    "•For each age group, there is an equal number of male and female bloggers. Each blog in the corpus includes at least 200 occurrences of common English words. All formatting has been stripped with two exceptions. Individual posts within a single blogger are separated by the date of the following post and links within a post are denoted by the label url link. \n",
    "\n",
    "•PROJECT OBJECTIVE: To build a NLP classifier which can use input text parameters to determine the label/s of the blog. Specific to this case study, you can consider the text of the blog: ‘text’ feature as independent variable and ‘topic’ as dependent variable. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ldOFF66N-LhC"
   },
   "source": [
    "  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "bhWy4FQN9u9h"
   },
   "source": [
    "- NOTE : Due to lack of computational resources,complexity of this problem , I did this project as batch wise as some times saving the dataframe as csv files and lists and models as pickles\n",
    "\n",
    "    --------\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "jB58IwElOKvp"
   },
   "source": [
    "# 1.Read and Analyse Dataset\n",
    "\n",
    "### Part A - Q1 A - Clearly write outcome of data analysis(Minimum 2 points)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "3azk-889Nugv"
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from zipfile import ZipFile\n",
    "from tqdm import tqdm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "V02rv0TD-Mwn",
    "outputId": "2e211ce8-43a6-4b87-f84c-cc23b7e4017c"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
      "Collecting unidecode\n",
      "  Downloading Unidecode-1.3.6-py3-none-any.whl (235 kB)\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m235.9/235.9 kB\u001b[0m \u001b[31m6.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hInstalling collected packages: unidecode\n",
      "Successfully installed unidecode-1.3.6\n"
     ]
    }
   ],
   "source": [
    "!pip install unidecode"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "wkEfgfdzOltF",
    "outputId": "85a31910-0f19-4843-95ed-bb50ad90fd9c"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mounted at /content/drive\n"
     ]
    }
   ],
   "source": [
    "from google.colab import drive\n",
    "drive.mount(\"/content/drive\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "zGL_o2hKPx6t"
   },
   "outputs": [],
   "source": [
    "import os\n",
    "os.chdir(\"/content/drive/My Drive/NLP/\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "PdmrtSJ0O2jI"
   },
   "outputs": [],
   "source": [
    "#extracting files from zipfile\n",
    "\n",
    "file  = \"blogs.zip\"\n",
    "with ZipFile(file,'r') as zip :\n",
    "  zip.extractall()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "rvb_phNLQefx"
   },
   "outputs": [],
   "source": [
    "# reading csv file\n",
    "blog_df = pd.read_csv(\"blogtext.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 531
    },
    "id": "9X8Uz-oqRI1n",
    "outputId": "fba47b1b-2b6e-434f-a18a-55f45a9668be"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-abdac1fb-bc52-44c7-ab6a-634b766be934\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>topic</th>\n",
       "      <th>sign</th>\n",
       "      <th>date</th>\n",
       "      <th>text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2059027</td>\n",
       "      <td>male</td>\n",
       "      <td>15</td>\n",
       "      <td>Student</td>\n",
       "      <td>Leo</td>\n",
       "      <td>14,May,2004</td>\n",
       "      <td>Info has been found (+/- 100 pages,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2059027</td>\n",
       "      <td>male</td>\n",
       "      <td>15</td>\n",
       "      <td>Student</td>\n",
       "      <td>Leo</td>\n",
       "      <td>13,May,2004</td>\n",
       "      <td>These are the team members:   Drewe...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2059027</td>\n",
       "      <td>male</td>\n",
       "      <td>15</td>\n",
       "      <td>Student</td>\n",
       "      <td>Leo</td>\n",
       "      <td>12,May,2004</td>\n",
       "      <td>In het kader van kernfusie op aarde...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2059027</td>\n",
       "      <td>male</td>\n",
       "      <td>15</td>\n",
       "      <td>Student</td>\n",
       "      <td>Leo</td>\n",
       "      <td>12,May,2004</td>\n",
       "      <td>testing!!!  testing!!!</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3581210</td>\n",
       "      <td>male</td>\n",
       "      <td>33</td>\n",
       "      <td>InvestmentBanking</td>\n",
       "      <td>Aquarius</td>\n",
       "      <td>11,June,2004</td>\n",
       "      <td>Thanks to Yahoo!'s Toolbar I can ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-abdac1fb-bc52-44c7-ab6a-634b766be934')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-abdac1fb-bc52-44c7-ab6a-634b766be934 button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-abdac1fb-bc52-44c7-ab6a-634b766be934');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "        id gender  age              topic      sign          date  \\\n",
       "0  2059027   male   15            Student       Leo   14,May,2004   \n",
       "1  2059027   male   15            Student       Leo   13,May,2004   \n",
       "2  2059027   male   15            Student       Leo   12,May,2004   \n",
       "3  2059027   male   15            Student       Leo   12,May,2004   \n",
       "4  3581210   male   33  InvestmentBanking  Aquarius  11,June,2004   \n",
       "\n",
       "                                                text  \n",
       "0             Info has been found (+/- 100 pages,...  \n",
       "1             These are the team members:   Drewe...  \n",
       "2             In het kader van kernfusie op aarde...  \n",
       "3                   testing!!!  testing!!!            \n",
       "4               Thanks to Yahoo!'s Toolbar I can ...  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "blog_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "LJSV7_udRPU8",
    "outputId": "95bee83e-aff7-42ad-8b0e-85f5f22bc78d"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The columns present in blog are :\n",
      " Index(['id', 'gender', 'age', 'topic', 'sign', 'date', 'text'], dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print(\"The columns present in blog are :\\n\",blog_df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 478
    },
    "id": "n5nIXERiRdC8",
    "outputId": "52a988f5-a73f-4764-b0c1-17a39b282157"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-f7f63a7f-d680-4d89-a1f2-96c78da1c1a0\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>topic</th>\n",
       "      <th>sign</th>\n",
       "      <th>date</th>\n",
       "      <th>text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>681279</th>\n",
       "      <td>1713845</td>\n",
       "      <td>male</td>\n",
       "      <td>23</td>\n",
       "      <td>Student</td>\n",
       "      <td>Taurus</td>\n",
       "      <td>01,July,2004</td>\n",
       "      <td>Dear Susan,  I could write some really ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>681280</th>\n",
       "      <td>1713845</td>\n",
       "      <td>male</td>\n",
       "      <td>23</td>\n",
       "      <td>Student</td>\n",
       "      <td>Taurus</td>\n",
       "      <td>01,July,2004</td>\n",
       "      <td>Dear Susan,  'I have the second yeast i...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>681281</th>\n",
       "      <td>1713845</td>\n",
       "      <td>male</td>\n",
       "      <td>23</td>\n",
       "      <td>Student</td>\n",
       "      <td>Taurus</td>\n",
       "      <td>01,July,2004</td>\n",
       "      <td>Dear Susan,  Your 'boyfriend' is fuckin...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>681282</th>\n",
       "      <td>1713845</td>\n",
       "      <td>male</td>\n",
       "      <td>23</td>\n",
       "      <td>Student</td>\n",
       "      <td>Taurus</td>\n",
       "      <td>01,July,2004</td>\n",
       "      <td>Dear Susan:    Just to clarify, I am as...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>681283</th>\n",
       "      <td>1713845</td>\n",
       "      <td>male</td>\n",
       "      <td>23</td>\n",
       "      <td>Student</td>\n",
       "      <td>Taurus</td>\n",
       "      <td>01,July,2004</td>\n",
       "      <td>Hey everybody...and Susan,  You might a...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f7f63a7f-d680-4d89-a1f2-96c78da1c1a0')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-f7f63a7f-d680-4d89-a1f2-96c78da1c1a0 button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-f7f63a7f-d680-4d89-a1f2-96c78da1c1a0');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "             id gender  age    topic    sign          date  \\\n",
       "681279  1713845   male   23  Student  Taurus  01,July,2004   \n",
       "681280  1713845   male   23  Student  Taurus  01,July,2004   \n",
       "681281  1713845   male   23  Student  Taurus  01,July,2004   \n",
       "681282  1713845   male   23  Student  Taurus  01,July,2004   \n",
       "681283  1713845   male   23  Student  Taurus  01,July,2004   \n",
       "\n",
       "                                                     text  \n",
       "681279         Dear Susan,  I could write some really ...  \n",
       "681280         Dear Susan,  'I have the second yeast i...  \n",
       "681281         Dear Susan,  Your 'boyfriend' is fuckin...  \n",
       "681282         Dear Susan:    Just to clarify, I am as...  \n",
       "681283         Hey everybody...and Susan,  You might a...  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "blog_df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "K_JUOOCARknm",
    "outputId": "43108093-ce9d-434a-e0a6-9f17a64d1135"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 681284 entries, 0 to 681283\n",
      "Data columns (total 7 columns):\n",
      " #   Column  Non-Null Count   Dtype \n",
      "---  ------  --------------   ----- \n",
      " 0   id      681284 non-null  int64 \n",
      " 1   gender  681284 non-null  object\n",
      " 2   age     681284 non-null  int64 \n",
      " 3   topic   681284 non-null  object\n",
      " 4   sign    681284 non-null  object\n",
      " 5   date    681284 non-null  object\n",
      " 6   text    681284 non-null  object\n",
      "dtypes: int64(2), object(5)\n",
      "memory usage: 36.4+ MB\n"
     ]
    }
   ],
   "source": [
    "blog_df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "TyBVEr-1R6M7"
   },
   "source": [
    "- There are 681284 records are there , In this Id and Age are only Numerical columns and remaining aew object datatype\n",
    "- It seems to be there is no Null values present in there\n",
    "- By the first five and last five records Id column having total set of records and unique one ,That may be not useful for model building\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "0cWavl22UIie",
    "outputId": "e22a5f8b-1e3d-40b8-d853-c276fc53fe84"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "male      0.50668\n",
      "female    0.49332\n",
      "Name: gender, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# lets check unique records of each column\n",
    "\n",
    "print(blog_df['gender'].value_counts()/blog_df.shape[0])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "mFLa1voRVPhW"
   },
   "source": [
    "Almost The male and female blogs are 50 : 50"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 227
    },
    "id": "f2OC1JBmVOaA",
    "outputId": "dc827610-51bb-44d4-afac-3213d186cad3"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "blog_df['gender'].value_counts().plot(kind='bar');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "oPu5IvLKVmAQ",
    "outputId": "e8a38857-d7fc-4d6d-ea16-df7b6f566129"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "17    80859\n",
       "24    80071\n",
       "23    72889\n",
       "16    72708\n",
       "25    67051\n",
       "26    55312\n",
       "27    46124\n",
       "15    41767\n",
       "14    27400\n",
       "34    21347\n",
       "33    17584\n",
       "35    17462\n",
       "36    14229\n",
       "13    13133\n",
       "37     9317\n",
       "38     7545\n",
       "39     5556\n",
       "40     5016\n",
       "45     4482\n",
       "43     4230\n",
       "41     3738\n",
       "48     3572\n",
       "42     2908\n",
       "46     2733\n",
       "47     2207\n",
       "44     2044\n",
       "Name: age, dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "blog_df['age'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "DUZoBAZHVwLh"
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 216
    },
    "id": "Y6U9p8MsWPAU",
    "outputId": "d096f3d0-a710-4e91-aa72-aec11de66971"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "blog_df['age'].value_counts().plot(kind='bar');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "x_rG86qHXUPb"
   },
   "source": [
    "- Most of the blogs are posted by age of 17 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 216
    },
    "id": "YF9WKbZRWO2t",
    "outputId": "0573ac69-1ce9-47ac-f74c-d4d93d2cc5d3"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.histplot(blog_df['age']);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ljtKVm_cYKwV"
   },
   "source": [
    "- Most of the blogs are written by 15-17 and 20-27 age people"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "aUOT3FXwWOzM",
    "outputId": "918e75ae-cc13-4f9b-d08c-1a87729ad347"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "indUnk                     251015\n",
       "Student                    153903\n",
       "Technology                  42055\n",
       "Arts                        32449\n",
       "Education                   29633\n",
       "Communications-Media        20140\n",
       "Internet                    16006\n",
       "Non-Profit                  14700\n",
       "Engineering                 11653\n",
       "Law                          9040\n",
       "Publishing                   7753\n",
       "Science                      7269\n",
       "Government                   6907\n",
       "Consulting                   5862\n",
       "Religion                     5235\n",
       "Fashion                      4851\n",
       "Marketing                    4769\n",
       "Advertising                  4676\n",
       "BusinessServices             4500\n",
       "Banking                      4049\n",
       "Chemicals                    3928\n",
       "Telecommunications           3891\n",
       "Accounting                   3832\n",
       "Military                     3128\n",
       "Museums-Libraries            3096\n",
       "Sports-Recreation            3038\n",
       "HumanResources               3010\n",
       "RealEstate                   2870\n",
       "Transportation               2326\n",
       "Manufacturing                2272\n",
       "Biotech                      2234\n",
       "Tourism                      1942\n",
       "LawEnforcement-Security      1878\n",
       "Architecture                 1638\n",
       "InvestmentBanking            1292\n",
       "Automotive                   1244\n",
       "Agriculture                  1235\n",
       "Construction                 1093\n",
       "Environment                   592\n",
       "Maritime                      280\n",
       "Name: topic, dtype: int64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "blog_df['topic'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "4mtIYRykZXQk"
   },
   "source": [
    "- Remaining categories are we known except \"indUnk\" ,but most of the people write blogs in this topic only,lets visualize"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "qZLlmhB_4AFD"
   },
   "outputs": [],
   "source": [
    "blog_df.replace('indUnk','Unknown',inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 352
    },
    "id": "Zv_dRDDGWOtC",
    "outputId": "d4362107-26bc-4c6b-ad4a-25abeeb690bf"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8,8))\n",
    "blog_df.topic.value_counts().plot(kind= 'bar')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 233
    },
    "id": "8cUJuWmOWOAi",
    "outputId": "bfae43df-bf85-45da-8ab2-1b5245c81176"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# lets which age people writing on this topic\n",
    "\n",
    "blog_df.loc[blog_df['topic']==\"Unknown\"]['age'].value_counts().plot(kind='bar')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "uqPyT10qa4Eo"
   },
   "source": [
    "the topic mostly written blogs are 20-27 age people"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "g4gOJ7KPcnR6"
   },
   "source": [
    "May be this indunk we can considered as unkown since the topics are varying to different to different people and their written blogs either their personal or others , I ll keep this as unkown\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "X3weOFdEee0g",
    "outputId": "203c611c-1038-4db4-f06f-6ca1b736665f"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Cancer         65048\n",
       "Aries          64979\n",
       "Taurus         62561\n",
       "Libra          62363\n",
       "Virgo          60399\n",
       "Scorpio        57161\n",
       "Pisces         54053\n",
       "Leo            53811\n",
       "Gemini         51985\n",
       "Sagittarius    50036\n",
       "Aquarius       49687\n",
       "Capricorn      49201\n",
       "Name: sign, dtype: int64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "blog_df['sign'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 260
    },
    "id": "s-UFbbSNdMTR",
    "outputId": "ae8e2c89-8ada-4e2a-dac7-10aca410955b"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "blog_df['sign'].value_counts().plot(kind='bar')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "JW3ErcJDdMD5",
    "outputId": "b12c4074-10bb-4dbc-d44a-62a5ccd4c23b"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of unique categories in sign are :  12\n"
     ]
    }
   ],
   "source": [
    "print(\"The number of unique categories in sign are : \" , len(blog_df['sign'].unique()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "QCOFcDuUfdt8"
   },
   "source": [
    "- All Categories in sign are almost equal ratio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "po6MedGFcZ3u",
    "outputId": "53ff357c-8f8a-41a0-a993-bf78981481c7"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "02,August,2004     16544\n",
       "01,August,2004     13261\n",
       "03,August,2004     11851\n",
       "05,August,2004      9297\n",
       "04,August,2004      8661\n",
       "                   ...  \n",
       "10,Januar,2004         1\n",
       "02,enero,2004          1\n",
       "15,Mai,2004            1\n",
       "08,enero,2004          1\n",
       "21,October,2000        1\n",
       "Name: date, Length: 2616, dtype: int64"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "blog_df['date'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "yfpLJxLUf5bk"
   },
   "source": [
    "- here we have issue with the format of date,they are in different named in months ,May be the text also be will be in the format of non english,\n",
    "lets check once"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 556
    },
    "id": "Z4H3fiovcZsd",
    "outputId": "30d2bfa0-896a-4470-aaad-f15ae24ea1bb"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.google.colaboratory.intrinsic+json": {
       "type": "string"
      },
      "text/plain": [
       "\"       was at iguazu all night .. love that place. actually, there was this cute waitress there .. and everyone was like .. go .. go make your move .. go chat with her. but by the time i got enoguh booze in me to get my nerve up, the place packed up and she was busy.   damn...  sheesh whats wrong with me tonite.   anyway i had lunch with L the other day. I dunno, she didnt seem flirty or anything, just normal, friendly. and i found out that she lives with her boyfriend. and she went on a hol with him and his family. sounds like a pretty serious thing going on  but then again she did say she gets bored easily.  so thats why i didnt ask her out for the weekend like i was supposed to. M seems to think i still have a chance .. i'm not so hopeful. but she's still cool though, i wouldnt mind having her as a friend. and i bet she has cute girl friends too :) m suggested i wait about week and if she doesnt call/sms me first, sms her out for coffee or something.   good idea?            \""
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "blog_df.loc[blog_df['date']=='10,Januar,2004']['text'][181521]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "yqEEW8LThjzJ"
   },
   "source": [
    "-its english only ,but the date  format given wrong"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 574
    },
    "id": "1X8RQZBrcZd8",
    "outputId": "6b62d9b1-ca78-4c15-eb03-1a8fda7cab8f"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.google.colaboratory.intrinsic+json": {
       "type": "string"
      },
      "text/plain": [
       "\"                 i can't wait for things to get moving, i want out of here. im lookin forward to uni although it means another 3 years in england. it should be so much fun from my experiences of it so far and my brother's experiences. after uni though it will be another year i guess before i can move, as i'll need to work for 'bout that long to get some money. will be quite lonely i imagine as every1 will have moved on by then. i wana work in a pub, duno why, not any pub, not a big pub, i'd love to work the fox n hound by jill's - it's small n friendly, i think thats what attracks me to bein a barmaid - every1 thinks its somit to look down on but what's so bad bein surrounded by people in a friendly (if smoky :s) atmosphere? mayb im naive... also hav a job lined up with jill i hope :) i love the sound of what she plans to do and she says she'll employ me :) ur pretty much self-employed to be honest so it should happen n im into herbal homeopathic stuff so sounds good for me. after that id love to work in italy or canada. i cant speak italian so that leaves canada lol. although i don't have enough points for a visa :( i hav a friend who's gona help me as he's canadian (thats gota help!) and if i end up workin for a whole year before i go then that shld give me more points, plus im gona try learn french alongside my psychology degree, i wana speak french newas but now i hav a goal for it and will give me more points the better at it i am. the biggest problem is probably death - i.e. getting in a plane... ive been thinkin bout takin a flight course to help me feel more prepared for flying, but i don't see how im gona erase the knowledge that it could crash - and if it does it's the worst possible thing to be in that crashes. i dont wana die. if i do, i dont wana die like that. but then more than not wanting to die, i wana live, i know wot i mean... which brings me onto the fact that i realy should start jogging again. i wana b able to do the 10mile fun run next year to raise money for something that keeps catching my eye, i seem to read about it in magazines n papers all the time, n things through the door, it breaks my heart, if there's nethin i can do i wana do it. not because im such a great person just because ive seen the effects.... newas...will b a new years resolution lol im pathetic camp america should be cool too, wish it was this summer though as im gona b bored outa my brain n probs comit suicide for somit fun to do...talkin of which my mum thinks im on drugs, seriously do i come across as that abnormal n screwed? i guess we just have different views on what's normal, what emotions n behaviour are acceptable, whats good for us etc. o well arrivedechi x      \""
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#lets see some random text\n",
    "blog_df['text'][100]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 70
    },
    "id": "9UVfPXoQiAZw",
    "outputId": "c2ea428f-572e-4860-a636-26e5a42d8082"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.google.colaboratory.intrinsic+json": {
       "type": "string"
      },
      "text/plain": [
       "'                  urlLink    Homina homina.&nbsp; urlLink         '"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "blog_df['text'][11211]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 469
    },
    "id": "rqU_jrfpiALt",
    "outputId": "f833f41e-6682-407c-bb44-4e669cdd949e"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.google.colaboratory.intrinsic+json": {
       "type": "string"
      },
      "text/plain": [
       "\"       Be thou my vision, O Lord of my heart Naught be all else to me save that thou art Thou my best thought by day or by night Waking or sleeping thy presence my light.  Be thou my wisdom, thou my true word I ever with thee, thou with me, Lord Thou my great Father, I thy true Son Thou in me dwelling, and I with thee one.  Be thou my battleshield, sword for the fight Be thou my dignity, thou my delight Thou my soul's shelter, thou my high tower Raise thou me heavenward, O power of my power.  Riches I heed not, nor man's empty praise Thou mine inheritance, now and always Thou and thou only, first in my heart High King of heavem, my treasure thou art.  High King of heaven, after victory won May I reach heaven's joys, O bright heaven's sun Heart of my own heart, whatever befall Still be my vision, O ruler of all.          \""
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "blog_df['text'][13231]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 313
    },
    "id": "Dsnabji5i-Ca",
    "outputId": "24f8d9ad-ff05-44a3-f4a2-278aeace57bd"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.google.colaboratory.intrinsic+json": {
       "type": "string"
      },
      "text/plain": [
       "'             update!!! ran out of gas, so while its cooling down for refuel i come in to get a glass of tea and take some Benadryl (the allergenic horrors out there!), and while sitting at my pc i see blood drops on my shirt, look at my wrist rest and find a blood stain pooling... somehow i cut my wrist open!! sooo, the count so far is 4 band-aids (3 to cover the length of the burn, 1 on the wrist)  before the day is through i will have used my entire Neosporin tube and an entire box of band-aids, THIS I SWEAR!         '"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "blog_df['text'][15000]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "WritVFk5iVJ2"
   },
   "source": [
    "- By observing some random text , There is some initial space while starting their blog\n",
    "- There are many special characters are in the blogs\n",
    "- some of the blogs having the numerical terms also\n",
    "- observed many meaning less terms and shortcut of words"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ymIwg4wNTid8"
   },
   "source": [
    "## Part A - Q1 A - Clean the Structured Data:\n",
    "\n",
    "   #### i.Missing value analysis and imputation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "aJhSLIqyR3E5",
    "outputId": "dde27912-e389-4af6-8db0-2e1e33a6fdd7"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id        0\n",
       "gender    0\n",
       "age       0\n",
       "topic     0\n",
       "sign      0\n",
       "date      0\n",
       "text      0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check for null values\n",
    "blog_df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "up9P36wWTGh9",
    "outputId": "6794b872-3d9a-4e66-f011-ad20a44f644e"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4686"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#checking for dublicate records\n",
    "blog_df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "FBRFpHM7TdQf"
   },
   "outputs": [],
   "source": [
    "# drop dublicates\n",
    "blog_df1 = blog_df.drop_duplicates(keep='first',ignore_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "2HIAN3Iyjlxz",
    "outputId": "87ae68f1-a9ea-4159-dbcb-cd2933e9f35f"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(676598, 7)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "blog_df1.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 531
    },
    "id": "9UWOVje5jpdL",
    "outputId": "1e8b85a2-7d51-4259-aa82-0269021d8eb7"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-4627eeef-aef8-481c-9734-0acb2b35e6e2\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>topic</th>\n",
       "      <th>sign</th>\n",
       "      <th>date</th>\n",
       "      <th>text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2059027</td>\n",
       "      <td>male</td>\n",
       "      <td>15</td>\n",
       "      <td>Student</td>\n",
       "      <td>Leo</td>\n",
       "      <td>14,May,2004</td>\n",
       "      <td>Info has been found (+/- 100 pages,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2059027</td>\n",
       "      <td>male</td>\n",
       "      <td>15</td>\n",
       "      <td>Student</td>\n",
       "      <td>Leo</td>\n",
       "      <td>13,May,2004</td>\n",
       "      <td>These are the team members:   Drewe...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2059027</td>\n",
       "      <td>male</td>\n",
       "      <td>15</td>\n",
       "      <td>Student</td>\n",
       "      <td>Leo</td>\n",
       "      <td>12,May,2004</td>\n",
       "      <td>In het kader van kernfusie op aarde...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2059027</td>\n",
       "      <td>male</td>\n",
       "      <td>15</td>\n",
       "      <td>Student</td>\n",
       "      <td>Leo</td>\n",
       "      <td>12,May,2004</td>\n",
       "      <td>testing!!!  testing!!!</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3581210</td>\n",
       "      <td>male</td>\n",
       "      <td>33</td>\n",
       "      <td>InvestmentBanking</td>\n",
       "      <td>Aquarius</td>\n",
       "      <td>11,June,2004</td>\n",
       "      <td>Thanks to Yahoo!'s Toolbar I can ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4627eeef-aef8-481c-9734-0acb2b35e6e2')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-4627eeef-aef8-481c-9734-0acb2b35e6e2 button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-4627eeef-aef8-481c-9734-0acb2b35e6e2');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "        id gender  age              topic      sign          date  \\\n",
       "0  2059027   male   15            Student       Leo   14,May,2004   \n",
       "1  2059027   male   15            Student       Leo   13,May,2004   \n",
       "2  2059027   male   15            Student       Leo   12,May,2004   \n",
       "3  2059027   male   15            Student       Leo   12,May,2004   \n",
       "4  3581210   male   33  InvestmentBanking  Aquarius  11,June,2004   \n",
       "\n",
       "                                                text  \n",
       "0             Info has been found (+/- 100 pages,...  \n",
       "1             These are the team members:   Drewe...  \n",
       "2             In het kader van kernfusie op aarde...  \n",
       "3                   testing!!!  testing!!!            \n",
       "4               Thanks to Yahoo!'s Toolbar I can ...  "
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "blog_df1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 478
    },
    "id": "tFDshnQaj0GM",
    "outputId": "efad6ad2-4827-4332-d5e9-42e5d0bce6b5"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-0f613e36-f836-42b0-964f-e262927da0c6\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>topic</th>\n",
       "      <th>sign</th>\n",
       "      <th>date</th>\n",
       "      <th>text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>676593</th>\n",
       "      <td>1713845</td>\n",
       "      <td>male</td>\n",
       "      <td>23</td>\n",
       "      <td>Student</td>\n",
       "      <td>Taurus</td>\n",
       "      <td>01,July,2004</td>\n",
       "      <td>Dear Susan,  I could write some really ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>676594</th>\n",
       "      <td>1713845</td>\n",
       "      <td>male</td>\n",
       "      <td>23</td>\n",
       "      <td>Student</td>\n",
       "      <td>Taurus</td>\n",
       "      <td>01,July,2004</td>\n",
       "      <td>Dear Susan,  'I have the second yeast i...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>676595</th>\n",
       "      <td>1713845</td>\n",
       "      <td>male</td>\n",
       "      <td>23</td>\n",
       "      <td>Student</td>\n",
       "      <td>Taurus</td>\n",
       "      <td>01,July,2004</td>\n",
       "      <td>Dear Susan,  Your 'boyfriend' is fuckin...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>676596</th>\n",
       "      <td>1713845</td>\n",
       "      <td>male</td>\n",
       "      <td>23</td>\n",
       "      <td>Student</td>\n",
       "      <td>Taurus</td>\n",
       "      <td>01,July,2004</td>\n",
       "      <td>Dear Susan:    Just to clarify, I am as...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>676597</th>\n",
       "      <td>1713845</td>\n",
       "      <td>male</td>\n",
       "      <td>23</td>\n",
       "      <td>Student</td>\n",
       "      <td>Taurus</td>\n",
       "      <td>01,July,2004</td>\n",
       "      <td>Hey everybody...and Susan,  You might a...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0f613e36-f836-42b0-964f-e262927da0c6')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-0f613e36-f836-42b0-964f-e262927da0c6 button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-0f613e36-f836-42b0-964f-e262927da0c6');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "             id gender  age    topic    sign          date  \\\n",
       "676593  1713845   male   23  Student  Taurus  01,July,2004   \n",
       "676594  1713845   male   23  Student  Taurus  01,July,2004   \n",
       "676595  1713845   male   23  Student  Taurus  01,July,2004   \n",
       "676596  1713845   male   23  Student  Taurus  01,July,2004   \n",
       "676597  1713845   male   23  Student  Taurus  01,July,2004   \n",
       "\n",
       "                                                     text  \n",
       "676593         Dear Susan,  I could write some really ...  \n",
       "676594         Dear Susan,  'I have the second yeast i...  \n",
       "676595         Dear Susan,  Your 'boyfriend' is fuckin...  \n",
       "676596         Dear Susan:    Just to clarify, I am as...  \n",
       "676597         Hey everybody...and Susan,  You might a...  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "blog_df1.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "0fB_589oxhkT"
   },
   "outputs": [],
   "source": [
    "blog_df2 = blog_df1.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 574
    },
    "id": "KQh6X2v993EE",
    "outputId": "f32eacec-ef2b-4a89-eda3-c5beb4d22147"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.google.colaboratory.intrinsic+json": {
       "type": "string"
      },
      "text/plain": [
       "\"       İnsan var olduğu günden bu yana hep hürriyet arayışı içinde olmuştur. Bu arayış yer yer onun kendi iradesini sezişi ve onu tam gerçekleştirmeye çalışması, zaman zaman da dinle, devletle, hatta örf, adet ve ahlakla savaşması şeklinde cereyan etmiştir. 2003 senesinin Mart ayında uluslararası gençlik festivalinde (ISFiT) Norveç’in Trondheim şehrinde katılımcılar arasındaydım. Batıdan gelen gençlerle “Doğu toplulukların mevcut durumlarını ve intihar eylemleri”ni tartışıyorduk, ama anlamaya çok zorlanıyorlardı. Nasıl bir ruh hali, insanın canına göz göre göre kıyabilirdi? Batı ülkelerin vatandaşlarını ürküten, anlayamadıkları bir olaydı bu.  “Bu kadar büyük bir cani olabilmek için insanlıktan nasibini almamış olmak gerek” gibi cümleler söyledi katılımcılar.  Oysa insanlığın görmediği tür katliamlar, seri cinayetler Batı'da meydana  gelebiliyordu. İnanmayan Michael Moore’un yaptığı belgesellere, aktüalite programlarına bakabilirler.   Batı toplumları, bu resimler yayınlandıktan sonra bir insanın nasıl canavara dönüşebildiğini belki biraz anlayabilir. İnsanlık dışı işkenceler, akıl almaz iğrençlikler sergilerken, bir de kameralara “işlem tamam” işareti yapan bayanın yüzündeki tebessümü gördünüz mü? Sanki normal bir fabrika işçisiymiş de rutin bir vardiyada görevini yerine getiriyormuş gibi… Şimdi kendinizi bir Iraklı yerine koyun ve eşinize, dostunuza, kocanıza, karınıza, ananıza, babanıza bunların yapıldığını varsayın. Bakalım ne hissedeceksiniz?  Bunu yapanlar bir de karşınıza çıkıp, size özgürlük ve insanlık getirdiğini iddia ederse ve hiç kimseye hesap vermeyeceklerini bile bile bunları yaparsa ne yaparsınız? Onlara sistematik karşı koyma gücünüz yoksa, çaresizlik ve bu acziyet tepenize binmişse nasıl bir ruh hali takınırsınız? Şark coğrafıyasında onur ve izzet-i nefs hayattan çok daha önemlidir. Dahası cennet ve cehennem temennilerinden de önemli algılanırlar. İntihar saldırıları dine sığmaz, ahlak kaldırmaz, vicdan kabul edilmez. Ama onuru zedelenmiş bir adam için oldukça rasyonel bir tavırdır. Amerikalılar Irak esirleri ne şekilde konuşturmayı planlıyordu bilinmez; ama birçoğunun canlı bomba olup konuşacakları da şüphe götürmez. Demem o ki, bu işkenceci ruh halinin, ne farkı var canlı bombadan? Yıllar boyu bir psikopat diktatörün çizmesi altında ezilmek. Sonra bambaşka kültürlerden, dillerden askerlerin botlarının altında çiğnenmek. Ne büyük bir imtihandır bu? Ne farkı var Sadam ile bu işkenceci işgalcilerin? Ne değişti Irakta?  Daha önce de o hapishanelerde çürütülüyorlardı, şimdi de üstelik işgal güçlerinin hayasız bin bir çeşit sadist uygulamalarıyla gururları, onurları, erkeklikleri, kadınlıkları yerle bir ediliyor. Bu mudur Batının vaat ettiği demokrasi, bu mudur insanca yaşamak? Amerikan ve İngiliz askerlerinin Iraklılara yaptığı işkenceler dünyayı ayağa kaldırıldı. Hele “Daily Mirror”  gazetesinin, bir İngiliz askerinin, başına çuval geçiren çekilmiş fotoğrafını yayınlanması herkesi dehşete düşürdü.  Amerikan ve İngiliz askerlerinin Iraklılara yaptıkları, ilk bakışta dehşet verici görünüyor. Batılıların cibilliyeti araştırılıp sorgulandığında ise Iraklılara yapılan insanlık dışı işkencelerin hiç de şaşırtmıyor insanları….  1Köleleri, vahşi kaplanlı arenalara mancınıkla atanlar, ne Asyalıydı, ne de Afrikalı, Avrupalıydılar. 2İnsanları gaz odalarında veya Auschwitz kamplarında ölüme gönderen Hitler, ne Asyalıydı ne de Afrikalı, Avrupalıydı.  3Engizisyon mahkemeleri Asya veya Afrika’da değil, Avrupa’da kurulmuştu.  İsviçreli tarihçi Walter Nigg, bakın neler anlatıyor: Baş parmağı sıkarak  işkence yapmaya yaran alet şöyle kullanılırdı… parmaklar mengenelere yerleştirir ve kemikler kırılana, kan fışkırana kadar aletin vidaları sıkılır. Suçlu, demir işkence sandalyesine de oturtulabilirdi. Bu sandalyenin sivrileştirilmiş demir çiviler vardı. Çiviler korlaşana dek aşağıdan ısıtılır, sonra da kurban üzerine oturtulurdu. Bot denilen işkence aleti ise kaval kemiğini kırmak için kullanırdı. Diğer popüler işkence yöntemi ise kişiyi askı ya da  tekerleğe bağlayıp, iki tarafında kol ve bacakları kırılıncaya kadar germekti. Bu arada bedenin üzerine taşlarla ağırlık yapılırdı. İşkencecilerin çığlıklara rahatsız olamaması için de kurbanın ağzı bezle kapatılırdı. Üç dört saat süren işkenceler çok yaygındı. Bu işlemler sırasında, işkence aletlerine devamlı kutsal su dökülürdü.  Kendi soylarından olan insanların sırf Katolik ve Protestan ayrımı yüzünden böylesi bir vahşeti reva görenlerin bugün Irak’ta Müslümanlara yaptıkları çok görmemeli! Eskiden işkence aletlerinin kutsal su döküyorlardı, şimdi işkence yaptıkları insanların üstüne işiyorlar! Onuru kırılan, işkence gören her Iraklı önce kendi günah galerimizi bize anımsatmalı. Cezaevi baskınlarını yanlı veren, insanlık dışı işkenceleri görmezden gelen, güce tapan medyanın başkasının üzerinden günah çıkartması inandırıcı olmuyor!  Dünyada bir tarihi gerçek (factoid) vardır. Bütün büyük İmparatorluklar son 15-20 yıllarını  savaşarak geçirmişlerdir. Örnek vermek gerekirse, Bizans İmparatorluğu, Roma İmparatorluğu, Osmanlı İmparatorluğu, Avusturya-Macaristan İmparatorluğu ve geçen yüzyıllımızın son İmparatorluğu sayılan SSCB  aynı akıbete  nail olmuştur…          \""
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "blog_df1['text'][309202]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "YagiEJqm7yuy",
    "outputId": "17473622-25be-463e-ee44-2d8d40cc307b"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
      "Collecting contractions\n",
      "  Downloading contractions-0.1.73-py2.py3-none-any.whl (8.7 kB)\n",
      "Collecting textsearch>=0.0.21 (from contractions)\n",
      "  Downloading textsearch-0.0.24-py2.py3-none-any.whl (7.6 kB)\n",
      "Collecting anyascii (from textsearch>=0.0.21->contractions)\n",
      "  Downloading anyascii-0.3.2-py3-none-any.whl (289 kB)\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m289.9/289.9 kB\u001b[0m \u001b[31m7.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hCollecting pyahocorasick (from textsearch>=0.0.21->contractions)\n",
      "  Downloading pyahocorasick-2.0.0-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (110 kB)\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m110.8/110.8 kB\u001b[0m \u001b[31m14.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hInstalling collected packages: pyahocorasick, anyascii, textsearch, contractions\n",
      "Successfully installed anyascii-0.3.2 contractions-0.1.73 pyahocorasick-2.0.0 textsearch-0.0.24\n"
     ]
    }
   ],
   "source": [
    "!pip install contractions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "53QiCGn3-9X2"
   },
   "outputs": [],
   "source": [
    "import unidecode"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "0uBHM1Yk-8_5",
    "outputId": "ad07d41e-5271-461a-d76f-7e0ddd100d9e"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 676598/676598 [01:11<00:00, 9513.65it/s] \n",
      "<ipython-input-40-dae02cd58ee7>:16: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  blog_df1['cleaned_text'] = text\n"
     ]
    }
   ],
   "source": [
    "# defining an empty list\n",
    "text = []\n",
    "\n",
    "# looping over each message in the data\n",
    "for i in tqdm(range(blog_df1.shape[0])):\n",
    "\n",
    "    t = blog_df1['text'][i].split()\n",
    "    # Applying the unicode data on a sentence and replacing the accented words to get the closest possible ASCII text\n",
    "    new_text = [unidecode.unidecode(word) for word in t]\n",
    "    \n",
    "    # Combining the seperate words into sentence\n",
    "    new_text = ' '.join(new_text)\n",
    "    # append the new_text to list text\n",
    "    text.append(new_text)\n",
    "\n",
    "blog_df1['cleaned_text'] = text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 548
    },
    "id": "5Po26U8k_gOy",
    "outputId": "3a0e5526-106f-4a75-9c59-65db478f2ece"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-0dcadd1c-72a9-4b37-b91c-b2a73ce3e7cb\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>topic</th>\n",
       "      <th>sign</th>\n",
       "      <th>date</th>\n",
       "      <th>text</th>\n",
       "      <th>cleaned_text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>676593</th>\n",
       "      <td>1713845</td>\n",
       "      <td>male</td>\n",
       "      <td>23</td>\n",
       "      <td>Student</td>\n",
       "      <td>Taurus</td>\n",
       "      <td>01,July,2004</td>\n",
       "      <td>Dear Susan,  I could write some really ...</td>\n",
       "      <td>Dear Susan, I could write some really bitter d...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>676594</th>\n",
       "      <td>1713845</td>\n",
       "      <td>male</td>\n",
       "      <td>23</td>\n",
       "      <td>Student</td>\n",
       "      <td>Taurus</td>\n",
       "      <td>01,July,2004</td>\n",
       "      <td>Dear Susan,  'I have the second yeast i...</td>\n",
       "      <td>Dear Susan, 'I have the second yeast infection...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>676595</th>\n",
       "      <td>1713845</td>\n",
       "      <td>male</td>\n",
       "      <td>23</td>\n",
       "      <td>Student</td>\n",
       "      <td>Taurus</td>\n",
       "      <td>01,July,2004</td>\n",
       "      <td>Dear Susan,  Your 'boyfriend' is fuckin...</td>\n",
       "      <td>Dear Susan, Your 'boyfriend' is fucking BALD! ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>676596</th>\n",
       "      <td>1713845</td>\n",
       "      <td>male</td>\n",
       "      <td>23</td>\n",
       "      <td>Student</td>\n",
       "      <td>Taurus</td>\n",
       "      <td>01,July,2004</td>\n",
       "      <td>Dear Susan:    Just to clarify, I am as...</td>\n",
       "      <td>Dear Susan: Just to clarify, I am asking you t...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>676597</th>\n",
       "      <td>1713845</td>\n",
       "      <td>male</td>\n",
       "      <td>23</td>\n",
       "      <td>Student</td>\n",
       "      <td>Taurus</td>\n",
       "      <td>01,July,2004</td>\n",
       "      <td>Hey everybody...and Susan,  You might a...</td>\n",
       "      <td>Hey everybody...and Susan, You might already k...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0dcadd1c-72a9-4b37-b91c-b2a73ce3e7cb')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-0dcadd1c-72a9-4b37-b91c-b2a73ce3e7cb button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-0dcadd1c-72a9-4b37-b91c-b2a73ce3e7cb');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "             id gender  age    topic    sign          date  \\\n",
       "676593  1713845   male   23  Student  Taurus  01,July,2004   \n",
       "676594  1713845   male   23  Student  Taurus  01,July,2004   \n",
       "676595  1713845   male   23  Student  Taurus  01,July,2004   \n",
       "676596  1713845   male   23  Student  Taurus  01,July,2004   \n",
       "676597  1713845   male   23  Student  Taurus  01,July,2004   \n",
       "\n",
       "                                                     text  \\\n",
       "676593         Dear Susan,  I could write some really ...   \n",
       "676594         Dear Susan,  'I have the second yeast i...   \n",
       "676595         Dear Susan,  Your 'boyfriend' is fuckin...   \n",
       "676596         Dear Susan:    Just to clarify, I am as...   \n",
       "676597         Hey everybody...and Susan,  You might a...   \n",
       "\n",
       "                                             cleaned_text  \n",
       "676593  Dear Susan, I could write some really bitter d...  \n",
       "676594  Dear Susan, 'I have the second yeast infection...  \n",
       "676595  Dear Susan, Your 'boyfriend' is fucking BALD! ...  \n",
       "676596  Dear Susan: Just to clarify, I am asking you t...  \n",
       "676597  Hey everybody...and Susan, You might already k...  "
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "blog_df1.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "T1B_ySff4h_I"
   },
   "outputs": [],
   "source": [
    "import contractions\n",
    "def replace_contractions(text):\n",
    "    \"\"\"Replace contractions in string of text\"\"\"\n",
    "    return contractions.fix(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "7xX8d5g38Ia4",
    "outputId": "d0b0cc87-c4f6-4365-d07b-93b161e1f9c4"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 676598/676598 [01:24<00:00, 8023.55it/s] \n",
      "<ipython-input-43-23f87e54a6e4>:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  blog_df1['cleaned_text'] = text\n"
     ]
    }
   ],
   "source": [
    "text = []\n",
    "for i in tqdm(blog_df1['cleaned_text']):\n",
    "  ctrs = replace_contractions(i)\n",
    "  text.append(ctrs)\n",
    "blog_df1['cleaned_text'] = text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 548
    },
    "id": "ugMMgWzUADXl",
    "outputId": "71124ecb-723a-44e1-b566-5ae93799cb1a"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-06767048-2fcf-4dd4-a633-bbf638c64991\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>topic</th>\n",
       "      <th>sign</th>\n",
       "      <th>date</th>\n",
       "      <th>text</th>\n",
       "      <th>cleaned_text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>676593</th>\n",
       "      <td>1713845</td>\n",
       "      <td>male</td>\n",
       "      <td>23</td>\n",
       "      <td>Student</td>\n",
       "      <td>Taurus</td>\n",
       "      <td>01,July,2004</td>\n",
       "      <td>Dear Susan,  I could write some really ...</td>\n",
       "      <td>Dear Susan, I could write some really bitter d...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>676594</th>\n",
       "      <td>1713845</td>\n",
       "      <td>male</td>\n",
       "      <td>23</td>\n",
       "      <td>Student</td>\n",
       "      <td>Taurus</td>\n",
       "      <td>01,July,2004</td>\n",
       "      <td>Dear Susan,  'I have the second yeast i...</td>\n",
       "      <td>Dear Susan, 'I have the second yeast infection...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>676595</th>\n",
       "      <td>1713845</td>\n",
       "      <td>male</td>\n",
       "      <td>23</td>\n",
       "      <td>Student</td>\n",
       "      <td>Taurus</td>\n",
       "      <td>01,July,2004</td>\n",
       "      <td>Dear Susan,  Your 'boyfriend' is fuckin...</td>\n",
       "      <td>Dear Susan, Your 'boyfriend' is fucking BALD! ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>676596</th>\n",
       "      <td>1713845</td>\n",
       "      <td>male</td>\n",
       "      <td>23</td>\n",
       "      <td>Student</td>\n",
       "      <td>Taurus</td>\n",
       "      <td>01,July,2004</td>\n",
       "      <td>Dear Susan:    Just to clarify, I am as...</td>\n",
       "      <td>Dear Susan: Just to clarify, I am asking you t...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>676597</th>\n",
       "      <td>1713845</td>\n",
       "      <td>male</td>\n",
       "      <td>23</td>\n",
       "      <td>Student</td>\n",
       "      <td>Taurus</td>\n",
       "      <td>01,July,2004</td>\n",
       "      <td>Hey everybody...and Susan,  You might a...</td>\n",
       "      <td>Hey everybody...and Susan, You might already k...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-06767048-2fcf-4dd4-a633-bbf638c64991')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-06767048-2fcf-4dd4-a633-bbf638c64991 button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-06767048-2fcf-4dd4-a633-bbf638c64991');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "             id gender  age    topic    sign          date  \\\n",
       "676593  1713845   male   23  Student  Taurus  01,July,2004   \n",
       "676594  1713845   male   23  Student  Taurus  01,July,2004   \n",
       "676595  1713845   male   23  Student  Taurus  01,July,2004   \n",
       "676596  1713845   male   23  Student  Taurus  01,July,2004   \n",
       "676597  1713845   male   23  Student  Taurus  01,July,2004   \n",
       "\n",
       "                                                     text  \\\n",
       "676593         Dear Susan,  I could write some really ...   \n",
       "676594         Dear Susan,  'I have the second yeast i...   \n",
       "676595         Dear Susan,  Your 'boyfriend' is fuckin...   \n",
       "676596         Dear Susan:    Just to clarify, I am as...   \n",
       "676597         Hey everybody...and Susan,  You might a...   \n",
       "\n",
       "                                             cleaned_text  \n",
       "676593  Dear Susan, I could write some really bitter d...  \n",
       "676594  Dear Susan, 'I have the second yeast infection...  \n",
       "676595  Dear Susan, Your 'boyfriend' is fucking BALD! ...  \n",
       "676596  Dear Susan: Just to clarify, I am asking you t...  \n",
       "676597  Hey everybody...and Susan, You might already k...  "
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "blog_df1.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "cA_IC99OAA1c"
   },
   "outputs": [],
   "source": [
    "import re"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "ATU_QhBd2JhX"
   },
   "outputs": [],
   "source": [
    "# function for text pre-processing\n",
    "def clean_text(blog_df1, punctuations=r'''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''):\n",
    "    \"\"\"\n",
    "    A method to clean text \n",
    "    \"\"\"\n",
    "    # Cleaning the urls\n",
    "    string = re.sub('https?://\\S+|www\\.\\S+', '', blog_df1)\n",
    "\n",
    "    # Cleaning the html elements\n",
    "    string = re.sub('<.*?>', '', blog_df1)\n",
    "\n",
    "    # Removing the punctuations using regular expression\n",
    "    # i.e remove anything which is not word or whitespace character\n",
    "    \n",
    "    string = re.sub('[^\\w\\s]', '', blog_df1)\n",
    "\n",
    "    return string\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "WTZr1vfw3Qlt",
    "outputId": "3b2b9c0d-dea2-4962-b706-ca13d81c10ee"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-47-1a0a69b21f07>:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  blog_df1['cleaned_text'] = blog_df1['cleaned_text'].apply(clean_text)\n"
     ]
    }
   ],
   "source": [
    "blog_df1['cleaned_text'] = blog_df1['cleaned_text'].apply(clean_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 991
    },
    "id": "1QuavkwQ4PQg",
    "outputId": "75e8b71d-2739-4dd5-b8b6-dfe90af001ac"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-11eff8a5-234e-4853-92f1-3bd0c439dd8d\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>topic</th>\n",
       "      <th>sign</th>\n",
       "      <th>date</th>\n",
       "      <th>text</th>\n",
       "      <th>cleaned_text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2059027</td>\n",
       "      <td>male</td>\n",
       "      <td>15</td>\n",
       "      <td>Student</td>\n",
       "      <td>Leo</td>\n",
       "      <td>14,May,2004</td>\n",
       "      <td>Info has been found (+/- 100 pages,...</td>\n",
       "      <td>Info has been found  100 pages and 45 MB of pd...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2059027</td>\n",
       "      <td>male</td>\n",
       "      <td>15</td>\n",
       "      <td>Student</td>\n",
       "      <td>Leo</td>\n",
       "      <td>13,May,2004</td>\n",
       "      <td>These are the team members:   Drewe...</td>\n",
       "      <td>These are the team members Drewes van der Laag...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2059027</td>\n",
       "      <td>male</td>\n",
       "      <td>15</td>\n",
       "      <td>Student</td>\n",
       "      <td>Leo</td>\n",
       "      <td>12,May,2004</td>\n",
       "      <td>In het kader van kernfusie op aarde...</td>\n",
       "      <td>In het kader van kernfusie op aarde MAAK JE EI...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2059027</td>\n",
       "      <td>male</td>\n",
       "      <td>15</td>\n",
       "      <td>Student</td>\n",
       "      <td>Leo</td>\n",
       "      <td>12,May,2004</td>\n",
       "      <td>testing!!!  testing!!!</td>\n",
       "      <td>testing testing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3581210</td>\n",
       "      <td>male</td>\n",
       "      <td>33</td>\n",
       "      <td>InvestmentBanking</td>\n",
       "      <td>Aquarius</td>\n",
       "      <td>11,June,2004</td>\n",
       "      <td>Thanks to Yahoo!'s Toolbar I can ...</td>\n",
       "      <td>Thanks to Yahoos Toolbar I can now capture the...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>676593</th>\n",
       "      <td>1713845</td>\n",
       "      <td>male</td>\n",
       "      <td>23</td>\n",
       "      <td>Student</td>\n",
       "      <td>Taurus</td>\n",
       "      <td>01,July,2004</td>\n",
       "      <td>Dear Susan,  I could write some really ...</td>\n",
       "      <td>Dear Susan I could write some really bitter di...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>676594</th>\n",
       "      <td>1713845</td>\n",
       "      <td>male</td>\n",
       "      <td>23</td>\n",
       "      <td>Student</td>\n",
       "      <td>Taurus</td>\n",
       "      <td>01,July,2004</td>\n",
       "      <td>Dear Susan,  'I have the second yeast i...</td>\n",
       "      <td>Dear Susan I have the second yeast infection i...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>676595</th>\n",
       "      <td>1713845</td>\n",
       "      <td>male</td>\n",
       "      <td>23</td>\n",
       "      <td>Student</td>\n",
       "      <td>Taurus</td>\n",
       "      <td>01,July,2004</td>\n",
       "      <td>Dear Susan,  Your 'boyfriend' is fuckin...</td>\n",
       "      <td>Dear Susan Your boyfriend is fucking BALD Good...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>676596</th>\n",
       "      <td>1713845</td>\n",
       "      <td>male</td>\n",
       "      <td>23</td>\n",
       "      <td>Student</td>\n",
       "      <td>Taurus</td>\n",
       "      <td>01,July,2004</td>\n",
       "      <td>Dear Susan:    Just to clarify, I am as...</td>\n",
       "      <td>Dear Susan Just to clarify I am asking you to ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>676597</th>\n",
       "      <td>1713845</td>\n",
       "      <td>male</td>\n",
       "      <td>23</td>\n",
       "      <td>Student</td>\n",
       "      <td>Taurus</td>\n",
       "      <td>01,July,2004</td>\n",
       "      <td>Hey everybody...and Susan,  You might a...</td>\n",
       "      <td>Hey everybodyand Susan You might already know ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>676598 rows × 8 columns</p>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-11eff8a5-234e-4853-92f1-3bd0c439dd8d')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-11eff8a5-234e-4853-92f1-3bd0c439dd8d button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-11eff8a5-234e-4853-92f1-3bd0c439dd8d');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "             id gender  age              topic      sign          date  \\\n",
       "0       2059027   male   15            Student       Leo   14,May,2004   \n",
       "1       2059027   male   15            Student       Leo   13,May,2004   \n",
       "2       2059027   male   15            Student       Leo   12,May,2004   \n",
       "3       2059027   male   15            Student       Leo   12,May,2004   \n",
       "4       3581210   male   33  InvestmentBanking  Aquarius  11,June,2004   \n",
       "...         ...    ...  ...                ...       ...           ...   \n",
       "676593  1713845   male   23            Student    Taurus  01,July,2004   \n",
       "676594  1713845   male   23            Student    Taurus  01,July,2004   \n",
       "676595  1713845   male   23            Student    Taurus  01,July,2004   \n",
       "676596  1713845   male   23            Student    Taurus  01,July,2004   \n",
       "676597  1713845   male   23            Student    Taurus  01,July,2004   \n",
       "\n",
       "                                                     text  \\\n",
       "0                  Info has been found (+/- 100 pages,...   \n",
       "1                  These are the team members:   Drewe...   \n",
       "2                  In het kader van kernfusie op aarde...   \n",
       "3                        testing!!!  testing!!!             \n",
       "4                    Thanks to Yahoo!'s Toolbar I can ...   \n",
       "...                                                   ...   \n",
       "676593         Dear Susan,  I could write some really ...   \n",
       "676594         Dear Susan,  'I have the second yeast i...   \n",
       "676595         Dear Susan,  Your 'boyfriend' is fuckin...   \n",
       "676596         Dear Susan:    Just to clarify, I am as...   \n",
       "676597         Hey everybody...and Susan,  You might a...   \n",
       "\n",
       "                                             cleaned_text  \n",
       "0       Info has been found  100 pages and 45 MB of pd...  \n",
       "1       These are the team members Drewes van der Laag...  \n",
       "2       In het kader van kernfusie op aarde MAAK JE EI...  \n",
       "3                                         testing testing  \n",
       "4       Thanks to Yahoos Toolbar I can now capture the...  \n",
       "...                                                   ...  \n",
       "676593  Dear Susan I could write some really bitter di...  \n",
       "676594  Dear Susan I have the second yeast infection i...  \n",
       "676595  Dear Susan Your boyfriend is fucking BALD Good...  \n",
       "676596  Dear Susan Just to clarify I am asking you to ...  \n",
       "676597  Hey everybodyand Susan You might already know ...  \n",
       "\n",
       "[676598 rows x 8 columns]"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "blog_df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 574
    },
    "id": "3uxeUe_DAxP9",
    "outputId": "18c97572-1303-4e79-aae3-6d48c0887324"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.google.colaboratory.intrinsic+json": {
       "type": "string"
      },
      "text/plain": [
       "\"       On Monday I started the possibility of the process of buying my own place.  I just met with a realtor, that's all, no paper-signing going on, no commitments, yet.  It's a scary thing this idea of home ownership, signing away your life for 30 years.  It's a good idea, financially, but mentally, is this good for me?    I have a few single girlfriends who have bought places.  Two friends in Richmond bought houses.  I think they have balls.  Not that home ownership is that big of a deal, but a house is a big deal.  I personally can't go that big.  The mowing, the pruning, roof replacement, window washing, it's too much.  I can barely handle keeping my 6-room apartment in orderly shape.  I can just imagine the letters from neighbors that I would get concerning the jungle that would certainly grow outside my home.  So a condo, a condo sounds good to me.  It's like an apartment, but I'd get to paint the walls and a tax deduction.    Condo searching is hard.  While I'm still in the beginning stages, I've already seen 3 in person and a bunch online.  Nothing has caught my eye.  I think I am waiting for the perfect one to just fall into my lap.  I'm picky, but open-minded.  I've told my realtor that I'm interested in city properties and no new construction.  I want an old, lived in, worn and wise place.  My very nice, my age, trying to sell me a place realtor took notes.  I checked for a ring. There was one.  What does it say about me when the men I am not attracted to are married?  Does that mean that somewhere out there there is someone who would love my winning personality and bright smile?  Oh, this is not blog about me wanting a relationship.  This is a blog about me wanting, something, a little more of myself, I guess.  There are friends who say, 'You will find him when you least expect it.'  A good friend who is getting married this summer tells every single girl who claims they are OK with being single that they should watch what they say because she felt the same way last year and poof she's getting married.  Well, with my relationship phobias, I haven't been expecting it for um, 27 years so, um where is the unexpected?  OK, I'm still not ready for all that commitment, so am I ready to commit to a condo?  We will surely see.           \""
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "blog_df1['text'][500]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 574
    },
    "id": "wME3rPU_A2Aa",
    "outputId": "5a25d884-ba09-41ac-d3bf-d98b72ecad72"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.google.colaboratory.intrinsic+json": {
       "type": "string"
      },
      "text/plain": [
       "'On Monday I started the possibility of the process of buying my own place I just met with a realtor that is all no papersigning going on no commitments yet It is a scary thing this idea of home ownership signing away your life for 30 years It is a good idea financially but mentally is this good for me I have a few single girlfriends who have bought places Two friends in Richmond bought houses I think they have balls Not that home ownership is that big of a deal but a house is a big deal I personally cannot go that big The mowing the pruning roof replacement window washing it is too much I can barely handle keeping my 6room apartment in orderly shape I can just imagine the letters from neighbors that I would get concerning the jungle that would certainly grow outside my home So a condo a condo sounds good to me It is like an apartment but I would get to paint the walls and a tax deduction Condo searching is hard While I am still in the beginning stages I have already seen 3 in person and a bunch online Nothing has caught my eye I think I am waiting for the perfect one to just fall into my lap I am picky but openminded I have told my realtor that I am interested in city properties and no new construction I want an old lived in worn and wise place My very nice my age trying to sell me a place realtor took notes I checked for a ring There was one What does it say about me when the men I am not attracted to are married Does that mean that somewhere out there there is someone who would love my winning personality and bright smile Oh this is not blog about me wanting a relationship This is a blog about me wanting something a little more of myself I guess There are friends who say You will find him when you least expect it A good friend who is getting married this summer tells every single girl who claims they are OK with being single that they should watch what they say because she felt the same way last year and poof she is getting married Well with my relationship phobias I have not been expecting it for um 27 years so um where is the unexpected OK I am still not ready for all that commitment so am I ready to commit to a condo We will surely see'"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "blog_df1['cleaned_text'][500]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "5zHz6QJIBqbW",
    "outputId": "81698780-0ba0-4b68-dbde-562a767b4fc1"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "0it [00:00, ?it/s]\n"
     ]
    }
   ],
   "source": [
    "null_index = blog_df1.loc[blog_df1['cleaned_text'] =='nan'].index\n",
    "for i in tqdm(null_index):\n",
    "  blog_df1.drop(i,axis=0,inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "BMEzrbKu9v_n"
   },
   "outputs": [],
   "source": [
    "blog_df1.reset_index(drop=True,inplace = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "VX9jyFHSkzXM"
   },
   "source": [
    "#### ii) Eliminate Non-English textual data.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "---\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "2vqffk1jqZIz",
    "outputId": "c4a3b416-01eb-4282-efca-08925709e491"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
      "Collecting langdetect\n",
      "  Downloading langdetect-1.0.9.tar.gz (981 kB)\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m981.5/981.5 kB\u001b[0m \u001b[31m16.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
      "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from langdetect) (1.16.0)\n",
      "Building wheels for collected packages: langdetect\n",
      "  Building wheel for langdetect (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
      "  Created wheel for langdetect: filename=langdetect-1.0.9-py3-none-any.whl size=993224 sha256=1a61bd3c2ad41dc099eb8b99e83617b3dc3a3c79321799cfef7f5943ecfc0b48\n",
      "  Stored in directory: /root/.cache/pip/wheels/95/03/7d/59ea870c70ce4e5a370638b5462a7711ab78fba2f655d05106\n",
      "Successfully built langdetect\n",
      "Installing collected packages: langdetect\n",
      "Successfully installed langdetect-1.0.9\n"
     ]
    }
   ],
   "source": [
    "!pip install langdetect"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "NWu_FstGhyio"
   },
   "source": [
    "-  I am dividing the age of people by 10's,20's,30's\n",
    "\n",
    "---\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "fqYCCvkjhae8",
    "outputId": "56d4c76d-3064-4cd3-d77d-cff1edc6799a"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-54-9cf4bea31938>:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  blog_df1.replace(np.arange(13,18),'10s',inplace = True)\n",
      "<ipython-input-54-9cf4bea31938>:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  blog_df1.replace(np.arange(23,28),'20s',inplace = True)\n",
      "<ipython-input-54-9cf4bea31938>:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  blog_df1.replace(np.arange(33,49),'30s',inplace = True)\n"
     ]
    }
   ],
   "source": [
    "blog_df1.replace(np.arange(13,18),'10s',inplace = True)\n",
    "blog_df1.replace(np.arange(23,28),'20s',inplace = True)\n",
    "blog_df1.replace(np.arange(33,49),'30s',inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "rBzoNI_lnsaN"
   },
   "outputs": [],
   "source": [
    "df1 = blog_df1.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "lt1SY-bXZGFU",
    "outputId": "1357a362-bb12-4bb6-d004-8d9c786f3a2f"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "676598"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "T66FpF_lvi38"
   },
   "outputs": [],
   "source": [
    "from langdetect import detect"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "hJzSsDrmveFC",
    "outputId": "df87e9e2-0637-44df-b9e0-393f9fa8ff04"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 676598/676598 [1:21:24<00:00, 138.52it/s]\n"
     ]
    }
   ],
   "source": [
    "indexes = []\n",
    "non_eng = []\n",
    "error_index = []\n",
    "for i in tqdm(df1['cleaned_text'].index):\n",
    "  try:\n",
    "    if detect(df1['cleaned_text'][i]) == 'en':\n",
    "      m = detect(i)\n",
    "    else:\n",
    "      n = detect(df1['cleaned_text'][i])\n",
    "      non_eng.append(n)\n",
    "      indexes.append(i)\n",
    "  except Exception as e:\n",
    "    error_index.append(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "AcOYKy-oWj7s",
    "outputId": "daa57dda-c789-4098-ffdd-c8075d8c6a34"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0         Info has been found  100 pages and 45 MB of pd...\n",
       "1         These are the team members Drewes van der Laag...\n",
       "2         In het kader van kernfusie op aarde MAAK JE EI...\n",
       "3                                           testing testing\n",
       "4         Thanks to Yahoos Toolbar I can now capture the...\n",
       "                                ...                        \n",
       "676593    Dear Susan I could write some really bitter di...\n",
       "676594    Dear Susan I have the second yeast infection i...\n",
       "676595    Dear Susan Your boyfriend is fucking BALD Good...\n",
       "676596    Dear Susan Just to clarify I am asking you to ...\n",
       "676597    Hey everybodyand Susan You might already know ...\n",
       "Name: cleaned_text, Length: 676598, dtype: object"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1['cleaned_text']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "MYR6P6Tw7uxS"
   },
   "outputs": [],
   "source": [
    "# these indexes more important once it was lost i need to run entire lang detect approximately 2 hours\n",
    "import pickle\n",
    "pickle.dump(indexes,open('indexes.pkl','wb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "1dphyugPKmeJ",
    "outputId": "10866f45-204c-44c0-dd3b-d81afed3f452"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the index number [1, 150, 237, 318, 325, 437, 751, 753, 754, 755, 756, 757, 759, 760, 761, 762, 764, 766, 782, 786, 787, 788, 800, 802, 804, 805, 806, 1163, 1164, 1248, 1258, 1259, 1260, 1262, 1264, 1267, 1268, 1272, 1273, 1274, 1279, 1283, 1287, 1304, 1349, 1351, 1352, 1391, 1421, 1441, 1508, 1538, 1543, 1547, 1548, 1570, 1595, 1619, 1621, 1624, 1628, 1645, 1665, 1668, 1677, 1680, 1682, 1695, 1698, 1711, 1719, 1737, 1740, 1760, 1785, 1793, 1833, 1872, 1873, 1887, 1893, 1918, 1935, 1978, 1995, 2010, 2025, 2030, 2037, 2062, 2076, 2079, 2086, 2105, 2117, 2119, 2142, 2145, 2151, 2160, 2162, 2172, 2176, 2184, 2208, 2224, 2226, 2230, 2237, 2249, 2270, 2293, 2332, 2339, 2346, 2377, 2380, 2392, 2409, 2425, 2438, 2462, 2481, 2499, 2502, 2512, 2526, 2527, 2543, 2554, 2555, 2556, 2565, 2575, 2577, 2584, 2588, 2590, 2602, 2640, 2679, 2680, 2684, 2686, 2700, 2718, 2733, 2743, 2748, 2749, 2750, 2752, 2765, 2776, 2781, 2790, 2793, 2804, 2830, 2850, 2856, 2886, 2891, 2902, 2906, 2908, 2916, 2922, 2931, 2937, 2951, 2952, 2966, 2979, 3015, 3023, 3046, 3049, 3050, 3054, 3078, 3088, 3091, 3092, 3095, 3104, 3115, 3120, 3178, 3185, 3192, 3217, 3235, 3239, 3255, 3257, 3259, 3274, 3292, 3312, 3319, 3334, 3373, 3381, 3402, 3405, 3427, 3429, 3432, 3439, 3446, 3480, 3533, 3539, 3540, 3545, 3549, 3563, 3581, 3586, 3592, 3601, 3616, 3643, 3654, 3670, 3761, 3762, 3768, 3770, 3799, 3818, 3819, 3912, 4045, 4147, 4154, 4354, 4435, 4437, 4438, 4440, 4441, 4469, 4800, 4826, 4827, 4828, 4831, 4915, 4927, 4949, 4987, 5039, 5040, 5182, 5196, 5224, 5243, 5245, 5253, 5272, 5277, 5299, 5316, 5329, 5361, 5363, 5393, 5400, 5408, 5413, 5445, 5505, 5517, 5524, 5556, 5558, 5569, 5608, 5615, 5624, 5644, 5653, 5656, 5673, 5710, 5726, 5749, 5787, 5796, 5817, 5832, 6014, 6025, 6034, 6075, 6234, 6243, 6310, 6433, 6441, 6511, 6514, 6524, 6534, 6535, 6539, 6610, 6684, 6742, 6744, 6762, 6767, 6769, 6772, 6774, 6776, 6777, 6806, 6826, 6832, 6847, 6852, 6861, 6887, 6933, 7057, 7072, 7076, 7095, 7146, 7183, 7349, 7375, 7422, 7529, 7592, 7634, 7974, 8011, 8036, 8160, 8163, 8164, 8165, 8166, 8167, 8168, 8170, 8204, 8226, 8232, 8235, 8239, 8327, 8392, 8400, 8527, 8532, 8535, 8538, 8552, 8584, 8591, 8592, 8593, 8594, 8595, 8802, 8834, 8922, 8946, 9148, 9160, 9173, 9180, 9191, 9194, 9199, 9221, 9222, 9318, 9358, 9506, 9691, 9692, 9693, 9694, 9696, 9697, 9698, 9699, 9700, 9701, 9702, 9703, 9704, 9754, 9769, 9797, 9822, 9886, 10025, 10078, 10260, 10363, 10367, 10374, 10375, 10377, 10389, 10402, 10419, 10421, 10486, 10490, 10496, 10648, 10658, 10700, 10756, 10768, 10893, 10962, 10969, 10988, 11031, 11069, 11070, 11078, 11079, 11082, 11088, 11089, 11158, 11171, 11173, 11192, 11223, 11224, 11225, 11226, 11227, 11228, 11229, 11230, 11231, 11232, 11233, 11234, 11292, 11296, 11339, 11368, 11369, 11500, 11508, 11541, 11552, 11553, 11554, 11709, 11710, 11738, 12268, 12270, 12271, 12273, 12287, 12324, 12362, 12396, 12397, 12398, 12399, 12402, 12406, 12408, 12419, 12420, 12430, 12432, 12449, 12450, 12451, 12579, 12612, 12637, 12777, 12893, 13096, 13210, 13289, 13291, 13337, 13492, 13531, 13679, 13701, 13718, 13719, 13723, 13751, 13757, 13765, 13766, 13767, 13770, 13783, 13793, 13794, 13849, 13859, 13860, 13882, 13910, 13972, 14022, 14030, 14097, 14099, 14100, 14213, 14220, 14221, 14222, 14223, 14226, 14239, 14240, 14241, 14242, 14243, 14246, 14254, 14255, 14256, 14407, 14462, 14487, 14515, 14537, 14538, 14540, 14547, 14550, 14552, 14554, 14564, 14565, 14566, 14572, 14584, 14591, 14592, 14594, 14605, 14606, 14609, 14615, 14620, 14621, 14652, 14657, 14658, 14663, 14668, 14669, 14675, 14682, 14684, 14686, 14689, 14697, 14702, 14709, 14725, 14735, 14741, 14744, 14745, 14755, 14763, 14768, 14784, 14796, 14801, 14806, 14810, 14811, 14817, 14845, 14851, 14860, 14875, 14878, 14888, 14903, 14910, 14911, 14922, 14927, 14929, 14933, 14989, 14992, 15000, 15043, 15054, 15055, 15056, 15058, 15061, 15166, 15169, 15170, 15171, 15172, 15174, 15184, 15200, 15201, 15360, 15454, 15551, 15573, 15752, 15753, 15760, 15761, 15763, 15764, 15765, 15767, 15770, 15771, 15776, 15780, 15920, 15923, 15933, 15939, 15941, 15965, 15981, 16041, 16159, 16207, 16428, 16490, 16494, 16521, 16522, 16523, 16536, 16666, 16667, 16804, 16855, 16857, 17018, 17019, 17102, 17288, 17315, 17357, 17359, 17363, 17376, 17423, 17426, 17428, 17444, 17542, 17557, 17563, 17568, 17589, 17590, 17593, 17594, 17595, 17610, 17665, 17666, 17678, 17679, 17721, 17737, 17743, 17745, 17841, 17862, 17926, 17964, 17968, 18004, 18035, 18131, 18149, 18150, 18153, 18154, 18156, 18160, 18165, 18176, 18179, 18180, 18182, 18310, 18318, 18325, 18331, 18451, 18452, 18453, 18455, 18466, 18507, 18513, 18515, 18547, 18619, 18631, 18633, 18638, 18647, 18670, 18679, 18685, 18762, 18764, 18768, 18775, 18782, 18876, 18918, 18925, 19024, 19048, 19049, 19052, 19057, 19058, 19059, 19060, 19065, 19069, 19076, 19077, 19079, 19080, 19083, 19085, 19088, 19089, 19090, 19091, 19093, 19095, 19098, 19099, 19101, 19102, 19105, 19106, 19108, 19109, 19110, 19111, 19114, 19116, 19119, 19120, 19124, 19125, 19126, 19127, 19128, 19129, 19132, 19133, 19134, 19135, 19136, 19137, 19138, 19140, 19141, 19142, 19143, 19144, 19145, 19146, 19147, 19148, 19151, 19152, 19155, 19156, 19157, 19158, 19159, 19160, 19163, 19165, 19166, 19167, 19170, 19171, 19173, 19175, 19177, 19181, 19182, 19183, 19184, 19185, 19188, 19189, 19190, 19192, 19193, 19194, 19195, 19198, 19200, 19201, 19202, 19205, 19206, 19209, 19211, 19213, 19214, 19215, 19216, 19224, 19225, 19228, 19232, 19236, 19238, 19239, 19241, 19242, 19244, 19245, 19247, 19248, 19250, 19256, 19257, 19259, 19260, 19264, 19345, 19353, 19378, 19401, 19526, 19600, 19608, 19622, 19642, 19711, 19753, 19755, 19756, 19757, 19762, 19766, 19768, 19769, 19770, 19771, 19774, 19775, 19776, 19777, 19778, 19779, 19780, 19785, 19787, 19788, 19790, 19792, 19793, 19796, 19798, 19799, 19880, 19944, 19969, 20076, 20107, 20129, 20178, 20188, 20266, 20537, 20581, 20582, 20599, 20601, 20606, 20617, 20618, 20690, 20696, 21193, 21291, 21312, 21381, 21389, 21393, 21428, 21456, 21476, 21483, 21489, 21541, 21589, 21601, 21644, 21648, 21649, 21650, 21651, 21652, 21653, 21654, 21655, 21656, 21657, 21658, 21659, 21660, 21674, 21679, 21696, 21698, 21699, 21700, 21701, 21756, 21758, 21759, 21760, 21826, 21837, 21870, 21881, 22071, 22276, 22282, 22283, 22284, 22285, 22286, 22288, 22289, 22290, 22299, 22312, 22313, 22314, 22316, 22321, 22334, 22365, 22374, 22561, 22787, 22794, 22871, 22872, 22884, 22905, 23029, 23040, 23172, 23173, 23174, 23175, 23176, 23177, 23178, 23181, 23184, 23192, 23194, 23195, 23196, 23197, 23198, 23199, 23200, 23201, 23202, 23203, 23204, 23205, 23206, 23207, 23208, 23209, 23210, 23211, 23212, 23213, 23214, 23215, 23216, 23217, 23218, 23220, 23221, 23224, 23225, 23226, 23228, 23229, 23230, 23231, 23232, 23233, 23234, 23235, 23236, 23237, 23238, 23239, 23241, 23242, 23243, 23244, 23245, 23247, 23248, 23249, 23250, 23251, 23252, 23253, 23254, 23255, 23257, 23258, 23259, 23260, 23263, 23266, 23267, 23269, 23270, 23271, 23272, 23274, 23275, 23276, 23277, 23278, 23280, 23283, 23286, 23287, 23288, 23328, 23329, 23331, 23346, 23348, 23608, 23610, 23616, 23647, 23648, 23657, 23670, 23671, 23672, 23674, 23675, 23947, 23954, 23982, 24135, 24138, 24266, 24487, 25104, 25140, 25314, 25322, 25332, 25340, 25341, 25348, 25349, 25691, 25781, 25902, 25973, 26132, 26162, 26163, 26242, 26244, 26248, 26337, 26371, 26377, 26394, 26401, 26699, 26943, 26951, 26957, 26972, 26987, 27010, 27203, 27286, 27326, 27331, 27357, 27358, 27359, 27457, 27462, 27463, 27514, 27567, 27568, 27587, 27707, 27708, 27711, 28209, 28292, 28316, 28335, 28376, 28382, 28397, 28399, 28401, 28404, 28405, 28407, 28408, 28411, 28415, 28419, 28422, 28435, 28438, 28441, 28446, 28447, 28450, 28451, 28452, 28454, 28458, 28459, 28461, 28463, 28466, 28468, 28475, 28479, 28482, 28487, 28490, 28492, 28493, 28495, 28496, 28498, 28521, 28528, 28533, 28534, 28535, 28538, 28543, 28547, 28553, 28577, 28603, 28607, 28611, 28632, 28633, 28635, 28640, 28642, 28679, 28680, 28685, 28690, 28691, 28694, 28695, 28697, 28700, 28701, 28800, 29087, 29096, 29111, 29114, 29245, 29268, 29269, 29270, 29271, 29272, 29273, 29274, 29275, 29276, 29280, 29282, 29283, 29286, 29288, 29311, 29336, 29460, 29509, 29522, 29559, 29625, 29718, 29850, 29996, 30295, 30390, 30391, 30392, 30393, 30394, 30395, 30407, 30408, 30409, 30410, 30411, 30413, 30415, 30416, 30417, 30418, 30419, 30420, 30421, 30422, 30423, 30424, 30425, 30426, 30429, 30430, 30431, 30432, 30433, 30434, 30435, 30436, 30437, 30438, 30439, 30440, 30442, 30462, 30584, 30609, 30682, 30697, 30710, 30731, 30756, 30757, 30772, 30799, 30968, 30985, 30986, 30990, 30993, 31009, 31030, 31031, 31041, 31106, 31112, 31131, 31137, 31149, 31150, 31169, 31174, 31181, 31212, 31223, 31224, 31277, 31279, 31284, 31286, 31291, 31307, 31319, 31381, 31454, 31477, 31491, 31495, 31496, 31498, 31516, 31519, 31526, 31530, 31618, 31646, 31969, 31971, 31984, 32045, 32061, 32063, 32068, 32078, 32101, 32102, 32124, 32333, 32334, 32335, 32336, 32337, 32418, 32420, 32421, 32423, 32425, 32427, 32428, 32430, 32433, 32467, 32476, 32485, 32489, 32498, 32501, 32502, 32509, 32510, 32511, 32514, 32515, 32516, 32527, 32531, 32535, 32554, 32565, 32586, 32587, 32588, 32589, 32590, 32593, 32599, 32652, 32656, 32694, 32741, 32844, 32845, 32846, 32858, 32909, 33003, 33061, 33079, 33088, 33409, 33410, 33454, 33459, 33462, 33493, 33498, 33652, 33668, 33920, 33997, 34028, 34066, 34089, 34090, 34379, 34381, 34459, 34467, 34609, 35063, 35167, 35185, 35196, 35209, 35210, 35213, 35219, 35222, 35224, 35228, 35246, 35337, 35396, 35420, 35449, 35587, 35589, 35719, 35720, 35722, 35731, 35735, 35736, 35737, 35738, 35739, 35740, 35741, 35742, 35743, 35744, 35745, 35746, 35748, 35749, 35750, 35751, 35752, 35753, 35754, 35755, 35756, 35765, 35766, 35816, 35912, 35984, 35996, 36007, 36016, 36028, 36106, 36136, 36204, 36210, 36218, 36243, 36246, 36254, 36344, 36345, 36346, 36417, 36436, 36552, 36867, 36925, 36926, 36961, 37094, 37097, 37233, 37284, 37333, 37334, 37335, 37340, 37341, 37350, 37352, 37354, 37355, 37357, 37358, 37363, 37364, 37366, 37367, 37376, 37388, 37389, 37390, 37391, 37394, 37405, 37408, 37411, 37444, 37589, 37613, 37616, 37821, 37825, 37827, 37830, 37831, 37834, 37838, 37839, 37842, 37845, 37848, 37851, 37860, 37862, 37870, 37894, 37971, 37974, 37979, 37984, 37999, 38055, 38082, 38094, 38095, 38121, 38129, 38131, 38141, 38142, 38161, 38172, 38190, 38196, 38267, 38278, 38340, 38341, 38342, 38348, 38349, 38350, 38353, 38354, 38702, 38775, 38776, 38786, 38868, 39006, 39020, 39047, 39048, 39073, 39078, 39087, 39108, 39110, 39114, 39115, 39280, 39367, 39519, 39521, 39535, 39543, 39629, 39633, 39640, 39657, 39659, 39660, 39661, 39662, 39663, 39664, 39665, 39668, 39671, 39672, 39675, 39676, 39679, 39680, 39683, 39685, 39686, 39687, 39688, 39689, 39696, 39699, 39700, 39702, 39704, 39781, 39800, 39835, 39836, 39843, 39846, 39848, 39850, 39852, 39854, 39855, 39873, 39918, 39919, 39998, 40005, 40058, 40078, 40136, 40137, 40139, 40140, 40141, 40142, 40143, 40144, 40147, 40148, 40149, 40150, 40151, 40152, 40155, 40157, 40158, 40159, 40162, 40163, 40166, 40168, 40172, 40178, 40181, 40183, 40185, 40186, 40187, 40189, 40191, 40197, 40198, 40199, 40201, 40207, 40212, 40214, 40215, 40216, 40217, 40218, 40220, 40221, 40222, 40223, 40226, 40227, 40233, 40252, 40256, 40477, 40548, 40553, 40580, 40637, 40651, 40681, 40739, 40808, 40949, 40961, 41071, 41076, 41077, 41078, 41119, 41120, 41121, 41156, 41241, 41282, 41286, 41295, 41311, 41325, 41334, 41340, 41385, 41386, 41389, 41391, 41397, 41408, 41411, 41438, 41734, 41743, 41745, 41750, 41765, 41785, 41916, 41918, 42126, 42201, 42224, 42253, 42255, 42262, 42265, 42272, 42274, 42308, 42331, 42354, 42355, 42361, 42387, 42415, 42423, 42435, 42452, 42470, 42533, 42789, 42947, 43035, 43073, 43218, 43264, 43302, 43309, 43500, 43667, 43668, 43669, 43677, 43690, 43691, 43692, 43693, 43694, 43695, 43696, 43699, 43700, 43701, 43702, 43703, 43704, 43705, 43706, 43707, 43709, 43710, 43711, 43712, 43719, 43767, 43768, 43773, 43785, 43788, 43789, 43791, 43793, 43817, 43818, 43821, 43822, 43823, 43824, 43825, 43826, 43827, 43828, 43829, 43830, 43835, 43838, 43839, 43840, 43841, 43866, 43867, 43868, 43878, 44207, 44208, 44228, 44230, 44287, 44306, 44336, 44432, 44465, 44527, 44588, 45028, 45029, 45032, 45042, 45043, 45047, 45054, 45070, 45071, 45098, 45104, 45139, 45142, 45248, 45324, 45381, 45631, 45641, 45726, 45781, 45795, 45832, 45834, 45882, 45884, 45885, 45914, 45921, 46014, 46048, 46049, 46109, 46117, 46123, 46134, 46135, 46156, 46157, 46158, 46189, 46205, 46317, 46389, 46390, 46408, 46549, 46550, 46575, 46584, 46678, 46702, 46733, 46736, 46738, 46762, 46790, 46798, 46799, 46802, 46803, 46810, 46828, 46842, 46854, 46861, 46865, 46902, 46914, 46921, 46939, 46942, 46954, 46986, 47005, 47021, 47022, 47037, 47039, 47041, 47057, 47070, 47073, 47075, 47076, 47102, 47116, 47124, 47133, 47150, 47156, 47157, 47186, 47199, 47210, 47215, 47217, 47218, 47232, 47242, 47260, 47262, 47268, 47273, 47293, 47303, 47320, 47325, 47342, 47344, 47376, 47381, 47384, 47399, 47417, 47425, 47475, 47484, 47485, 47490, 47491, 47511, 47520, 47524, 47533, 47535, 47559, 47560, 47565, 47566, 47575, 47632, 47656, 47657, 47668, 47683, 47756, 47763, 47782, 47832, 47924, 47925, 47943, 47971, 48004, 48033, 48076, 48081, 48082, 48083, 48087, 48097, 48105, 48108, 48151, 48152, 48563, 48628, 48685, 48688, 48741, 48824, 48833, 48862, 49114, 49210, 49328, 49448, 49461, 49543, 49708, 49735, 49744, 49757, 49847, 49871, 49874, 49885, 49888, 49957, 49981, 50010, 50147, 50190, 50191, 50219, 50225, 50299, 50302, 50346, 50540, 50589, 50667, 50715, 50751, 50865, 50870, 50873, 50874, 50878, 50989, 50990, 51012, 51226, 51232, 51240, 51241, 51455, 51462, 51510, 51534, 51542, 51544, 51547, 51548, 51549, 51550, 51551, 51552, 51553, 51554, 51556, 51563, 51569, 51574, 51726, 51727, 51729, 51774, 51869, 52046, 52047, 52066, 52318, 52378, 52463, 52517, 52547, 52607, 52679, 52681, 52683, 52840, 52874, 52949, 52979, 52987, 53100, 53255, 53258, 53272, 53438, 53457, 53509, 53566, 53569, 53577, 53582, 53620, 53634, 53655, 53965, 53971, 53972, 54019, 54038, 54190, 54202, 54213, 54217, 54222, 54383, 54589, 54640, 54663, 54665, 54668, 54683, 54750, 54815, 54829, 54845, 54945, 54946, 54947, 54948, 54950, 54951, 54982, 54986, 54987, 54998, 54999, 55009, 55069, 55070, 55071, 55072, 55073, 55074, 55075, 55125, 55176, 55198, 55334, 55365, 55584, 55587, 55727, 55737, 55747, 55756, 55757, 55758, 55765, 55786, 55806, 55823, 55825, 55830, 55850, 55852, 55855, 55858, 55862, 55878, 56114, 56125, 56137, 56139, 56142, 56148, 56150, 56166, 56168, 56171, 56188, 56189, 56190, 56200, 56202, 56204, 56206, 56207, 56209, 56211, 56213, 56221, 56222, 56223, 56228, 56230, 56231, 56237, 56239, 56241, 56242, 56243, 56244, 56245, 56256, 56257, 56280, 56407, 56428, 56458, 56495, 56769, 56770, 56779, 56783, 56786, 56857, 56929, 56982, 56983, 57170, 57462, 57728, 57767, 57934, 58123, 58124, 58232, 58260, 58291, 58396, 58421, 58550, 58571, 58579, 58614, 58716, 58719, 58787, 58832, 58861, 59010, 59017, 59023, 59037, 59050, 59102, 59211, 59298, 59304, 59305, 59323, 59325, 59396, 59401, 59468, 59509, 59521, 59529, 59633, 59652, 59663, 59667, 59673, 59675, 59676, 59677, 59681, 59692, 59702, 59703, 59712, 59713, 59714, 59715, 59718, 59719, 59720, 59721, 59722, 59723, 59725, 59727, 59731, 59732, 59734, 59737, 59740, 59741, 59743, 59763, 59769, 59770, 59771, 59772, 59773, 59775, 59777, 59778, 59779, 59784, 59786, 59789, 59790, 59794, 59796, 59797, 59805, 59806, 59807, 59808, 59812, 59813, 59814, 59821, 59826, 59827, 59828, 59830, 59831, 59832, 59833, 59842, 59846, 59847, 59856, 59860, 59864, 59867, 59868, 59869, 59870, 59872, 59874, 59875, 59876, 59879, 59880, 59881, 59882, 59883, 59884, 59885, 59886, 59887, 59888, 59893, 59895, 59901, 59908, 59916, 59922, 59931, 59932, 59933, 59936, 59949, 59950, 59958, 59966, 59976, 59985, 59986, 59988, 59989, 60004, 60005, 60015, 60019, 60020, 60021, 60022, 60026, 60027, 60034, 60057, 60075, 60099, 60102, 60127, 60128, 60129, 60148, 60149, 60154, 60161, 60183, 60184, 60187, 60190, 60193, 60204, 60226, 60228, 60293, 60323, 60356, 60359, 60377, 60378, 60402, 60405, 60441, 60442, 60443, 60444, 60452, 60501, 60502, 60807, 60808, 60818, 60871, 60872, 60881, 61088, 61089, 61117, 61362, 61374, 61378, 61379, 61380, 61403, 61404, 61406, 61417, 61423, 61425, 61434, 61455, 61521, 61545, 61547, 61572, 61581, 61612, 61635, 61802, 62092, 62219, 62263, 62266, 62271, 62288, 62291, 62315, 62352, 62368, 62407, 62408, 62428, 62456, 62473, 62480, 62490, 62536, 62552, 62559, 62587, 62591, 62598, 62601, 62626, 62631, 62639, 62657, 62669, 62687, 62695, 62696, 62707, 62711, 62743, 62776, 62797, 62802, 62809, 62817, 62840, 62850, 62880, 62882, 63037, 63092, 63093, 63094, 63095, 63096, 63097, 63098, 63099, 63100, 63101, 63102, 63103, 63104, 63105, 63106, 63107, 63110, 63114, 63212, 63237, 63350, 63351, 63393, 63430, 63438, 63470, 63487, 63527, 63539, 63541, 63643, 63649, 63650, 63651, 63653, 63656, 63657, 63658, 63659, 63663, 63664, 63665, 63666, 63671, 63672, 63674, 63678, 63681, 63682, 63689, 63694, 63696, 63718, 63721, 63722, 63725, 63726, 63729, 63730, 63732, 63738, 63739, 63740, 63753, 63756, 63766, 63770, 63772, 63784, 63788, 63789, 63806, 63812, 63815, 63816, 63959, 64003, 64020, 64041, 64046, 64050, 64055, 64081, 64084, 64085, 64109, 64111, 64131, 64160, 64167, 64209, 64252, 64256, 64308, 64321, 64336, 64345, 64413, 64414, 64415, 64416, 64417, 64418, 64424, 64425, 64426, 64427, 64428, 64429, 64431, 64432, 64433, 64467, 64670, 64702, 64748, 64767, 64788, 64808, 64858, 64876, 64877, 65154, 65158, 65172, 65174, 65176, 65178, 65183, 65185, 65187, 65188, 65190, 65321, 65373, 65460, 65494, 65503, 65530, 65558, 65560, 65561, 65562, 65589, 65597, 65667, 65691, 66054, 66134, 66281, 66282, 66283, 66284, 66285, 66310, 66316, 66329, 66331, 66332, 66333, 66335, 66336, 66338, 66348, 66466, 66468, 66469, 66472, 67048, 67049, 67054, 67083, 67191, 67225, 67227, 67303, 67319, 67344, 67360, 67362, 67363, 67371, 67399, 67438, 67440, 67462, 67586, 67684, 67786, 67795, 67860, 67880, 67907, 67955, 68083, 68091, 68104, 68213, 68321, 68412, 68422, 68599, 68624, 68642, 68644, 68647, 68783, 68837, 68849, 68850, 68855, 68871, 68885, 68886, 68897, 68898, 68910, 69042, 69044, 69045, 69047, 69048, 69049, 69055, 69056, 69059, 69060, 69063, 69089, 69147, 69155, 69176, 69190, 69212, 69241, 69264, 69280, 69287, 69357, 69390, 69398, 69414, 69444, 69445, 69459, 69526, 69544, 69549, 69552, 69553, 69556, 69558, 69562, 69566, 69568, 69569, 69571, 69687, 69728, 69748, 69768, 69991, 70021, 70022, 70023, 70112, 70169, 70424, 70425, 70427, 70442, 70459, 70475, 70581, 70994, 71001, 71144, 71156, 71317, 71352, 71419, 71888, 71913, 71919, 71920, 71921, 71925, 71930, 71931, 71936, 71987, 72081, 72083, 72084, 72085, 72145, 72203, 72205, 72219, 72230, 72238, 72270, 72314, 72365, 72375, 72381, 72438, 72483, 72485, 72670, 72705, 72797, 72942, 73003, 73008, 73055, 73065, 73099, 73139, 73219, 73220, 73232, 73234, 73505, 73776, 73882, 73972, 73975, 73978, 73984, 73998, 74004, 74005, 74006, 74007, 74012, 74019, 74020, 74021, 74026, 74029, 74030, 74044, 74046, 74050, 74063, 74064, 74089, 74090, 74091, 74092, 74099, 74106, 74120, 74121, 74122, 74124, 74125, 74128, 74129, 74130, 74136, 74138, 74159, 74167, 74168, 74170, 74173, 74174, 74177, 74178, 74186, 74189, 74191, 74192, 74194, 74195, 74201, 74202, 74203, 74205, 74206, 74207, 74209, 74210, 74211, 74212, 74213, 74230, 74231, 74391, 74427, 74430, 74434, 74452, 74480, 74501, 74511, 74571, 74655, 74668, 74682, 74728, 74761, 74777, 74804, 74815, 74833, 74948, 74949, 74950, 74955, 74957, 74979, 74997, 75000, 75001, 75011, 75014, 75029, 75081, 75086, 75088, 75094, 75096, 75097, 75098, 75116, 75119, 75123, 75125, 75127, 75134, 75138, 75152, 75163, 75342, 75364, 75374, 75388, 75390, 75395, 75403, 75412, 75414, 75416, 75420, 75423, 75425, 75432, 75435, 75437, 75439, 75442, 75443, 75445, 75453, 75465, 75469, 75474, 75475, 75476, 75480, 75484, 75486, 75499, 75507, 75509, 75513, 75517, 75519, 75524, 75536, 75538, 75541, 75553, 75555, 75564, 75577, 75750, 75923, 76026, 76027, 76036, 76098, 76104, 76105, 76108, 76123, 76130, 76134, 76135, 76148, 76155, 76157, 76160, 76301, 76378, 76413, 76416, 76417, 76423, 76428, 76449, 76471, 76476, 76481, 76490, 76587, 76704, 76712, 76882, 76958, 77011, 77013, 77024, 77070, 77094, 77099, 77100, 77105, 77106, 77107, 77109, 77111, 77113, 77115, 77116, 77117, 77118, 77119, 77120, 77121, 77123, 77124, 77125, 77126, 77127, 77128, 77129, 77130, 77131, 77133, 77134, 77135, 77136, 77137, 77138, 77139, 77140, 77142, 77143, 77144, 77145, 77146, 77147, 77148, 77149, 77150, 77151, 77153, 77154, 77156, 77157, 77159, 77160, 77163, 77164, 77165, 77166, 77169, 77173, 77183, 77184, 77188, 77224, 77307, 77308, 77310, 77336, 77371, 77535, 77537, 77539, 77572, 77577, 77712, 77713, 77726, 77727, 77730, 77739, 77740, 77741, 77745, 77748, 77765, 77772, 77773, 77777, 77778, 77796, 77798, 78171, 78385, 78402, 78419, 78526, 78576, 78581, 78588, 78591, 78599, 78604, 78608, 78611, 78613, 78645, 78685, 78882, 78897, 78960, 78963, 78964, 78965, 78968, 78978, 78979, 78982, 78988, 79004, 79010, 79012, 79013, 79283, 79311, 79695, 79742, 79763, 79764, 79772, 79902, 79903, 79910, 79916, 79930, 79990, 79995, 80036, 80040, 80056, 80075, 80076, 80077, 80078, 80079, 80080, 80081, 80082, 80083, 80084, 80085, 80086, 80087, 80102, 80103, 80172, 80226, 80253, 80269, 80288, 80808, 80833, 80864, 80910, 80935, 80971, 81033, 81053, 81071, 81083, 81144, 81166, 81279, 81585, 81653, 81696, 81738, 81931, 81938, 81972, 82002, 82066, 82182, 82189, 82193, 82381, 82437, 82480, 82481, 82482, 82483, 82485, 82489, 82492, 82493, 82495, 82501, 82502, 82503, 82505, 82508, 82510, 82513, 82516, 82517, 82518, 82519, 82520, 82526, 82529, 82533, 82536, 82554, 82563, 82565, 82571, 82576, 82577, 82592, 82600, 82604, 82606, 82609, 82620, 82629, 82631, 82684, 82724, 82803, 82872, 82873, 82932, 82953, 83067, 83139, 83180, 83222, 83224, 83321, 83322, 83323, 83324, 83342, 83367, 83372, 83373, 83374, 83375, 83376, 83377, 83379, 83380, 83386, 83387, 83388, 83401, 83571, 83587, 83607, 83608, 83626, 83661, 83681, 83710, 83779, 83783, 83785, 83786, 83790, 83825, 83861, 83871, 83875, 83889, 83975, 83988, 84046, 84132, 84146, 84168, 84180, 84198, 84252, 84322, 84323, 84324, 84325, 84326, 84327, 84328, 84329, 84330, 84332, 84341, 84344, 84349, 84355, 84403, 84421, 84442, 84735, 84809, 84812, 84820, 84821, 84822, 84823, 84827, 84829, 84832, 84834, 84847, 84907, 84919, 84924, 85115, 85116, 85117, 85118, 85155, 85181, 85254, 85278, 85295, 85296, 85297, 85299, 85301, 85310, 85318, 85351, 85352, 85353, 85358, 85499, 85528, 85596, 85784, 86023, 86173, 86204, 86254, 86353, 86662, 86667, 86745, 86801, 86824, 86886, 87116, 87258, 87325, 87482, 87492, 87498, 87500, 87504, 87519, 87544, 87561, 87588, 87591, 87597, 87610, 87626, 87667, 87671, 87673, 87686, 87689, 87697, 87948, 87959, 88145, 88155, 88186, 88256, 88283, 88286, 88288, 88291, 88509, 88517, 88720, 88721, 88722, 88723, 88833, 88847, 88848, 88864, 88926, 89123, 89149, 89177, 89178, 89181, 89248, 89330, 89480, 89481, 89492, 89493, 89494, 89499, 89512, 89521, 89534, 89536, 89550, 89568, 89574, 89635, 89677, 89694, 89705, 89715, 89760, 89837, 89850, 89961, 89998, 90048, 90053, 90180, 90185, 90187, 90193, 90219, 90312, 90472, 90473, 90478, 90479, 90480, 90481, 90482, 90483, 90666, 90716, 90728, 90743, 90748, 90750, 90756, 90760, 90761, 90764, 90765, 90770, 90898, 90980, 91004, 91139, 91140, 91141, 91143, 91147, 91157, 91171, 91387, 91877, 92185, 92187, 92188, 92189, 92190, 92192, 92193, 92196, 92197, 92199, 92200, 92201, 92202, 92203, 92204, 92205, 92206, 92207, 92208, 92209, 92211, 92292, 92296, 92317, 92371, 92384, 92385, 92398, 92399, 92407, 92647, 92704, 92786, 92973, 92985, 92987, 92993, 92997, 93013, 93041, 93085, 93113, 93155, 93156, 93158, 93167, 93168, 93171, 93267, 93276, 93278, 93282, 93386, 93449, 93666, 93675, 93688, 93691, 93699, 93712, 93718, 93801, 93818, 93830, 93874, 93928, 93970, 94000, 94003, 94027, 94042, 94044, 94045, 94048, 94049, 94050, 94053, 94054, 94060, 94064, 94110, 94124, 94138, 94140, 94142, 94143, 94145, 94150, 94176, 94179, 94201, 94218, 94219, 94221, 94315, 94444, 94445, 94467, 94479, 94493, 94494, 94495, 94496, 94500, 94501, 94502, 94503, 94505, 94506, 94507, 94508, 94509, 94510, 94511, 94512, 94513, 94514, 94515, 94516, 94517, 94518, 94519, 94520, 94521, 94522, 94523, 94524, 94525, 94526, 94527, 94528, 94529, 94530, 94531, 94532, 94533, 94534, 94535, 94536, 94537, 94538, 94539, 94540, 94541, 94542, 94543, 94544, 94545, 94546, 94547, 94548, 94549, 94550, 94551, 94552, 94553, 94554, 94555, 94556, 94557, 94618, 94638, 94639, 94674, 94770, 94776, 94816, 94819, 94876, 94903, 94925, 94969, 94992, 94994, 95049, 95091, 95097, 95129, 95130, 95132, 95137, 95165, 95178, 95275, 95311, 95313, 95316, 95433, 95446, 95447, 95448, 95453, 95455, 95456, 95458, 95498, 95500, 95512, 95519, 95522, 95523, 95528, 95533, 95780, 95819, 95878, 95890, 96192, 96218, 96267, 96291, 96292, 96293, 96294, 96295, 96296, 96297, 96298, 96299, 96300, 96301, 96302, 96303, 96304, 96305, 96306, 96307, 96308, 96309, 96310, 96311, 96312, 96313, 96314, 96315, 96316, 96317, 96359, 96360, 96361, 96362, 96363, 96364, 96365, 96366, 96369, 96370, 96371, 96372, 96373, 96375, 96376, 96378, 96379, 96391, 96392, 96393, 96396, 96401, 96403, 96404, 96419, 96446, 96449, 96546, 96547, 96552, 96559, 96564, 96570, 96587, 96611, 96615, 96619, 96622, 96665, 96698, 96699, 96737, 96769, 96770, 96771, 96773, 96775, 96776, 96777, 96780, 96785, 96788, 96791, 96792, 96793, 96794, 96795, 96796, 96844, 96974, 97099, 97105, 97112, 97288, 97324, 97326, 97405, 97487, 97641, 97645, 97662, 97665, 97694, 97697, 97855, 97872, 97876, 97879, 97920, 97946, 98222, 98452, 98494, 98499, 98501, 98502, 98515, 98519, 98521, 98536, 98543, 98557, 98559, 98642, 98643, 98644, 98646, 98647, 98648, 98649, 98651, 98653, 98655, 98657, 98659, 98662, 98663, 98664, 98665, 98666, 98667, 98668, 98669, 98670, 98671, 98672, 98673, 98674, 98675, 98676, 98677, 98679, 98680, 98681, 98682, 98683, 98687, 98688, 98689, 98690, 98691, 98693, 98694, 98695, 98696, 98700, 98701, 98702, 98724, 98730, 98732, 98733, 98737, 98739, 98741, 98743, 98744, 98746, 98747, 98748, 98749, 98750, 98751, 98752, 98753, 98754, 98755, 98814, 99055, 99059, 99063, 99101, 99104, 99455, 99502, 99509, 99512, 99520, 99522, 99525, 99527, 99534, 99536, 99564, 99568, 99578, 99596, 99743, 99820, 99821, 99824, 99850, 99871, 99907, 99955, 100024, 100028, 100104, 100143, 100183, 100242, 100251, 100274, 100283, 100298, 100336, 100348, 100353, 100456, 100526, 100589, 100642, 100644, 100656, 100679, 100680, 100682, 100683, 100718, 100723, 100790, 100792, 100808, 100848, 100877, 100958, 101016, 101111, 101122, 101204, 101206, 101213, 101279, 101293, 101573, 101587, 101605, 101610, 101646, 101654, 101684, 101685, 101694, 101843, 101895, 101896, 101960, 101962, 102058, 102069, 102103, 102104, 102114, 102115, 102118, 102121, 102122, 102126, 102127, 102135, 102137, 102140, 102141, 102142, 102147, 102213, 102216, 102270, 102277, 102419, 102433, 102445, 102481, 102482, 102488, 102489, 102505, 102534, 102556, 102561, 102571, 102591, 102768, 102776, 102777, 102779, 102780, 102781, 102785, 102787, 102795, 102801, 102806, 102807, 102825, 102832, 102833, 102835, 102838, 102839, 102952, 102959, 102960, 102979, 102993, 102996, 103020, 103060, 103082, 103090, 103091, 103092, 103109, 103137, 103140, 103171, 103185, 103314, 103374, 103383, 103485, 103709, 103740, 103761, 103762, 103765, 103776, 103825, 103827, 103939, 103997, 104008, 104017, 104027, 104030, 104049, 104054, 104057, 104069, 104072, 104089, 104092, 104104, 104113, 104146, 104148, 104157, 104159, 104161, 104162, 104167, 104168, 104175, 104176, 104219, 104246, 104249, 104250, 104251, 104252, 104253, 104254, 104255, 104256, 104257, 104258, 104343, 104345, 104347, 104349, 104351, 104370, 104447, 104485, 104486, 104558, 104604, 104607, 104608, 104613, 104614, 104638, 104642, 104654, 104660, 104664, 104692, 104701, 104718, 104731, 104733, 104752, 104778, 104815, 104858, 104860, 104970, 104971, 104974, 104984, 105002, 105081, 105106, 105131, 105165, 105167, 105232, 105295, 105321, 105322, 105323, 105344, 105345, 105353, 105355, 105356, 105364, 105367, 105368, 105372, 105377, 105407, 105409, 105428, 105429, 105490, 105492, 105494, 105495, 105496, 105499, 105501, 105516, 105519, 105521, 105523, 105525, 105534, 105537, 105540, 105542, 105544, 105550, 105553, 105554, 105555, 105576, 105594, 105599, 105608, 105613, 105616, 105621, 105635, 105642, 105643, 105644, 105646, 105664, 105684, 105688, 105689, 105692, 105693, 105694, 105699, 105700, 105706, 105714, 105716, 105718, 105721, 105722, 105730, 105732, 105733, 105734, 105745, 105751, 105752, 105753, 105798, 105801, 106038, 106043, 106044, 106045, 106046, 106047, 106048, 106049, 106051, 106052, 106053, 106056, 106057, 106060, 106061, 106062, 106067, 106068, 106071, 106072, 106074, 106075, 106077, 106112, 106115, 106120, 106121, 106148, 106154, 106158, 106168, 106209, 106210, 106211, 106212, 106213, 106215, 106216, 106217, 106218, 106219, 106220, 106221, 106362, 106381, 106566, 106567, 106585, 106726, 106727, 106752, 106761, 106855, 106879, 106913, 106915, 106928, 106939, 106967, 106975, 106979, 106980, 106987, 107005, 107019, 107031, 107038, 107042, 107079, 107089, 107091, 107098, 107116, 107119, 107131, 107163, 107182, 107198, 107199, 107214, 107216, 107218, 107234, 107247, 107250, 107252, 107253, 107279, 107293, 107301, 107310, 107327, 107334, 107363, 107376, 107387, 107392, 107394, 107395, 107409, 107419, 107437, 107439, 107445, 107450, 107480, 107497, 107502, 107519, 107521, 107553, 107558, 107561, 107576, 107594, 107602, 107652, 107661, 107662, 107667, 107668, 107688, 107697, 107701, 107710, 107712, 107716, 107736, 107737, 107742, 107743, 107752, 107775, 107809, 107833, 107834, 107845, 107860, 107895, 107933, 107940, 107959, 108009, 108128, 108175, 108182, 108197, 108310, 108420, 108422, 108423, 108424, 108428, 108429, 108430, 108438, 108439, 108442, 108443, 108444, 108446, 108447, 108448, 108449, 108450, 108451, 108452, 108453, 108454, 108455, 108457, 108458, 108459, 108460, 108461, 108462, 108463, 108464, 108465, 108466, 108467, 108468, 108469, 108470, 108473, 108474, 108479, 108482, 108483, 108493, 108496, 108513, 108539, 108562, 108572, 108573, 108592, 108595, 108599, 108609, 108675, 108791, 108792, 108814, 109013, 109147, 109183, 109227, 109235, 109283, 109525, 109613, 109636, 109813, 109994, 109995, 110008, 110017, 110043, 110065, 110128, 110130, 110133, 110184, 110204, 110205, 110206, 110208, 110215, 110244, 110249, 110279, 110286, 110355, 110640, 110653, 110657, 110658, 110660, 110805, 111061, 111109, 111114, 111225, 111244, 111429, 111470, 111471, 111472, 111621, 111633, 111671, 111810, 111812, 111814, 111817, 111890, 111898, 111912, 111915, 111916, 111917, 111919, 111929, 111930, 111932, 111937, 111940, 111945, 111946, 111947, 111955, 111956, 111957, 111971, 111974, 111979, 111988, 111990, 111999, 112002, 112005, 112007, 112010, 112011, 112023, 112024, 112031, 112032, 112035, 112037, 112039, 112040, 112041, 112046, 112047, 112049, 112051, 112056, 112066, 112069, 112071, 112072, 112073, 112093, 112098, 112111, 112123, 112202, 112227, 112228, 112229, 112230, 112231, 112232, 112233, 112234, 112235, 112237, 112238, 112239, 112241, 112242, 112243, 112257, 112258, 112263, 112265, 112266, 112267, 112268, 112269, 112270, 112271, 112272, 112273, 112274, 112275, 112276, 112277, 112282, 112283, 112286, 112296, 112297, 112301, 112306, 112310, 112311, 112312, 112313, 112314, 112315, 112318, 112431, 112623, 112655, 112722, 112736, 112740, 112744, 112745, 112749, 112750, 112752, 112755, 112823, 112888, 112889, 112915, 112929, 112943, 112946, 112954, 112959, 112963, 112980, 113008, 113078, 113141, 113142, 113143, 113241, 113243, 113263, 113431, 113466, 113487, 113508, 113516, 113555, 113559, 113610, 113613, 113619, 113630, 113652, 113694, 113712, 113760, 113768, 113800, 113816, 113880, 113907, 113966, 113985, 114029, 114063, 114157, 114324, 114458, 114460, 114466, 114483, 114485, 114638, 114640, 114642, 114645, 114646, 114649, 114654, 114668, 114688, 114802, 114916, 114918, 114922, 114925, 114928, 114930, 114932, 114933, 114934, 114935, 114937, 114938, 114940, 114941, 114943, 114945, 114946, 114951, 114956, 114957, 114961, 114962, 114964, 114965, 114966, 114978, 114979, 114983, 114984, 114986, 114987, 114988, 114989, 114990, 114991, 114992, 114993, 114994, 114999, 115128, 115153, 115157, 115256, 115322, 115380, 115394, 115418, 115425, 115438, 115455, 115457, 115461, 115491, 115539, 115590, 115614, 115651, 115675, 115724, 115732, 115744, 115833, 115850, 115929, 115939, 116148, 116151, 116153, 116156, 116159, 116160, 116161, 116164, 116167, 116179, 116186, 116189, 116193, 116199, 116205, 116219, 116222, 116223, 116227, 116244, 116246, 116250, 116256, 116309, 116345, 116376, 116533, 116540, 116551, 116588, 116644, 116657, 116792, 116855, 116891, 116905, 116910, 116914, 116930, 116939, 116972, 117132, 117134, 117137, 117139, 117142, 117143, 117144, 117149, 117150, 117151, 117152, 117153, 117155, 117156, 117157, 117158, 117159, 117160, 117162, 117164, 117165, 117166, 117167, 117169, 117171, 117174, 117175, 117176, 117177, 117178, 117179, 117180, 117185, 117188, 117190, 117191, 117192, 117193, 117194, 117195, 117242, 117243, 117256, 117260, 117277, 117309, 117311, 117339, 117486, 117488, 117494, 117497, 117499, 117640, 117651, 117730, 117740, 117742, 117814, 117815, 117872, 117874, 117885, 117886, 117888, 117895, 117908, 117975, 118007, 118168, 118184, 118294, 118329, 118332, 118387, 118408, 118447, 118448, 118454, 118457, 118468, 118481, 118519, 118566, 118579, 118590, 118606, 118614, 118620, 118662, 118687, 118688, 118720, 118738, 118751, 118766, 118771, 118775, 118786, 118808, 118809, 118899, 118954, 118956, 118957, 118962, 118976, 118996, 119003, 119005, 119009, 119101, 119118, 119140, 119143, 119145, 119146, 119165, 119172, 119174, 119186, 119194, 119242, 119284, 119318, 119326, 119543, 119554, 119693, 119809, 119810, 119812, 119813, 119816, 119829, 119830, 119831, 119832, 119833, 119834, 119846, 119847, 120028, 120031, 120032, 120038, 120039, 120044, 120045, 120048, 120050, 120095, 120103, 120170, 120171, 120215, 120221, 120243, 120244, 120245, 120246, 120247, 120248, 120249, 120250, 120252, 120254, 120258, 120259, 120260, 120261, 120402, 120639, 120647, 120649, 120828, 120837, 120838, 120842, 120843, 120846, 120848, 120872, 120910, 120959, 120992, 120993, 120994, 120995, 120996, 120998, 120999, 121000, 121001, 121002, 121003, 121004, 121005, 121006, 121007, 121008, 121018, 121019, 121020, 121058, 121075, 121077, 121080, 121081, 121130, 121157, 121192, 121200, 121201, 121203, 121206, 121207, 121208, 121210, 121224, 121231, 121234, 121320, 121355, 121356, 121367, 121419, 121486, 121503, 121515, 121529, 121536, 121549, 121554, 121571, 121586, 121593, 121603, 122234, 122291, 122404, 122406, 122414, 122416, 122422, 122423, 122425, 122432, 122434, 122435, 122443, 122445, 122454, 122456, 122459, 122467, 122472, 122477, 122482, 122498, 122502, 122504, 122506, 122511, 122515, 122517, 122531, 122536, 122537, 122557, 122571, 122594, 122597, 122602, 122611, 122613, 122618, 122619, 122663, 122665, 122667, 122671, 122678, 122682, 122685, 122687, 122702, 122793, 122833, 122853, 122943, 122954, 122974, 123100, 123101, 123104, 123110, 123111, 123112, 123116, 123117, 123118, 123127, 123129, 123130, 123160, 123161, 123162, 123164, 123165, 123265, 123266, 123267, 123269, 123449, 123466, 123476, 123531, 123532, 123533, 123534, 123535, 123536, 123537, 123538, 123539, 123540, 123541, 123542, 123547, 123591, 123594, 123759, 123858, 124051, 124066, 124067, 124075, 124076, 124078, 124496, 124500, 124501, 124519, 124520, 124521, 124522, 124523, 124525, 124528, 124529, 124530, 124551, 124552, 124555, 124556, 124558, 124560, 124562, 124566, 124567, 124568, 124592, 124597, 124598, 124608, 124611, 124624, 124627, 124632, 124639, 124640, 124643, 124655, 124670, 124700, 124703, 124716, 124717, 124735, 124750, 124763, 124764, 124765, 124792, 124794, 124795, 124840, 124841, 124842, 124843, 124844, 124845, 124848, 124849, 124850, 124858, 124863, 124889, 124890, 124891, 124892, 124920, 124922, 124935, 124945, 124974, 124975, 124986, 124987, 124988, 124989, 124990, 124991, 124992, 124993, 125062, 125073, 125100, 125115, 125122, 125130, 125138, 125154, 125191, 125197, 125250, 125258, 125288, 125289, 125345, 125483, 125775, 125776, 125778, 125783, 125786, 125788, 125801, 125870, 125965, 126019, 126208, 126219, 126238, 126252, 126278, 126348, 126380, 126388, 126424, 126428, 126431, 126496, 126499, 126540, 126639, 126647, 126659, 126666, 126749, 126759, 126761, 127039, 127043, 127212, 127221, 127306, 127345, 127347, 127354, 127377, 127454, 127469, 127474, 127477, 127481, 127549, 127790, 127827, 127892, 127902, 127909, 127945, 127946, 127963, 128010, 128064, 128077, 128127, 128160, 128176, 128206, 128229, 128296, 128321, 128325, 128367, 128396, 128399, 128404, 128423, 128436, 128438, 128445, 128659, 128661, 128671, 128770, 128793, 128902, 128915, 128959, 129047, 129051, 129070, 129087, 129104, 129141, 129199, 129204, 129303, 129354, 129373, 129375, 129414, 129415, 129437, 129440, 129442, 129501, 129503, 129526, 129541, 129542, 129543, 129550, 129566, 129600, 129603, 129604, 129608, 129614, 129632, 129677, 129692, 129693, 129694, 129733, 130104, 130141, 130172, 130252, 130270, 130274, 130374, 130375, 130378, 130435, 130469, 130470, 130471, 130475, 130476, 130537, 130567, 130584, 130592, 130711, 130720, 130725, 130733, 130735, 130744, 130746, 130747, 131007, 131023, 131095, 131097, 131102, 131110, 131204, 131405, 131448, 131461, 131550, 131591, 131599, 131688, 131693, 131789, 131807, 131811, 131830, 131834, 131864, 131899, 131916, 131932, 131935, 131938, 131949, 132014, 132039, 132213, 132214, 132215, 132216, 132218, 132221, 132222, 132223, 132224, 132227, 132229, 132231, 132236, 132237, 132247, 132249, 132328, 132338, 132339, 132340, 132347, 132363, 132365, 132366, 132367, 132370, 132374, 132395, 132409, 132420, 132711, 132712, 132740, 132745, 132758, 132759, 132760, 132764, 132765, 132767, 132770, 132773, 132779, 132787, 132789, 132790, 132807, 132821, 132824, 132825, 132826, 132842, 132944, 133006, 133007, 133032, 133204, 133338, 133388, 133517, 133613, 133614, 133618, 133620, 133627, 133629, 133654, 133789, 133800, 133803, 133811, 133813, 133821, 133838, 133926, 133982, 134071, 134073, 134136, 134208, 134212, 134243, 134297, 134318, 134354, 134355, 134466, 134497, 134587, 134607, 134751, 134779, 134780, 134783, 134786, 134791, 134922, 134923, 134934, 134966, 134968, 135009, 135014, 135017, 135086, 135098, 135118, 135153, 135167, 135208, 135217, 135218, 135290, 135301, 135334, 135384, 135397, 135407, 135431, 135459, 135614, 135749, 135755, 135783, 135784, 135794, 135827, 135830, 135841, 135853, 135870, 135877, 135894, 135896, 135915, 135931, 135977, 135987, 136022, 136025, 136034, 136036, 136049, 136050, 136051, 136070, 136080, 136090, 136118, 136126, 136129, 136134, 136138, 136139, 136140, 136143, 136144, 136147, 136153, 136192, 136193, 136194, 136195, 136196, 136197, 136198, 136199, 136200, 136204, 136205, 136350, 136351, 136352, 136353, 136354, 136355, 136429, 136443, 136449, 136472, 136490, 136504, 136520, 136538, 136551, 136559, 136566, 136670, 136674, 136710, 136717, 136728, 136735, 136738, 136787, 136883, 136900, 136901, 136913, 136915, 136918, 136922, 136925, 136933, 136935, 136950, 136974, 136997, 137026, 137029, 137058, 137073, 137074, 137082, 137097, 137132, 137135, 137138, 137159, 137167, 137168, 137172, 137173, 137174, 137175, 137176, 137177, 137178, 137179, 137186, 137219, 137246, 137321, 137326, 137331, 137335, 137336, 137348, 137349, 137354, 137357, 137363, 137378, 137463, 137464, 137475, 137477, 137478, 137479, 137480, 137481, 137482, 137487, 137499, 137516, 137517, 137518, 137519, 137527, 137530, 137558, 137571, 137582, 137583, 137604, 137669, 137724, 137731, 137752, 137761, 137783, 137795, 137846, 137863, 137874, 137921, 137922, 137924, 137925, 137927, 137928, 137929, 137934, 137981, 137982, 137999, 138023, 138047, 138175, 138201, 138326, 138328, 138338, 138345, 138351, 138359, 138360, 138432, 138470, 138510, 138601, 138603, 138612, 138614, 138615, 138616, 138617, 138618, 138619, 138620, 138622, 138623, 138624, 138665, 138687, 138688, 138690, 138758, 138807, 139036, 139054, 139228, 139229, 139231, 139232, 139233, 139235, 139236, 139245, 139249, 139251, 139263, 139265, 139270, 139272, 139275, 139278, 139349, 139481, 139484, 139485, 139514, 139520, 139525, 139532, 139538, 139543, 139544, 139545, 139546, 139548, 139549, 139552, 139557, 139558, 139559, 139561, 139563, 139572, 139780, 139833, 139834, 139939, 139949, 139970, 139989, 140124, 140185, 140337, 140342, 140353, 140437, 142003, 142059, 142137, 142191, 142200, 142374, 142398, 142399, 142401, 142419, 142455, 142577, 142643, 142718, 142966, 143031, 143094, 143134, 143162, 143169, 143172, 143175, 143176, 143177, 143178, 143179, 143181, 143185, 143186, 143188, 143189, 143190, 143196, 143197, 143198, 143200, 143202, 143203, 143205, 143208, 143209, 143211, 143212, 143213, 143215, 143216, 143220, 143222, 143223, 143225, 143226, 143228, 143230, 143233, 143236, 143237, 143240, 143242, 143243, 143435, 143439, 143441, 143472, 143473, 143477, 143480, 143483, 143486, 143488, 143492, 143499, 143509, 143519, 143523, 143524, 143531, 143533, 143535, 143539, 143543, 143549, 143554, 143555, 143559, 143567, 143569, 143571, 143575, 143591, 143593, 143594, 143596, 143699, 143700, 143701, 143734, 143736, 143742, 143940, 143945, 143965, 143976, 144072, 144074, 144075, 144076, 144077, 144080, 144083, 144084, 144091, 144094, 144096, 144097, 144098, 144104, 144107, 144112, 144118, 144125, 144127, 144128, 144129, 144130, 144136, 144140, 144141, 144143, 144147, 144148, 144149, 144151, 144158, 144159, 144160, 144161, 144162, 144166, 144168, 144169, 144175, 144181, 144182, 144185, 144189, 144191, 144194, 144195, 144196, 144197, 144199, 144200, 144202, 144203, 144204, 144205, 144208, 144209, 144210, 144212, 144216, 144217, 144218, 144219, 144220, 144221, 144222, 144224, 144225, 144257, 144258, 144259, 144260, 144261, 144262, 144264, 144265, 144270, 144343, 144368, 144378, 144443, 144444, 144452, 144453, 144454, 144456, 144464, 144465, 144470, 144473, 144476, 144478, 144480, 144490, 144520, 144584, 144594, 144642, 144792, 144807, 144901, 144909, 144964, 145046, 145080, 145217, 145221, 145234, 145283, 145309, 145311, 145315, 145331, 145351, 145362, 145427, 145473, 145504, 145605, 145779, 145842, 145920, 146215, 146349, 146352, 146355, 146356, 146362, 146364, 146384, 146470, 146490, 146498, 146509, 146529, 146542, 146552, 146604, 146743, 146762, 146782, 146803, 146812, 146815, 146827, 146829, 146834, 146843, 146866, 146871, 146875, 146881, 146933, 146951, 146963, 146998, 147004, 147005, 147006, 147053, 147055, 147057, 147058, 147068, 147086, 147107, 147108, 147125, 147174, 147289, 147337, 147349, 147402, 147627, 147679, 147680, 147703, 147725, 147740, 147748, 147765, 147766, 147784, 147838, 147839, 147870, 147875, 147980, 148008, 148148, 148153, 148163, 148167, 148189, 148202, 148257, 148273, 148281, 148282, 148354, 148356, 148363, 148442, 148448, 148455, 148458, 148469, 148481, 148555, 148561, 148593, 148601, 148606, 148609, 148615, 148644, 148654, 148675, 148680, 148709, 148721, 148725, 148751, 148756, 148758, 148761, 148763, 148766, 148770, 148878, 148946, 148952, 148953, 148954, 148955, 148997, 149057, 149058, 149072, 149075, 149079, 149080, 149081, 149082, 149083, 149084, 149089, 149092, 149094, 149095, 149098, 149183, 149204, 149341, 149397, 149426, 149428, 149429, 149541, 149610, 149664, 149808, 149813, 149854, 149982, 150002, 150011, 150031, 150093, 150176, 150216, 150227, 150229, 150233, 150304, 150305, 150306, 150398, 150484, 150489, 150490, 150501, 150551, 150581, 150593, 150625, 150655, 150657, 150658, 150729, 150736, 150746, 150748, 150757, 150782, 150878, 150952, 150970, 151027, 151250, 151266, 151386, 151659, 151790, 151877, 152005, 152013, 152064, 152105, 152108, 152109, 152187, 152224, 152323, 152358, 152366, 152545, 152615, 152627, 152632, 152637, 152751, 152962, 152980, 152998, 153001, 153002, 153004, 153011, 153012, 153016, 153026, 153027, 153031, 153033, 153034, 153049, 153055, 153057, 153058, 153061, 153062, 153063, 153064, 153065, 153068, 153069, 153072, 153077, 153109, 153110, 153112, 153114, 153118, 153152, 153183, 153201, 153203, 153207, 153208, 153211, 153216, 153217, 153221, 153283, 153289, 153308, 153333, 153377, 153404, 153445, 153452, 153470, 153519, 153531, 153547, 153566, 153605, 153618, 153627, 153653, 153691, 153695, 153697, 153701, 153702, 153704, 153705, 153706, 153715, 153716, 153717, 153718, 153852, 154037, 154043, 154123, 154138, 154167, 154293, 154316, 154323, 154345, 154367, 154390, 154407, 154416, 154453, 154464, 154487, 154493, 154508, 154509, 154544, 154590, 154599, 154622, 154658, 154673, 154675, 154680, 154698, 154718, 154719, 154722, 154723, 154724, 154728, 154738, 154743, 154760, 154767, 154780, 154796, 154805, 154992, 155044, 155045, 155056, 155082, 155084, 155085, 155087, 155089, 155095, 155096, 155098, 155099, 155104, 155107, 155122, 155126, 155128, 155129, 155131, 155135, 155146, 155147, 155148, 155150, 155177, 155185, 155188, 155194, 155195, 155202, 155204, 155205, 155211, 155216, 155222, 155226, 155231, 155232, 155240, 155241, 155242, 155257, 155290, 155321, 155513, 155549, 155551, 155560, 155562, 155565, 155570, 155571, 155572, 155573, 155574, 155577, 155578, 155579, 155582, 155585, 155587, 155588, 155591, 155594, 155595, 155596, 155601, 155713, 155779, 155784, 155838, 155859, 155865, 155900, 155901, 155914, 155918, 155932, 155933, 155935, 155942, 155944, 155947, 155953, 155954, 155955, 155959, 155960, 155962, 155964, 155974, 155975, 155977, 155978, 155980, 155981, 155982, 155985, 155988, 155989, 155991, 155993, 155997, 156060, 156064, 156069, 156091, 156159, 156234, 156307, 156321, 156338, 156568, 156572, 156573, 156575, 156576, 156595, 156629, 156773, 156908, 157044, 157045, 157046, 157062, 157222, 157223, 157228, 157230, 157232, 157234, 157235, 157236, 157238, 157241, 157243, 157250, 157252, 157255, 157256, 157258, 157259, 157278, 157286, 157293, 157302, 157305, 157317, 157328, 157329, 157332, 157333, 157356, 157369, 157376, 157377, 157380, 157381, 157382, 157384, 157385, 157386, 157387, 157389, 157390, 157391, 157393, 157401, 157402, 157407, 157409, 157417, 157418, 157422, 157425, 157461, 157465, 157475, 157557, 157574, 157575, 157576, 157579, 157588, 157590, 157591, 157594, 157599, 157600, 157601, 157602, 157603, 157604, 157605, 157655, 157660, 157931, 158012, 158049, 158051, 158155, 158159, 158160, 158162, 158167, 158169, 158211, 158233, 158234, 158235, 158237, 158254, 158262, 158263, 158297, 158301, 158302, 158303, 158304, 158306, 158307, 158308, 158309, 158310, 158311, 158312, 158316, 158318, 158325, 158328, 158330, 158342, 158472, 158488, 158526, 158530, 158575, 158596, 158624, 158667, 158684, 158702, 158715, 158749, 158830, 158862, 158879, 158886, 158887, 158894, 158897, 158899, 158900, 158987, 159422, 159493, 159513, 159521, 159522, 159588, 159623, 159637, 159643, 159649, 159650, 159662, 159707, 159736, 159738, 159740, 159747, 159749, 159764, 159772, 159776, 159777, 159779, 159783, 159804, 159809, 159822, 159823, 159825, 159837, 159847, 159851, 159855, 159859, 159861, 159961, 159982, 159983, 160021, 160024, 160031, 160056, 160068, 160072, 160089, 160120, 160139, 160140, 160143, 160144, 160152, 160177, 160178, 160183, 160191, 160195, 160204, 160211, 160212, 160223, 160247, 160257, 160274, 160278, 160299, 160348, 160370, 160417, 160444, 160478, 160502, 160518, 160528, 160593, 160628, 160631, 160658, 160686, 160687, 160707, 160746, 160747, 160767, 160780, 160818, 160865, 160878, 160889, 160905, 160913, 160919, 160961, 160986, 160987, 161019, 161037, 161050, 161065, 161070, 161074, 161085, 161107, 161108, 161176, 161253, 161255, 161256, 161261, 161275, 161295, 161302, 161304, 161308, 161400, 161417, 161439, 161442, 161444, 161445, 161464, 161471, 161473, 161493, 161512, 161541, 161551, 161583, 161587, 161596, 161600, 161602, 161603, 161605, 161607, 161609, 161612, 161624, 161644, 161648, 161658, 161660, 161907, 161910, 161965, 161982, 162000, 162060, 162128, 162133, 162139, 162140, 162208, 162236, 162245, 162261, 162262, 162267, 162318, 162365, 162570, 162595, 162596, 162607, 162618, 162621, 162629, 162630, 162632, 162637, 162646, 162671, 162680, 162682, 162688, 162697, 162748, 162758, 162900, 162902, 162906, 162993, 163010, 163020, 163041, 163061, 163077, 163106, 163107, 163262, 163268, 163294, 163296, 163313, 163324, 163341, 163394, 163472, 163474, 163475, 163483, 163502, 163622, 163630, 163804, 163814, 163844, 163860, 163877, 163994, 164226, 164350, 164352, 164393, 164419, 164512, 164563, 164584, 164782, 164886, 164887, 164889, 164905, 164909, 164912, 164934, 165002, 165003, 165004, 165010, 165011, 165013, 165014, 165015, 165016, 165017, 165018, 165019, 165025, 165029, 165032, 165033, 165034, 165036, 165043, 165044, 165048, 165050, 165051, 165057, 165063, 165064, 165305, 165453, 165462, 165480, 165504, 165506, 165507, 165511, 165514, 165554, 165571, 165974, 166023, 166032, 166087, 166088, 166089, 166090, 166198, 166203, 166301, 166337, 166338, 166410, 166445, 166446, 166447, 166488, 166682, 166969, 167226, 167236, 167238, 167326, 167418, 167424, 167436, 167454, 167530, 167533, 167534, 167593, 167679, 168066, 168251, 168402, 168440, 168576, 168583, 168589, 168591, 168603, 168657, 168723, 168744, 168745, 168755, 168827, 168962, 169499, 169507, 169557, 169583, 169590, 169624, 169629, 169664, 169669, 169670, 169672, 169679, 169681, 169686, 169687, 169691, 169695, 169709, 169732, 169733, 169752, 169754, 169761, 169763, 169795, 169801, 169813, 169816, 169821, 169822, 169836, 169841, 169842, 170043, 170180, 170235, 170236, 170238, 170242, 170374, 170409, 170410, 170411, 170412, 170413, 170527, 170528, 170569, 170575, 170641, 170655, 170691, 170715, 170718, 170729, 170736, 170740, 170753, 170773, 170783, 170819, 170843, 170915, 170923, 170927, 170932, 170946, 170973, 171043, 171051, 171127, 171132, 171278, 171279, 171416, 171419, 171425, 171442, 171457, 171467, 171501, 171520, 171525, 171570, 171578, 171582, 171644, 171766, 171774, 171775, 171779, 171908, 172029, 172068, 172076, 172109, 172110, 172155, 172174, 172194, 172207, 172210, 172235, 172317, 172381, 172393, 172410, 172446, 172456, 172499, 172507, 172571, 172622, 172640, 172701, 172808, 172830, 172888, 172936, 172959, 172963, 172998, 172999, 173004, 173006, 173007, 173014, 173114, 173135, 173137, 173138, 173139, 173147, 173156, 173294, 173311, 173313, 173317, 173322, 173323, 173324, 173325, 173326, 173329, 173330, 173331, 173332, 173333, 173334, 173335, 173336, 173337, 173338, 173339, 173340, 173341, 173342, 173343, 173344, 173346, 173347, 173348, 173349, 173350, 173351, 173352, 173353, 173404, 173413, 173416, 173418, 173423, 173474, 173485, 173486, 173508, 173510, 173511, 173513, 173516, 173843, 173844, 173849, 173904, 173954, 173999, 174007, 174008, 174009, 174010, 174011, 174012, 174016, 174018, 174020, 174021, 174022, 174025, 174026, 174029, 174036, 174038, 174039, 174042, 174043, 174050, 174051, 174052, 174055, 174057, 174078, 174083, 174279, 174361, 174483, 174494, 174514, 174632, 174636, 174637, 174641, 174642, 174643, 174649, 174656, 174658, 174662, 174665, 174666, 174669, 174673, 174676, 174677, 174678, 174724, 174726, 174732, 174736, 174737, 174738, 174747, 174748, 174749, 174750, 174751, 174752, 174753, 174754, 174755, 174758, 174759, 174760, 174761, 174762, 174765, 174768, 174778, 174779, 174785, 174786, 174787, 174788, 174790, 174791, 174792, 174793, 174794, 174796, 174797, 174798, 174799, 174800, 174801, 174803, 174805, 174806, 174809, 174810, 174811, 174812, 174813, 174814, 174815, 174816, 174817, 174818, 174819, 174820, 174821, 174846, 174927, 174932, 175176, 175181, 175207, 175309, 175364, 175384, 175453, 175519, 175635, 175707, 175729, 175730, 175767, 175768, 175771, 175774, 175776, 175779, 175783, 175784, 175786, 175790, 175792, 175793, 175795, 175796, 175797, 175798, 175799, 175801, 175802, 175804, 175805, 175806, 175808, 175810, 175811, 175814, 175816, 175820, 175821, 175822, 175823, 175824, 175825, 175855, 175935, 175938, 175966, 176339, 176340, 176342, 176349, 176352, 176353, 176354, 176355, 176356, 176662, 176703, 176716, 176719, 176720, 176722, 176724, 176725, 176727, 176736, 176737, 176739, 176741, 176744, 176746, 176747, 176748, 176749, 176751, 176752, 176753, 176754, 176755, 176756, 176757, 176759, 176761, 176762, 176763, 176765, 176766, 176771, 176772, 176775, 176777, 176782, 176818, 176819, 176820, 176831, 176833, 176835, 176836, 176840, 176917, 176988, 177067, 177074, 177116, 177244, 177326, 177364, 177385, 177614, 177615, 177633, 177774, 177775, 177800, 177809, 177903, 177927, 177957, 177958, 177961, 177963, 177976, 177987, 178015, 178023, 178024, 178027, 178028, 178035, 178053, 178067, 178086, 178090, 178127, 178137, 178139, 178146, 178164, 178167, 178179, 178211, 178230, 178246, 178247, 178262, 178264, 178266, 178282, 178295, 178298, 178300, 178301, 178327, 178341, 178349, 178358, 178375, 178382, 178411, 178424, 178435, 178440, 178442, 178443, 178457, 178467, 178485, 178487, 178493, 178498, 178528, 178545, 178550, 178567, 178569, 178601, 178606, 178609, 178624, 178642, 178650, 178700, 178709, 178710, 178715, 178716, 178736, 178739, 178745, 178749, 178758, 178760, 178764, 178784, 178785, 178790, 178791, 178800, 178857, 178881, 178882, 178893, 178908, 178981, 179007, 179057, 179277, 179322, 179325, 179333, 179334, 179353, 179356, 179395, 179461, 179475, 179518, 179520, 179524, 179531, 179536, 179668, 179724, 179725, 179726, 179727, 179728, 179729, 179730, 179731, 179732, 179733, 179734, 179735, 179736, 179737, 179738, 179739, 179740, 179741, 179742, 179743, 179744, 179745, 179746, 179747, 179748, 179749, 179750, 179751, 179752, 179753, 179754, 179755, 179756, 179757, 179758, 179759, 179760, 179762, 179763, 179764, 179765, 179766, 179767, 179768, 179769, 179775, 179776, 179777, 179778, 179779, 179780, 179839, 179905, 179911, 180020, 180151, 180232, 180263, 180271, 180287, 180288, 180291, 180292, 180294, 180297, 180299, 180300, 180301, 180302, 180468, 180478, 180547, 180825, 180850, 180898, 180917, 181002, 181029, 181071, 181073, 181114, 181231, 181237, 181238, 181239, 181240, 181244, 181245, 181252, 181254, 181256, 181270, 181278, 181279, 181283, 181285, 181295, 181337, 181464, 181640, 181661, 181752, 181841, 181857, 181860, 181870, 181938, 181959, 181964, 182117, 182118, 182119, 182142, 182232, 182345, 182348, 182350, 182356, 182359, 182360, 182362, 182365, 182366, 182370, 182371, 182373, 182376, 182379, 182384, 182385, 182388, 182393, 182395, 182399, 182402, 182407, 182408, 182410, 182412, 182413, 182415, 182416, 182418, 182419, 182420, 182421, 182424, 182426, 182428, 182430, 182431, 182435, 182436, 182444, 182445, 182446, 182447, 182450, 182500, 182535, 182570, 182666, 182779, 182781, 183073, 183077, 183084, 183089, 183098, 183109, 183112, 183113, 183114, 183115, 183116, 183117, 183118, 183119, 183122, 183127, 183144, 183148, 183149, 183150, 183151, 183152, 183155, 183158, 183166, 183173, 183182, 183193, 183215, 183229, 183243, 183246, 183251, 183253, 183256, 183270, 183275, 183278, 183290, 183298, 183300, 183301, 183318, 183323, 183329, 183368, 183375, 183384, 183388, 183403, 183407, 183412, 183430, 183443, 183479, 183490, 183502, 183509, 183532, 183560, 183576, 183587, 183621, 183627, 183633, 183645, 183662, 183682, 183684, 183747, 183748, 183759, 183787, 183797, 183801, 183806, 183817, 183818, 183820, 183821, 183839, 183843, 183867, 183876, 183877, 183878, 183879, 183881, 183882, 183883, 183888, 183892, 183899, 183910, 183961, 183974, 183989, 183992, 183993, 184012, 184013, 184014, 184019, 184026, 184037, 184039, 184040, 184050, 184051, 184052, 184059, 184071, 184077, 184079, 184088, 184098, 184104, 184107, 184109, 184113, 184118, 184131, 184148, 184162, 184168, 184175, 184184, 184187, 184188, 184200, 184207, 184222, 184225, 184232, 184259, 184445, 184533, 184619, 184766, 185006, 185051, 185125, 185152, 185153, 185194, 185195, 185214, 185241, 185364, 185384, 185390, 185401, 185412, 185413, 185416, 185457, 185472, 185522, 185541, 185554, 185582, 185602, 185622, 185713, 185723, 185725, 185728, 185732, 185737, 185740, 185751, 185791, 185797, 185803, 185804, 185807, 185836, 185957, 185967, 185973, 185987, 186001, 186072, 186137, 186166, 186275, 186288, 186289, 186302, 186303, 186309, 186313, 186317, 186318, 186323, 186342, 186346, 186347, 186363, 186370, 186377, 186385, 186716, 186743, 186747, 186750, 186761, 186780, 186786, 186791, 186926, 186958, 187081, 187555, 188309, 188342, 188343, 188398, 188431, 188435, 188487, 188549, 188552, 188580, 188584, 188601, 188623, 188767, 188777, 188819, 188916, 188917, 188918, 188919, 188920, 188921, 188922, 188923, 188925, 188926, 188928, 188929, 188931, 188938, 188944, 188945, 188950, 189263, 189296, 189338, 189570, 189606, 189757, 189761, 189813, 189878, 189880, 189881, 189911, 189915, 190029, 190395, 190400, 190410, 190416, 190419, 190426, 190430, 190434, 190435, 190436, 190437, 190441, 190449, 190450, 190458, 190460, 190462, 190463, 190664, 190685, 190687, 190720, 190727, 190728, 190732, 190786, 190962, 191038, 191160, 191161, 191162, 191163, 191164, 191165, 191166, 191168, 191171, 191172, 191174, 191177, 191233, 191352, 191512, 191513, 191538, 191543, 191605, 191696, 191706, 191801, 191802, 191804, 191806, 191808, 191811, 191812, 191813, 191814, 191815, 191819, 191820, 191882, 191943, 191960, 191972, 191975, 192078, 192083, 192084, 192107, 192122, 192131, 192232, 192239, 192244, 192300, 192302, 192303, 192304, 192307, 192309, 192311, 192312, 192314, 192315, 192318, 192322, 192325, 192329, 192335, 192336, 192337, 192340, 192351, 192354, 192355, 192357, 192360, 192361, 192362, 192492, 192555, 192691, 192772, 192805, 192812, 192813, 192853, 192916, 192980, 192990, 193027, 193058, 193059, 193100, 193239, 193258, 193304, 193338, 193358, 193577, 193612, 193706, 193790, 194292, 194308, 194506, 194521, 194535, 194537, 194558, 194567, 194571, 194593, 194604, 194621, 194635, 194640, 194678, 194686, 194689, 194693, 194759, 194760, 194761, 194807, 194855, 194871, 194873, 194900, 194943, 194966, 194975, 195021, 195049, 195071, 195075, 195086, 195114, 195115, 195147, 195151, 195181, 195207, 195271, 195292, 195337, 195342, 195386, 195399, 195413, 195595, 195596, 195614, 195615, 195616, 195677, 195780, 195859, 195933, 196081, 196260, 196262, 196316, 196375, 196394, 196418, 196422, 196426, 196443, 196560, 196587, 196669, 196707, 196745, 196754, 197011, 197035, 197036, 197037, 197040, 197041, 197044, 197047, 197049, 197050, 197058, 197059, 197071, 197077, 197099, 197118, 197126, 197135, 197151, 197172, 197191, 197212, 197235, 197246, 197283, 197293, 197294, 197295, 197421, 197435, 197438, 197447, 197452, 197466, 197495, 197523, 197638, 197870, 197882, 197891, 198013, 198022, 198030, 198075, 198078, 198113, 198114, 198120, 198141, 198195, 198243, 198251, 198252, 198254, 198255, 198256, 198269, 198330, 198331, 198332, 198338, 198427, 198449, 198450, 198455, 198756, 198832, 198882, 198895, 198898, 198953, 198955, 198960, 199030, 199057, 199099, 199155, 199184, 199243, 199325, 199409, 199434, 199451, 199456, 199493, 199520, 199524, 199525, 199557, 199659, 199697, 199702, 199854, 199879, 199904, 199940, 200005, 200068, 200094, 200095, 200096, 200151, 200171, 200275, 200282, 200305, 200317, 200356, 200527, 200934, 200956, 201066, 201093, 201094, 201109, 201171, 201175, 201233, 201311, 201422, 201423, 201424, 201536, 201571, 201604, 201628, 201639, 201651, 201658, 201706, 201713, 201715, 201716, 201745, 202188, 202199, 202250, 202255, 202291, 202343, 202356, 202360, 202365, 202379, 202409, 202420, 202421, 202423, 202435, 202440, 202442, 202444, 202449, 202456, 202465, 202466, 202470, 202472, 202477, 202480, 202482, 202487, 202494, 202509, 202514, 202515, 202527, 202546, 202548, 202858, 202915, 203218, 203223, 203266, 203267, 203275, 203459, 203614, 203617, 203657, 203661, 203662, 203669, 203670, 203673, 203676, 203680, 203683, 203691, 203695, 203702, 203982, 203987, 203991, 203993, 204000, 204001, 204007, 204009, 204012, 204075, 204078, 204080, 204081, 204082, 204083, 204087, 204091, 204094, 204095, 204096, 204158, 204262, 204284, 204292, 204304, 204355, 204356, 204359, 204360, 204368, 204371, 204373, 204374, 204376, 204377, 204379, 204383, 204384, 204385, 204387, 204389, 204391, 204392, 204395, 204397, 204398, 204400, 204401, 204402, 204403, 204407, 204414, 204417, 204419, 204423, 204424, 204425, 204426, 204428, 204433, 204437, 204438, 204450, 204453, 204454, 204455, 204463, 204466, 204473, 204479, 204482, 204484, 204485, 204486, 204487, 204488, 204489, 204490, 204491, 204492, 204493, 204494, 204495, 204496, 204507, 204621, 204630, 204689, 204703, 204764, 204833, 204840, 204848, 204850, 204852, 204854, 204869, 204873, 204878, 204882, 204887, 204889, 204891, 204893, 204896, 205011, 205159, 205169, 205212, 205216, 205239, 205241, 205247, 205259, 205272, 205288, 205298, 205299, 205306, 205318, 205322, 205323, 205324, 205325, 205326, 205372, 205373, 205384, 205385, 205431, 205433, 205542, 205775, 205908, 206245, 206333, 206455, 206457, 206475, 206483, 206484, 206485, 206489, 206542, 206545, 206577, 206757, 206792, 206814, 206868, 206869, 206870, 206871, 206872, 206883, 206884, 206885, 206886, 206888, 206889, 206890, 206893, 206895, 206897, 206899, 206916, 206975, 207008, 207225, 207241, 207258, 207267, 207301, 207359, 207423, 207424, 207427, 207428, 207432, 207438, 207439, 207441, 207444, 207447, 207449, 207458, 207459, 207461, 207463, 207464, 207465, 207471, 207477, 207482, 207483, 207487, 207489, 207491, 207495, 207496, 207499, 207500, 207502, 207505, 207506, 207507, 207510, 207511, 207512, 207513, 207514, 207515, 207516, 207517, 207518, 207519, 207520, 207521, 207523, 207524, 207526, 207527, 207528, 207530, 207531, 207532, 207537, 207539, 207546, 207547, 207549, 207551, 207554, 207561, 207567, 207568, 207621, 207664, 207665, 207670, 207674, 207678, 207679, 207688, 208017, 208068, 208147, 208184, 208191, 208264, 208265, 208269, 208293, 208403, 208432, 208439, 208440, 208525, 208706, 208741, 208747, 208748, 208754, 208803, 208821, 208822, 208827, 208829, 208855, 208862, 208864, 208866, 208873, 208888, 208889, 209005, 209007, 209008, 209018, 209032, 209082, 209142, 209171, 209241, 209259, 209304, 209312, 209315, 209347, 209350, 209352, 209381, 209490, 209501, 209607, 209608, 209708, 209716, 209764, 209765, 209771, 209775, 209787, 209791, 209816, 209820, 209835, 209866, 209874, 209919, 209920, 209921, 209972, 209973, 209984, 209989, 209995, 209996, 210019, 210023, 210028, 210037, 210124, 210143, 210222, 210223, 210234, 210280, 210368, 210370, 210392, 210491, 210550, 210554, 210564, 210638, 210655, 210660, 210662, 210705, 210740, 210742, 210747, 210827, 210933, 210934, 210977, 210978, 210990, 211032, 211033, 211096, 211242, 211243, 211282, 211318, 211354, 211355, 211356, 211357, 211358, 211360, 211361, 211368, 211369, 211373, 211376, 211377, 211382, 211387, 211388, 211543, 211548, 211549, 211550, 211595, 211606, 211896, 212035, 212149, 212179, 212190, 212191, 212221, 212249, 212299, 212497, 212584, 212587, 212588, 212589, 212591, 212592, 212598, 212600, 212601, 212606, 212608, 212609, 212610, 212613, 212615, 212616, 212617, 212618, 212619, 212620, 212621, 212623, 212633, 212637, 212640, 212643, 212655, 212657, 212658, 212664, 212671, 212674, 212683, 212684, 212685, 212687, 212688, 212698, 212712, 212715, 212717, 212723, 212724, 212735, 212742, 212746, 212747, 212748, 212751, 212755, 212761, 212765, 212775, 212778, 212783, 212789, 212796, 212804, 212808, 212811, 212812, 212814, 212817, 212827, 212837, 212847, 212858, 212860, 212870, 212875, 212895, 212900, 212901, 212904, 212905, 212906, 212907, 212911, 212915, 212930, 212936, 212942, 212943, 212950, 212954, 212956, 212963, 212991, 212992, 213001, 213002, 213007, 213246, 213280, 213576, 213593, 213653, 213654, 213656, 213657, 213659, 213662, 213663, 213666, 213667, 213668, 213672, 213688, 213722, 213806, 213810, 213811, 213812, 213813, 213815, 213820, 213821, 213823, 213824, 213825, 213826, 213827, 213829, 213830, 213832, 213834, 213838, 213840, 213842, 213844, 213845, 213847, 213848, 213850, 213852, 213853, 213857, 213861, 213866, 213867, 213869, 213870, 213871, 213872, 213902, 213907, 213909, 213915, 213922, 213929, 213941, 213950, 213955, 213960, 213962, 213964, 213975, 213977, 214030, 214139, 214143, 214233, 214259, 214272, 214314, 214315, 214325, 214330, 214333, 214338, 214341, 214343, 214345, 214346, 214411, 214449, 214646, 214761, 214789, 214791, 214973, 214975, 214977, 214981, 214983, 214984, 215121, 215147, 215148, 215151, 215152, 215160, 215171, 215172, 215173, 215444, 215477, 215483, 215574, 215588, 215598, 215609, 215611, 215619, 215638, 215691, 215752, 215773, 215800, 215820, 215871, 215898, 215904, 215913, 215938, 215943, 215946, 215958, 216107, 216123, 216144, 216206, 216221, 216227, 216259, 216260, 216301, 216323, 216359, 216379, 216385, 216414, 216433, 216435, 216511, 216617, 216649, 216654, 216769, 216800, 216802, 216925, 216953, 216994, 217021, 217228, 217328, 217367, 217395, 217457, 217633, 217765, 217899, 217902, 217907, 217939, 218051, 218155, 218173, 218184, 218195, 218197, 218198, 218201, 218207, 218210, 218212, 218216, 218233, 218236, 218284, 218308, 218310, 218311, 218313, 218314, 218318, 218337, 218345, 218348, 218350, 218351, 218366, 218370, 218379, 218384, 218387, 218388, 218397, 218419, 218429, 218433, 218438, 218528, 218857, 218867, 218900, 218911, 218913, 218920, 218921, 218929, 218930, 218934, 218937, 218940, 218944, 218951, 218982, 219057, 219060, 219062, 219065, 219069, 219073, 219075, 219099, 219110, 219115, 219125, 219154, 219208, 219243, 219311, 219312, 219313, 219337, 219412, 219418, 219462, 219499, 219549, 219554, 219597, 219738, 219788, 219789, 219790, 219791, 219792, 219793, 219794, 219798, 219854, 219867, 219966, 219994, 219996, 220055, 220062, 220091, 220211, 220233, 220319, 220332, 220382, 220387, 220416, 220495, 220499, 220553, 220559, 220560, 220561, 220575, 220577, 220578, 220581, 220582, 220583, 220592, 220627, 220961, 220978, 221029, 221054, 221061, 221067, 221139, 221309, 221384, 221462, 221489, 221494, 221496, 221497, 221711, 221713, 221714, 221926, 222046, 222050, 222600, 222626, 222673, 222870, 222871, 222966, 222976, 222987, 223093, 223116, 223122, 223145, 223288, 223307, 223367, 223380, 223388, 223395, 223516, 223561, 223594, 223849, 223865, 224011, 224055, 224074, 224089, 224104, 224117, 224168, 224309, 224569, 224575, 224582, 224600, 224607, 224621, 224646, 224788, 224791, 224792, 224830, 224949, 224956, 224964, 225252, 225264, 225479, 225481, 225487, 225590, 225616, 225636, 225666, 225686, 225687, 225688, 225689, 225693, 225759, 225942, 225947, 225991, 225992, 226076, 226133, 226138, 226140, 226148, 226159, 226165, 226189, 226248, 226282, 226373, 226375, 226376, 226378, 226379, 226380, 226384, 226477, 226501, 226502, 226504, 226510, 226511, 226512, 226514, 226515, 226523, 226526, 226531, 226539, 226540, 226541, 226543, 226548, 226552, 226554, 226654, 226716, 226840, 226966, 226969, 226972, 227213, 227218, 227220, 227221, 227238, 227241, 227246, 227247, 227254, 227258, 227259, 227264, 227265, 227266, 227268, 227269, 227270, 227279, 227281, 227283, 227301, 227504, 227514, 227515, 227517, 227609, 227611, 227615, 227618, 227667, 227702, 227770, 227818, 227837, 227906, 227918, 227979, 228003, 228156, 228183, 228282, 228312, 228325, 228326, 228348, 228451, 228490, 228819, 228820, 228821, 228825, 228879, 228922, 228957, 229018, 229030, 229072, 229142, 229146, 229183, 229184, 229185, 229193, 229220, 229343, 229359, 229367, 229425, 229449, 229549, 229551, 229562, 229563, 229568, 229602, 229675, 229684, 229700, 229741, 230045, 230068, 230123, 230127, 230128, 230129, 230130, 230131, 230161, 230162, 230181, 230398, 230420, 230447, 230488, 230527, 230567, 230626, 230635, 230645, 230658, 230667, 230720, 230732, 230737, 230840, 230910, 230973, 231018, 231036, 231038, 231058, 231073, 231074, 231076, 231077, 231090, 231112, 231116, 231117, 231192, 231226, 231228, 231244, 231284, 231313, 231394, 231452, 231547, 231604, 231618, 231631, 231798, 231872, 231876, 231877, 231900, 231955, 232026, 232087, 232110, 232206, 232208, 232210, 232212, 232734, 232737, 232971, 233054, 233079, 233109, 233203, 233206, 233207, 233278, 233334, 233427, 233838, 233909, 234253, 234531, 234662, 234886, 234957, 235432, 235564, 235940, 236149, 236249, 236261, 236280, 236285, 236286, 236294, 236313, 236341, 236415, 236430, 236468, 236490, 236546, 236571, 236603, 236711, 236772, 236979, 237384, 237679, 237680, 237681, 237687, 237690, 237691, 237697, 237703, 237720, 237730, 237815, 237859, 238148, 238564, 238572, 238620, 238719, 238760, 238777, 238798, 238799, 238801, 238802, 238803, 238804, 238805, 238807, 238809, 238810, 238812, 238813, 238814, 238815, 238818, 238822, 238823, 238825, 238827, 238828, 238839, 238848, 238858, 238860, 238917, 238973, 239007, 239010, 239026, 239055, 239123, 239142, 239150, 239302, 239307, 239322, 239342, 239343, 239345, 239388, 239393, 239413, 239417, 239442, 239453, 239555, 239559, 239579, 239621, 239655, 239734, 239743, 239747, 239757, 239758, 239761, 239841, 239859, 239873, 239985, 239986, 239989, 239990, 239996, 239998, 240000, 240002, 240003, 240004, 240041, 240061, 240062, 240063, 240211, 240212, 240213, 240228, 240269, 240286, 240287, 240288, 240289, 240291, 240325, 240333, 240335, 240432, 240437, 240516, 240517, 240523, 240525, 240567, 240656, 240721, 240749, 240783, 240784, 240788, 240794, 240797, 240800, 240805, 240808, 240810, 240831, 240832, 240839, 241326, 241426, 241546, 241572, 241644, 241683, 241699, 241724, 241846, 241848, 241849, 241852, 241853, 241855, 241856, 241857, 241858, 241860, 241877, 241878, 241879, 241880, 241881, 241882, 241883, 241884, 241885, 241886, 241890, 241899, 241901, 241910, 242048, 242068, 242070, 242081, 242083, 242088, 242090, 242097, 242126, 242140, 242267, 242394, 242506, 242507, 242510, 242514, 242515, 242516, 242517, 242519, 242522, 242536, 242571, 242572, 242582, 242586, 242592, 242604, 242605, 242606, 242607, 242608, 242611, 242614, 242619, 242627, 242629, 242632, 242633, 242653, 242730, 242732, 242733, 242734, 242736, 242925, 242981, 242982, 242991, 242995, 242998, 242999, 243101, 243277, 243287, 243320, 243353, 243420, 243787, 243979, 244009, 244155, 244174, 244340, 244658, 244728, 244754, 244761, 244768, 244785, 244891, 244900, 244962, 245918, 245968, 245970, 246017, 246018, 246036, 246038, 246044, 246095, 246099, 246104, 246202, 246353, 246482, 246655, 246755, 246756, 246758, 246853, 246872, 246928, 246958, 246959, 246983, 246986, 246993, 246996, 247007, 247009, 247017, 247029, 247046, 247067, 247069, 247073, 247094, 247103, 247185, 247195, 247200, 247239, 247252, 247254, 247269, 247270, 247281, 247295, 247415, 247441, 247457, 247829, 247955, 248174, 248179, 248187, 248188, 248190, 248206, 248208, 248209, 248342, 248349, 248383, 248416, 248417, 248418, 248423, 248564, 248719, 248749, 248752, 248753, 248754, 248757, 248853, 248944, 248950, 248991, 249027, 249257, 249488, 249690, 249696, 250045, 250132, 250336, 250405, 250525, 250528, 250532, 250550, 250578, 250599, 250602, 250647, 250749, 250758, 250761, 250763, 250764, 250767, 250768, 250776, 250820, 250835, 250841, 250849, 250850, 250851, 250852, 250853, 250855, 250856, 250857, 250858, 250859, 250860, 250861, 250862, 250863, 250864, 250865, 250866, 250867, 250869, 250870, 250873, 250874, 250875, 250876, 250877, 250879, 250880, 250885, 250892, 250893, 250894, 250897, 250899, 250907, 250908, 250910, 250920, 250976, 250977, 250987, 250993, 250994, 251015, 251143, 251172, 251290, 251684, 251745, 251785, 251794, 251923, 251931, 251959, 251960, 251974, 251976, 251989, 251990, 251991, 251993, 251997, 252363, 252386, 252534, 252535, 252536, 252538, 252539, 252540, 252541, 252548, 252549, 252550, 252556, 252557, 252559, 252560, 252563, 252572, 252618, 252624, 252627, 252654, 252718, 252720, 252751, 252759, 252771, 252773, 252781, 252788, 252789, 252801, 252804, 252805, 252809, 252817, 252838, 252839, 252854, 252855, 252856, 252861, 252863, 252868, 252870, 252873, 252875, 252876, 252879, 252881, 252887, 252888, 252906, 252908, 252912, 252914, 252920, 252941, 252946, 252984, 252985, 252988, 252990, 252994, 253000, 253021, 253042, 253048, 253050, 253082, 253087, 253088, 253163, 253164, 253187, 253194, 253224, 253228, 253276, 253291, 253293, 253319, 253331, 253355, 253356, 253372, 253374, 253416, 253423, 253427, 253428, 253441, 253450, 253452, 253453, 253456, 253480, 253482, 253491, 253494, 253495, 253503, 253515, 253520, 253523, 253538, 253539, 253540, 253543, 253545, 253580, 253593, 253603, 253611, 253646, 253674, 253710, 253770, 253773, 253774, 253778, 253779, 253785, 253793, 253796, 253831, 253843, 253851, 253860, 253874, 253889, 253894, 253898, 253900, 253918, 253927, 253930, 253946, 253979, 254000, 254027, 254037, 254042, 254046, 254058, 254063, 254085, 254101, 254121, 254124, 254179, 254180, 254211, 254221, 254231, 254245, 254252, 254271, 254281, 254288, 254296, 254316, 254656, 254741, 254903, 254913, 254982, 255269, 255307, 255324, 255328, 255329, 255331, 255334, 255335, 255336, 255337, 255338, 255339, 255343, 255362, 255366, 255370, 255389, 255393, 255395, 255447, 255585, 255673, 255777, 255834, 255884, 255902, 255908, 255912, 255942, 255945, 256003, 256007, 256010, 256033, 256078, 256081, 256082, 256083, 256139, 256145, 256160, 256174, 256177, 256180, 256181, 256187, 256188, 256190, 256193, 256198, 256250, 256252, 256309, 256372, 256379, 256604, 256636, 256702, 256711, 256712, 256716, 256717, 256719, 256735, 256815, 256828, 256878, 256904, 256932, 256934, 257090, 257093, 257101, 257158, 257223, 257231, 257311, 257373, 257593, 257604, 257647, 257808, 257819, 257820, 257867, 257879, 257898, 257940, 257941, 257968, 257969, 257970, 257978, 257979, 258018, 258071, 258073, 258078, 258079, 258081, 258098, 258099, 258103, 258138, 258203, 258273, 258286, 258342, 258452, 258455, 258483, 258518, 258561, 258586, 258587, 258591, 258610, 258611, 258646, 258649, 258656, 258658, 258660, 258672, 258678, 258694, 258704, 258710, 258714, 258716, 258722, 258738, 258745, 258756, 258774, 258780, 258814, 258824, 258856, 258870, 258877, 258910, 259095, 259130, 259234, 259287, 259309, 259329, 259394, 259413, 259414, 259417, 259432, 259609, 259765, 259803, 259841, 259939, 259946, 259952, 259954, 259967, 260053, 260054, 260091, 260136, 260139, 260146, 260148, 260156, 260181, 260182, 260183, 260185, 260186, 260193, 260194, 260195, 260199, 260200, 260201, 260207, 260208, 260209, 260210, 260217, 260222, 260241, 260255, 260256, 260262, 260265, 260266, 260267, 260268, 260271, 260273, 260425, 260445, 260497, 260504, 260576, 260579, 260580, 260581, 260582, 260585, 260587, 260588, 260589, 260592, 260595, 260596, 260627, 260628, 260634, 260635, 260637, 260638, 260642, 260781, 260817, 260856, 260873, 260875, 260877, 260882, 260890, 260946, 261020, 261083, 261267, 261377, 261393, 261396, 261401, 261408, 261409, 261410, 261413, 261419, 261442, 261445, 261446, 261447, 261449, 261454, 261462, 261473, 261492, 261507, 261513, 261522, 261559, 261563, 261608, 261645, 261646, 261647, 261648, 261649, 261650, 261658, 261666, 261672, 261674, 261688, 261707, 261775, 261784, 261787, 261789, 261798, 261848, 261872, 262044, 262053, 262072, 262094, 262107, 262233, 262283, 262316, 262460, 262551, 262554, 262556, 262580, 262603, 262669, 262670, 262675, 262677, 262679, 262775, 262824, 262884, 262907, 262925, 262934, 262957, 263112, 263148, 263238, 263248, 263326, 263360, 263380, 263383, 263384, 263385, 263386, 263387, 263388, 263389, 263390, 263405, 263551, 263576, 263579, 263581, 263582, 263586, 263590, 263668, 263688, 263698, 263760, 263765, 263957, 263968, 263969, 263988, 264010, 264028, 264088, 264124, 264294, 264503, 264654, 264768, 264811, 264835, 264854, 264882, 264885, 264939, 265000, 265004, 265015, 265017, 265026, 265036, 265044, 265071, 265084, 265092, 265120, 265130, 265144, 265146, 265149, 265150, 265151, 265155, 265160, 265163, 265164, 265423, 265449, 265501, 265511, 265519, 265522, 265526, 265539, 265540, 265545, 265600, 265624, 265628, 265629, 265696, 265698, 265733, 265771, 265777, 265792, 265816, 265854, 265869, 265882, 265885, 265978, 265985, 265986, 266022, 266099, 266171, 266184, 266190, 266199, 266272, 266322, 266386, 266391, 266395, 266433, 266461, 266471, 266474, 266507, 266543, 266559, 266561, 266566, 266568, 266571, 266585, 266627, 266653, 266663, 266685, 266723, 266766, 266767, 266774, 266779, 266782, 266784, 266796, 266798, 266802, 266808, 266912, 267035, 267095, 267214, 267252, 267351, 267387, 267548, 267685, 267708, 267724, 267725, 267726, 267727, 267728, 267749, 267750, 267751, 267752, 267753, 267754, 267755, 267756, 267757, 267758, 267759, 267760, 267761, 267762, 267763, 267764, 267765, 267766, 267767, 267768, 267769, 267770, 267771, 267772, 267773, 267775, 267776, 267777, 267778, 267779, 267780, 267782, 267785, 267786, 267787, 267788, 267791, 267792, 267793, 267794, 267795, 267796, 267797, 267798, 267800, 267801, 267802, 267803, 267805, 267806, 267807, 267853, 267968, 267990, 268149, 268172, 268211, 268214, 268230, 268248, 268251, 268266, 268281, 268294, 268303, 268308, 268312, 268321, 268328, 268352, 268367, 268390, 268391, 268402, 268407, 268462, 268490, 268516, 268531, 268566, 268579, 268586, 268617, 268618, 268672, 268679, 268683, 268684, 268685, 268686, 268687, 268688, 268689, 268691, 268692, 268693, 268694, 268695, 268697, 268698, 268699, 268700, 268701, 268702, 268703, 268706, 268707, 268709, 268711, 268712, 268713, 268715, 268716, 268717, 268718, 268719, 268722, 268723, 268726, 268727, 268728, 268730, 268733, 268734, 268735, 268737, 268739, 268740, 268741, 268742, 268743, 268744, 268745, 268755, 268762, 268771, 268772, 268775, 268776, 268777, 268779, 268782, 268786, 268787, 268788, 268791, 268793, 268794, 268799, 268800, 268801, 268804, 268805, 268808, 268810, 268812, 268825, 268826, 268827, 268828, 268830, 268831, 269091, 269097, 269109, 269145, 269152, 269155, 269304, 269360, 269408, 269451, 269475, 269490, 269557, 269572, 269626, 269639, 269669, 269673, 269676, 269792, 269794, 269936, 269939, 269944, 269945, 269947, 269991, 270017, 270032, 270076, 270084, 270124, 270125, 270228, 270240, 270244, 270247, 270256, 270258, 270261, 270262, 270263, 270265, 270269, 270271, 270273, 270275, 270276, 270279, 270280, 270281, 270282, 270284, 270285, 270286, 270287, 270289, 270292, 270293, 270294, 270295, 270296, 270298, 270299, 270300, 270332, 270444, 270458, 270468, 270637, 270775, 270801, 270809, 270811, 270841, 270843, 270844, 270935, 270966, 271013, 271015, 271022, 271039, 271059, 271113, 271176, 271194, 271195, 271196, 271199, 271200, 271251, 271260, 271261, 271266, 271268, 271274, 271275, 271277, 271280, 271282, 271289, 271312, 271313, 271314, 271317, 271319, 271321, 271323, 271326, 271327, 271329, 271330, 271333, 271334, 271336, 271340, 271342, 271347, 271357, 271358, 271365, 271369, 271381, 271384, 271386, 271395, 271403, 271404, 271413, 271418, 271420, 271430, 271444, 271447, 271450, 271451, 271469, 271488, 271489, 271494, 271529, 271555, 271626, 271664, 271808, 271809, 271811, 271817, 271823, 271828, 271830, 271831, 271832, 271833, 271834, 271838, 271839, 271840, 271841, 271842, 271846, 271848, 271857, 271858, 271860, 271861, 271865, 271866, 271869, 271871, 271874, 271875, 271882, 271884, 271886, 271887, 271888, 271889, 271893, 271895, 271897, 271900, 271903, 271904, 271927, 271930, 271933, 271937, 271940, 271941, 271942, 271943, 271945, 271946, 271950, 271951, 271956, 271959, 271960, 271961, 271969, 271970, 271972, 272057, 272089, 272135, 272137, 272169, 272328, 272333, 272348, 272357, 272358, 272366, 272367, 272375, 272389, 272391, 272415, 272423, 272458, 272484, 272485, 272492, 272501, 272549, 272550, 272573, 272592, 272594, 272596, 272601, 272603, 272628, 272650, 272652, 272657, 272671, 272719, 272855, 272866, 272883, 272885, 272898, 272900, 272923, 273002, 273055, 273076, 273277, 273469, 273746, 273773, 273806, 273807, 273808, 273809, 273810, 273811, 273812, 273813, 273818, 273827, 273832, 273833, 273834, 273838, 273880, 273886, 273889, 273947, 274097, 274124, 274240, 274251, 274662, 274667, 274675, 274911, 274967, 274993, 275066, 275238, 275312, 275316, 275653, 275939, 276075, 276119, 276143, 276336, 276341, 276352, 276365, 276380, 276385, 276402, 276638, 276659, 276734, 276736, 276759, 276763, 276773, 276796, 276800, 276804, 276892, 276959, 276967, 276972, 276974, 276984, 276986, 277003, 277009, 277012, 277015, 277016, 277017, 277019, 277025, 277027, 277028, 277029, 277030, 277032, 277039, 277040, 277045, 277047, 277297, 277319, 277444, 277502, 277503, 277530, 277533, 277569, 277631, 277675, 277735, 277805, 277815, 277830, 277831, 277838, 277845, 277873, 277895, 277960, 277983, 277995, 278048, 278063, 278064, 278078, 278203, 278236, 278245, 278267, 278270, 278328, 278335, 278491, 278505, 278617, 278642, 278704, 278812, 278833, 278852, 278894, 278895, 278896, 278897, 278900, 278905, 278906, 278915, 278919, 278921, 278950, 279027, 279037, 279056, 279080, 279120, 279143, 279156, 279160, 279162, 279163, 279164, 279203, 279228, 279233, 279241, 279254, 279286, 279295, 279332, 279364, 279366, 279367, 279392, 279463, 279465, 279486, 279487, 279499, 279522, 279594, 279736, 279746, 279805, 279819, 279823, 279829, 279830, 279860, 279862, 279872, 279878, 279886, 279888, 279889, 279890, 279902, 279903, 279920, 279956, 279958, 279979, 279980, 279982, 279983, 279988, 280022, 280023, 280031, 280037, 280040, 280054, 280058, 280062, 280063, 280064, 280066, 280070, 280071, 280075, 280137, 280147, 280151, 280152, 280156, 280212, 280213, 280214, 280215, 280216, 280257, 280267, 280286, 280287, 280305, 280307, 280308, 280328, 280331, 280332, 280337, 280340, 280347, 280350, 280351, 280352, 280353, 280354, 280355, 280357, 280358, 280359, 280360, 280361, 280362, 280363, 280364, 280374, 280375, 280376, 280377, 280378, 280380, 280381, 280382, 280446, 280476, 280537, 280543, 280636, 280637, 280638, 280687, 280705, 280711, 280713, 280729, 280779, 280787, 280788, 280824, 280826, 280827, 280837, 280872, 280953, 280954, 280955, 280956, 280957, 280959, 280960, 280984, 280987, 280989, 280990, 280994, 280996, 280998, 280999, 281000, 281001, 281005, 281008, 281012, 281014, 281018, 281021, 281024, 281025, 281026, 281027, 281028, 281032, 281033, 281034, 281076, 281393, 281410, 281460, 281578, 281583, 281645, 281758, 281778, 281817, 281823, 281827, 281831, 281833, 281843, 281844, 281845, 281846, 281847, 281848, 281849, 281851, 281852, 281853, 281854, 281857, 281858, 281859, 281860, 281861, 281867, 281871, 281872, 281877, 281881, 281882, 281883, 281884, 281885, 281886, 281888, 281890, 281892, 281893, 281894, 281895, 281897, 281898, 281899, 281901, 281904, 281908, 281911, 281914, 281961, 282032, 282033, 282132, 282315, 282329, 282331, 282333, 282334, 282335, 282336, 282468, 282594, 282617, 282660, 282708, 282709, 282710, 282711, 282714, 282715, 282717, 282719, 282724, 282725, 282727, 282728, 282729, 282730, 282731, 282732, 282733, 282734, 282735, 282736, 282737, 282741, 282761, 282796, 282815, 282891, 283101, 283164, 283186, 283189, 283191, 283192, 283193, 283224, 283230, 283260, 283409, 283416, 283424, 283438, 283458, 283459, 283489, 283502, 283503, 283504, 283527, 283541, 283672, 283686, 283735, 283741, 283860, 283887, 283909, 284106, 284109, 284110, 284111, 284114, 284118, 284126, 284233, 284327, 284333, 284334, 284413, 284452, 284592, 284596, 284601, 284743, 284853, 284854, 284857, 284859, 284862, 284865, 284867, 284870, 284876, 284893, 284912, 284913, 284914, 284928, 284932, 285082, 285093, 285116, 285146, 285169, 285356, 285400, 285483, 285573, 285585, 285614, 285628, 285681, 286077, 286078, 286079, 286264, 286382, 286384, 286388, 286391, 286393, 286395, 286396, 286397, 286398, 286401, 286403, 286419, 286441, 286443, 286449, 286456, 286465, 286467, 286473, 286481, 286482, 286484, 286486, 286624, 286626, 286627, 286908, 286936, 286945, 287059, 287302, 287322, 287349, 287371, 287395, 287455, 287478, 287489, 287500, 287505, 287653, 287654, 287672, 287684, 287719, 287725, 287726, 287727, 287774, 287776, 287778, 287779, 287789, 287800, 287874, 287882, 287884, 287931, 288012, 288029, 288096, 288163, 288314, 288336, 288408, 288411, 288514, 288539, 288565, 288574, 288707, 289001, 289050, 289114, 289206, 289212, 289224, 289242, 289355, 289360, 289368, 289565, 289568, 289570, 289571, 289572, 289573, 289574, 289575, 289576, 289577, 289579, 289641, 289684, 289734, 289857, 289906, 289907, 289908, 289949, 290009, 290058, 290059, 290060, 290061, 290063, 290066, 290069, 290110, 290174, 290206, 290218, 290220, 290278, 290390, 290465, 290467, 290702, 290797, 290798, 290801, 290802, 290803, 290804, 290805, 290822, 290889, 290893, 291190, 291493, 291505, 291512, 291516, 291527, 291548, 291622, 291676, 291677, 291681, 291686, 291689, 291701, 291716, 291724, 291725, 291735, 291754, 291756, 291761, 291763, 291764, 291783, 291792, 291805, 291819, 291827, 291830, 291833, 291835, 291837, 291839, 291841, 291842, 291844, 291849, 291850, 291852, 291859, 291860, 291865, 291867, 291869, 291882, 291898, 291905, 291907, 291924, 291932, 291935, 291998, 291999, 292038, 292041, 292042, 292043, 292075, 292089, 292090, 292110, 292115, 292126, 292135, 292153, 292266, 292267, 292270, 292273, 292276, 292277, 292280, 292281, 292283, 292284, 292285, 292286, 292296, 292297, 292298, 292299, 292300, 292301, 292302, 292303, 292473, 292511, 292533, 292760, 292763, 292768, 292775, 292782, 292789, 292814, 292817, 292832, 292834, 292836, 292841, 292851, 292859, 292862, 292863, 292866, 292868, 292869, 292871, 292877, 292886, 292894, 292901, 292905, 292942, 292943, 292944, 292950, 292971, 292972, 292978, 292980, 293056, 293321, 293327, 293490, 293569, 293572, 293729, 293732, 293875, 293904, 293909, 293920, 293921, 293923, 293927, 293953, 294057, 294071, 294105, 294106, 294110, 294115, 294116, 294120, 294122, 294135, 294141, 294143, 294144, 294190, 294198, 294245, 294318, 294348, 294409, 294411, 294418, 294436, 294448, 294468, 294477, 294482, 294521, 294540, 294561, 294606, 294619, 294620, 294640, 294686, 294707, 294742, 294799, 294836, 294839, 294840, 294852, 294873, 294879, 294881, 294924, 295009, 295010, 295072, 295075, 295079, 295097, 295125, 295146, 295156, 295217, 295243, 295248, 295262, 295277, 295280, 295284, 295290, 295291, 295293, 295294, 295319, 295425, 295461, 295469, 295504, 295553, 296069, 296074, 296101, 296125, 296193, 296331, 296399, 296403, 296405, 296445, 296448, 296452, 296507, 296509, 296525, 296526, 296528, 296530, 296532, 296536, 296540, 296541, 296548, 296549, 296553, 296554, 296555, 296557, 296558, 296559, 296560, 296561, 296563, 296564, 296566, 296567, 296569, 296577, 296578, 296579, 296580, 296581, 296583, 296585, 296586, 296587, 296589, 296590, 296591, 296592, 296594, 296596, 296597, 296628, 296647, 296709, 296710, 296737, 296763, 296807, 296992, 297068, 297157, 297159, 297163, 297181, 297188, 297189, 297614, 297667, 297717, 297749, 297750, 297751, 297752, 297753, 297754, 297756, 297757, 297758, 297759, 297761, 297763, 297764, 297766, 297768, 297769, 297770, 297771, 297772, 297801, 297806, 297814, 297815, 297816, 297817, 297819, 297829, 297842, 298012, 298296, 298501, 298650, 298661, 298766, 298779, 298781, 298782, 298823, 298826, 298828, 298836, 298838, 298839, 298853, 298926, 299011, 299018, 299021, 299022, 299024, 299025, 299028, 299029, 299030, 299034, 299044, 299053, 299054, 299055, 299125, 299126, 299500, 299507, 299525, 299548, 299549, 299550, 299551, 299552, 299553, 299554, 299555, 299556, 299557, 299559, 299560, 299561, 299562, 299565, 299566, 299567, 299568, 299569, 299570, 299571, 299572, 299573, 299585, 299601, 299622, 299662, 299685, 299696, 299733, 299741, 299743, 299744, 299745, 299843, 299845, 299851, 299854, 299862, 299904, 299906, 299917, 299925, 300122, 300205, 300226, 300237, 300238, 300357, 300373, 300434, 300457, 300468, 300505, 300513, 300515, 300516, 300517, 300711, 300713, 300714, 300730, 300733, 300739, 300741, 300747, 300748, 300769, 300772, 300774, 300776, 300780, 300781, 300782, 300783, 300784, 300787, 300791, 300795, 300796, 300797, 300799, 300800, 300801, 300802, 300803, 300833, 300854, 300857, 300863, 300867, 300868, 300993, 301015, 301031, 301050, 301051, 301108, 301121, 301129, 301159, 301167, 301185, 301189, 301190, 301215, 301232, 301358, 301368, 301369, 301405, 301416, 301437, 301443, 301449, 301450, 301457, 301461, 301463, 301470, 301511, 301655, 301669, 301679, 301720, 301753, 301802, 301842, 301844, 301880, 301884, 301887, 301888, 301889, 301906, 302006, 302039, 302054, 302071, 302073, 302087, 302099, 302102, 302103, 302126, 302191, 302215, 302242, 302251, 302252, 302354, 302365, 302457, 302471, 302580, 302758, 302824, 302825, 302827, 302829, 302830, 302831, 302832, 302833, 302902, 302903, 302904, 302905, 302906, 303046, 303097, 303098, 303136, 303151, 303160, 303235, 303242, 303243, 303660, 303661, 303662, 303663, 303664, 303679, 303702, 303706, 303709, 303710, 303721, 303997, 304002, 304013, 304053, 304088, 304097, 304186, 304244, 304251, 304259, 304274, 304434, 304435, 304436, 304438, 304439, 304440, 304441, 304442, 304443, 304444, 304445, 304446, 304447, 304594, 304624, 304674, 304697, 304844, 305121, 305303, 305393, 305398, 305434, 305556, 305591, 305625, 305638, 305644, 305648, 305649, 305650, 305762, 305766, 305768, 305775, 305776, 305783, 305794, 305806, 305819, 305857, 305861, 305863, 305866, 306102, 306114, 306126, 306134, 306155, 306212, 306214, 306328, 306460, 306461, 306477, 306478, 306480, 306483, 306526, 306547, 306548, 306552, 306562, 306581, 306588, 306589, 306635, 306732, 306735, 306744, 306746, 306754, 306755, 306758, 306766, 306776, 306777, 306779, 306783, 306785, 306786, 306787, 306794, 306799, 306801, 306809, 306811, 306815, 306820, 306821, 306849, 306856, 306859, 306861, 307085, 307162, 307169, 307253, 307254, 307255, 307256, 307257, 307258, 307259, 307261, 307262, 307263, 307264, 307265, 307266, 307267, 307268, 307270, 307272, 307274, 307278, 307279, 307280, 307281, 307282, 307283, 307284, 307285, 307286, 307287, 307288, 307289, 307290, 307293, 307294, 307295, 307298, 307299, 307301, 307302, 307303, 307304, 307305, 307310, 307316, 307319, 307320, 307322, 307324, 307325, 307326, 307327, 307330, 307332, 307333, 307334, 307335, 307338, 307339, 307340, 307341, 307342, 307344, 307346, 307350, 307351, 307355, 307356, 307361, 307366, 307367, 307369, 307372, 307373, 307374, 307375, 307376, 307378, 307379, 307380, 307381, 307382, 307386, 307387, 307390, 307391, 307393, 307395, 307396, 307397, 307398, 307399, 307403, 307406, 307410, 307411, 307414, 307416, 307417, 307418, 307420, 307422, 307425, 307426, 307427, 307428, 307432, 307437, 307444, 307465, 307556, 307564, 307567, 307599, 307602, 307604, 307900, 308144, 308155, 308191, 308192, 308193, 308194, 308196, 308203, 308208, 308210, 308211, 308217, 308218, 308222, 308227, 308246, 308254, 308364, 308365, 308383, 308430, 308450, 308467, 308468, 308674, 308677, 308679, 308680, 308681, 308682, 308683, 308684, 308689, 308845, 308848, 308849, 308850, 308857, 308868, 308877, 308878, 308880, 308882, 308884, 308900, 308904, 308916, 308917, 308955, 308973, 308979, 308998, 309007, 309008, 309013, 309020, 309030, 309202, 309204, 309299, 309685, 309784, 309790, 309808, 309834, 309875, 309892, 309894, 309994, 310046, 310067, 310068, 310246, 310247, 310265, 310295, 310299, 310342, 310349, 310367, 310368, 310372, 310381, 310382, 310383, 310519, 310521, 310525, 310528, 310530, 310532, 310542, 310545, 310547, 310553, 310554, 310560, 310563, 310586, 310589, 310694, 310756, 310759, 310760, 310761, 310762, 310763, 310764, 310768, 310771, 310775, 310846, 310847, 310850, 310851, 310852, 310856, 310859, 310861, 310862, 310863, 310868, 310870, 310871, 310872, 310873, 310876, 310882, 310883, 310884, 310885, 310886, 310966, 310972, 311040, 311051, 311089, 311200, 311203, 311239, 311240, 311242, 311244, 311245, 311336, 311339, 311342, 311345, 311346, 311347, 311348, 311349, 311350, 311354, 311355, 311357, 311429, 311457, 311462, 311480, 311495, 311497, 311516, 311517, 311540, 311577, 311617, 311630, 311644, 311657, 311660, 311808, 311820, 311890, 311960, 311963, 311975, 311978, 312000, 312018, 312125, 312152, 312192, 312273, 312319, 312334, 312339, 312340, 312352, 312364, 312394, 312430, 312485, 312489, 312542, 312767, 312778, 312785, 312787, 312791, 312792, 312794, 312796, 312799, 312800, 312801, 312876, 312889, 312896, 312897, 312898, 312899, 312900, 312904, 312922, 313029, 313030, 313031, 313032, 313034, 313038, 313039, 313041, 313042, 313058, 313076, 313078, 313205, 313231, 313351, 313394, 313395, 313396, 313401, 313402, 313421, 313424, 313425, 313431, 313438, 313529, 313535, 313555, 313561, 313564, 313577, 313602, 313604, 313609, 313618, 313681, 313701, 313712, 313720, 313727, 313743, 313746, 313752, 313772, 313776, 313777, 313793, 313829, 313862, 313984, 314080, 314086, 314087, 314088, 314089, 314090, 314091, 314092, 314093, 314094, 314095, 314096, 314097, 314098, 314100, 314101, 314130, 314148, 314280, 314288, 314322, 314340, 314342, 314386, 314398, 314404, 314427, 314437, 314451, 314453, 314454, 314462, 314473, 314475, 314492, 314599, 314703, 314760, 314762, 314764, 314816, 314841, 314846, 314847, 314995, 315000, 315033, 315057, 315131, 315132, 315133, 315135, 315218, 315219, 315251, 315266, 315334, 315335, 315336, 315337, 315338, 315339, 315340, 315341, 315342, 315409, 315411, 315415, 315421, 315446, 315447, 315448, 315449, 315450, 315451, 315452, 315453, 315456, 315460, 315461, 315462, 315464, 315468, 315472, 315473, 315474, 315477, 315479, 315480, 315481, 315482, 315483, 315484, 315486, 315489, 315521, 315524, 315555, 315590, 315613, 315616, 315646, 315653, 315659, 315674, 315681, 315686, 315687, 315688, 315691, 315692, 315693, 315694, 315700, 315705, 315707, 315710, 315711, 315713, 315715, 315717, 315718, 315719, 315720, 315723, 315724, 315725, 315727, 315728, 315729, 315730, 315731, 315732, 315734, 315736, 315737, 315738, 315743, 315744, 315747, 315749, 315750, 315751, 315752, 315755, 315757, 315759, 315760, 315764, 315768, 315771, 315772, 315774, 315775, 315776, 315777, 315778, 315779, 315781, 315783, 315784, 315785, 315786, 315787, 315788, 315789, 315791, 315792, 315793, 315798, 315802, 315803, 315806, 315808, 315897, 315917, 315935, 315993, 316151, 316172, 316216, 316217, 316218, 316221, 316222, 316223, 316227, 316274, 316279, 316291, 316292, 316294, 316296, 316297, 316323, 316357, 316391, 316392, 316394, 316461, 316510, 316696, 316710, 316714, 316757, 316763, 316771, 316773, 316776, 316810, 316817, 316821, 316822, 316823, 316839, 316846, 316850, 316859, 316860, 316869, 316870, 316871, 316877, 316890, 316891, 316892, 316909, 316918, 316919, 316920, 316921, 316924, 316938, 316939, 316940, 316943, 316944, 316953, 316954, 316955, 316956, 316968, 316974, 316975, 316977, 316978, 316979, 316983, 316986, 317003, 317014, 317027, 317042, 317054, 317204, 317261, 317568, 317570, 317571, 317578, 317579, 317580, 317589, 317644, 317676, 317738, 318032, 318047, 318048, 318099, 318165, 318173, 318174, 318175, 318177, 318178, 318179, 318180, 318181, 318183, 318210, 318211, 318241, 318242, 318403, 318405, 318406, 318424, 318427, 318428, 318429, 318457, 318465, 318466, 318470, 318506, 318567, 318620, 318622, 318770, 318784, 318936, 318997, 319004, 319195, 319223, 319277, 319282, 319292, 319362, 319381, 319401, 319446, 319453, 319455, 319456, 319459, 319463, 319470, 319471, 319472, 319473, 319475, 319476, 319480, 319488, 319499, 319502, 319510, 319511, 319657, 319661, 319676, 319681, 319716, 319719, 319746, 319759, 319780, 319807, 319818, 319868, 319870, 319889, 319902, 319903, 319920, 319933, 319964, 320026, 320053, 320077, 320205, 320491, 320492, 320509, 320864, 320937, 320987, 320988, 321039, 321048, 321050, 321079, 321137, 321160, 321183, 321184, 321185, 321224, 321225, 321226, 321227, 321231, 321232, 321237, 321245, 321249, 321251, 321253, 321255, 321260, 321261, 321267, 321269, 321270, 321271, 321274, 321276, 321278, 321280, 321298, 321300, 321301, 321302, 321303, 321304, 321305, 321306, 321307, 321311, 321313, 321317, 321318, 321320, 321322, 321323, 321324, 321325, 321329, 321330, 321331, 321336, 321337, 321341, 321342, 321343, 321344, 321346, 321347, 321349, 321351, 321352, 321353, 321355, 321356, 321357, 321367, 321369, 321370, 321372, 321373, 321374, 321375, 321377, 321378, 321379, 321381, 321383, 321384, 321385, 321386, 321387, 321388, 321389, 321390, 321393, 321394, 321395, 321396, 321397, 321399, 321400, 321401, 321402, 321403, 321404, 321405, 321406, 321407, 321408, 321409, 321410, 321411, 321412, 321413, 321415, 321419, 321420, 321421, 321422, 321424, 321426, 321427, 321428, 321429, 321430, 321431, 321432, 321433, 321436, 321438, 321439, 321440, 321441, 321442, 321443, 321444, 321446, 321447, 321448, 321449, 321450, 321451, 321452, 321453, 321454, 321455, 321456, 321457, 321458, 321459, 321460, 321461, 321462, 321463, 321465, 321466, 321467, 321470, 321471, 321472, 321473, 321474, 321475, 321476, 321477, 321478, 321479, 321480, 321481, 321483, 321485, 321486, 321487, 321488, 321489, 321490, 321491, 321492, 321493, 321496, 321497, 321498, 321499, 321500, 321501, 321502, 321503, 321504, 321505, 321507, 321508, 321512, 321513, 321514, 321515, 321516, 321517, 321518, 321519, 321520, 321521, 321524, 321525, 321526, 321527, 321529, 321530, 321531, 321533, 321534, 321537, 321538, 321539, 321540, 321541, 321542, 321545, 321547, 321548, 321549, 321550, 321551, 321553, 321556, 321559, 321560, 321562, 321564, 321565, 321566, 321568, 321569, 321570, 321571, 321572, 321573, 321575, 321576, 321578, 321579, 321580, 321581, 321582, 321583, 321586, 321587, 321590, 321591, 321592, 321593, 321595, 321596, 321598, 321599, 321600, 321601, 321602, 321603, 321604, 321605, 321606, 321607, 321609, 321610, 321611, 321612, 321613, 321614, 321615, 321617, 321620, 321622, 321623, 321624, 321626, 321629, 321632, 321633, 321636, 321637, 321638, 321639, 321640, 321641, 321642, 321643, 321644, 321645, 321647, 321648, 321649, 321650, 321651, 321717, 321718, 321719, 321723, 321726, 321728, 321858, 321877, 321879, 321889, 321900, 321903, 321905, 321925, 321957, 321980, 322018, 322192, 322193, 322197, 322198, 322200, 322201, 322202, 322204, 322205, 322206, 322207, 322208, 322209, 322211, 322212, 322213, 322216, 322218, 322220, 322221, 322223, 322231, 322236, 322240, 322243, 322244, 322247, 322297, 322445, 322549, 322567, 322578, 322586, 322768, 322797, 322988, 322998, 323005, 323086, 323132, 323151, 323171, 323228, 323275, 323276, 323323, 323373, 323433, 323447, 323473, 323475, 323476, 323572, 323584, 323588, 323589, 323603, 323615, 323734, 323736, 323762, 323764, 323770, 323927, 323928, 323935, 324178, 324232, 324255, 324256, 324257, 324258, 324259, 324260, 324261, 324262, 324263, 324264, 324277, 324328, 324369, 324376, 324379, 324380, 324381, 324382, 324403, 324404, 324405, 324406, 324407, 324408, 324409, 324410, 324411, 324413, 324414, 324416, 324417, 324418, 324419, 324421, 324422, 324423, 324424, 324425, 324462, 324475, 324503, 324523, 324543, 324607, 324618, 324620, 324711, 324715, 324717, 324720, 324722, 324726, 324729, 324733, 324735, 324737, 324738, 324739, 324740, 324752, 324755, 324757, 324758, 324759, 324760, 324761, 324762, 324763, 324764, 324765, 324766, 324767, 324768, 324771, 324772, 324773, 324774, 324775, 324776, 324777, 324778, 324779, 324780, 324781, 324783, 324784, 324787, 324789, 324790, 324791, 324952, 325198, 325214, 325231, 325241, 325243, 325249, 325268, 325286, 325315, 325327, 325330, 325347, 325358, 325365, 325379, 325417, 325443, 325482, 325490, 325540, 325545, 325605, 325692, 325756, 325779, 325829, 325834, 325873, 325927, 325984, 326034, 326073, 326147, 326236, 326238, 326243, 326244, 326245, 326247, 326251, 326253, 326262, 326264, 326270, 326271, 326272, 326273, 326275, 326339, 326340, 326341, 326342, 326343, 326345, 326346, 326347, 326400, 326768, 326814, 326816, 326931, 326943, 326995, 327037, 327038, 327039, 327040, 327059, 327061, 327063, 327068, 327166, 327167, 327321, 327330, 327591, 327630, 327680, 327684, 327715, 327751, 327752, 327755, 327782, 327791, 327800, 327812, 327819, 327837, 327838, 327839, 327850, 327990, 328187, 328189, 328191, 328194, 328196, 328199, 328202, 328206, 328208, 328211, 328214, 328272, 328273, 328292, 328366, 328612, 328737, 328748, 328787, 328800, 328819, 328821, 328826, 328846, 328885, 328953, 329089, 329116, 329119, 329123, 329128, 329131, 329138, 329139, 329141, 329143, 329144, 329149, 329172, 329274, 329303, 329349, 329353, 329354, 329369, 329464, 329466, 329574, 329630, 329685, 329722, 329744, 329762, 329790, 329797, 329821, 329838, 329839, 329840, 329841, 329842, 329843, 329844, 329846, 329847, 329848, 329849, 329850, 329859, 329972, 330052, 330244, 330251, 330268, 330269, 330270, 330271, 330301, 330305, 330307, 330308, 330309, 330313, 330316, 330318, 330319, 330323, 330330, 330331, 330338, 330339, 330341, 330342, 330352, 330355, 330357, 330358, 330359, 330361, 330363, 330367, 330369, 330373, 330376, 330378, 330379, 330380, 330386, 330387, 330392, 330394, 330396, 330398, 330405, 330433, 330479, 330566, 330618, 330620, 330635, 330679, 330685, 330694, 330700, 330701, 330702, 330703, 330708, 330709, 330711, 330713, 330723, 330795, 330850, 330870, 330880, 330890, 330950, 331055, 331058, 331205, 331321, 331468, 331510, 331632, 331633, 331636, 331637, 331714, 331755, 331880, 331941, 331967, 332035, 332046, 332054, 332055, 332056, 332073, 332078, 332204, 332206, 332208, 332212, 332229, 332249, 332268, 332269, 332278, 332293, 332294, 332531, 333509, 333519, 333524, 333586, 333665, 333919, 333985, 333992, 334004, 334053, 334073, 334081, 334212, 334398, 334488, 334489, 334495, 334498, 334500, 334501, 334504, 334631, 334759, 334818, 334833, 334836, 335003, 335123, 335161, 335256, 335434, 335519, 335539, 335540, 335560, 335591, 335829, 335835, 335840, 335854, 335879, 335969, 336082, 336188, 336189, 336190, 336192, 336193, 336194, 336195, 336196, 336198, 336199, 336200, 336201, 336282, 336298, 336432, 336469, 336484, 336495, 336510, 336512, 336514, 336522, 336523, 336526, 336528, 336535, 336540, 336541, 336546, 336547, 336552, 336555, 336559, 336560, 336566, 336569, 336570, 336574, 336575, 336577, 336580, 336581, 336590, 336599, 336600, 336602, 336646, 336655, 336656, 336662, 336678, 336680, 336683, 336685, 336687, 336695, 336713, 336719, 336735, 336736, 336740, 336753, 336757, 336761, 336781, 336783, 336786, 336809, 336810, 336821, 336823, 336831, 336832, 336855, 336858, 336869, 336882, 337034, 337046, 337119, 337147, 337215, 337320, 337326, 337327, 337334, 337361, 337381, 337443, 337490, 337491, 337492, 337493, 337494, 337495, 337496, 337498, 337499, 337515, 337532, 337533, 337534, 337541, 337542, 337546, 337547, 337548, 337552, 337557, 337565, 337571, 337574, 337575, 337577, 337579, 337582, 337583, 337584, 337585, 337587, 337591, 337595, 337596, 337597, 337598, 337599, 337605, 337615, 337617, 337622, 337627, 337628, 337629, 337630, 337640, 337647, 337652, 337656, 337660, 337664, 337665, 337667, 337672, 337675, 337676, 337677, 337679, 337680, 337690, 337692, 337693, 337703, 337705, 337707, 337708, 337709, 337711, 337718, 337722, 337724, 337725, 337735, 337736, 337737, 337773, 337776, 337785, 337800, 337808, 337815, 337823, 337824, 337826, 337843, 337850, 337854, 337862, 337863, 337877, 337895, 337908, 337912, 337913, 337921, 337927, 337939, 337940, 338072, 338077, 338139, 338162, 338173, 338223, 338234, 338251, 338270, 338272, 338280, 338282, 338283, 338287, 338290, 338295, 338321, 338324, 338369, 338375, 338382, 338412, 338413, 338440, 338566, 338628, 338678, 338725, 338754, 338755, 338795, 338827, 338831, 338849, 338877, 338898, 338909, 338911, 338919, 338956, 338981, 338984, 338992, 339000, 339013, 339024, 339041, 339174, 339176, 339179, 339456, 339463, 339468, 339469, 339471, 339473, 339477, 339479, 339490, 339508, 339535, 339589, 339685, 339723, 339768, 339782, 339848, 339851, 339852, 339858, 339877, 339879, 339886, 339889, 339893, 339894, 339895, 339901, 339902, 339903, 339904, 339907, 339908, 339918, 339919, 339922, 339923, 339924, 339928, 339929, 339948, 339952, 340067, 340094, 340112, 340124, 340159, 340165, 340166, 340225, 340227, 340229, 340230, 340240, 340251, 340320, 340323, 340324, 340325, 340328, 340329, 340330, 340334, 340343, 340391, 340497, 340498, 340500, 340503, 340571, 340724, 340727, 340740, 340744, 340745, 340762, 340764, 340780, 340783, 340785, 340812, 340971, 341081, 341101, 341287, 341288, 341348, 341364, 341366, 341370, 341644, 341742, 341814, 341821, 341823, 341824, 341865, 342027, 342028, 342033, 342034, 342035, 342036, 342039, 342042, 342043, 342045, 342046, 342048, 342049, 342058, 342059, 342062, 342071, 342073, 342074, 342075, 342076, 342082, 342083, 342135, 342140, 342141, 342229, 342289, 342347, 342413, 342443, 342496, 342517, 342626, 342662, 342830, 342920, 342921, 342922, 342923, 342924, 342934, 342968, 342970, 343628, 343946, 344000, 344052, 344083, 344089, 344170, 344214, 344262, 344272, 344351, 344399, 344505, 344535, 344601, 344675, 344688, 344699, 344705, 344715, 344719, 344720, 344758, 344771, 344772, 344773, 344774, 344802, 344816, 344889, 345252, 345317, 345349, 345365, 345366, 345374, 345406, 345412, 345417, 345436, 345443, 345506, 345687, 345692, 345821, 345871, 346008, 346009, 346017, 346018, 346205, 346428, 346431, 346516, 346568, 346608, 346620, 346621, 346652, 346672, 346678, 346689, 346696, 346878, 346883, 346885, 346923, 346997, 347041, 347061, 347062, 347089, 347097, 347238, 347313, 347441, 347442, 347459, 347471, 347478, 347482, 347498, 347734, 347741, 347743, 347796, 347798, 347806, 347810, 347814, 347822, 347825, 347839, 347840, 347841, 347849, 347850, 347883, 347885, 347886, 347888, 347889, 347890, 347901, 347902, 347903, 347905, 347908, 347912, 347918, 347919, 347920, 347922, 347923, 347924, 347926, 347927, 347938, 347939, 347940, 347941, 347942, 347987, 348012, 348015, 348018, 348047, 348076, 348083, 348084, 348111, 348177, 348230, 348235, 348354, 348372, 348374, 348391, 348510, 348526, 348538, 348547, 348612, 348637, 348640, 348653, 348686, 348692, 348713, 348739, 348808, 348815, 348817, 348827, 348987, 349132, 349206, 349245, 349285, 349344, 349353, 349376, 349385, 349400, 349438, 349450, 349455, 349558, 349628, 349691, 349754, 349756, 349768, 349776, 349791, 349792, 349794, 349795, 349808, 349830, 349835, 349944, 349962, 350002, 350031, 350112, 350170, 350265, 350281, 350307, 350318, 350321, 350323, 350360, 350362, 350367, 350411, 350413, 350414, 350417, 350423, 350424, 350425, 350498, 350501, 350537, 350549, 350674, 350704, 350726, 350739, 350749, 350754, 350763, 350766, 350774, 350793, 350816, 350818, 350878, 350882, 350976, 350989, 351077, 351091, 351093, 351124, 351128, 351134, 351177, 351197, 351198, 351204, 351207, 351223, 351390, 351551, 351555, 351619, 351808, 351818, 351850, 352026, 352031, 352036, 352040, 352043, 352049, 352051, 352054, 352056, 352060, 352061, 352064, 352065, 352073, 352131, 352141, 352241, 352312, 352373, 352377, 352467, 352579, 352714, 352716, 352722, 352794, 352827, 352829, 352843, 353016, 353052, 353133, 353153, 353162, 353198, 353265, 353288, 353413, 353428, 353475, 353592, 353615, 353742, 353939, 354104, 354156, 354287, 354542, 354696, 354699, 354727, 354964, 354965, 354966, 355019, 355021, 355069, 355118, 355128, 355129, 355138, 355147, 355160, 355171, 355174, 355179, 355180, 355182, 355203, 355368, 355444, 355481, 355507, 355661, 355683, 355716, 356334, 356335, 356336, 356343, 356345, 356348, 356354, 356360, 356372, 356451, 356474, 356476, 356528, 356540, 356587, 356590, 356591, 356614, 356619, 356621, 356656, 356681, 356694, 356713, 356831, 356892, 356894, 356905, 357038, 357060, 357067, 357085, 357122, 357123, 357218, 357221, 357235, 357247, 357329, 357656, 357661, 357666, 357684, 357694, 357704, 357768, 357781, 357866, 357901, 357904, 357959, 357980, 358019, 358020, 358026, 358040, 358053, 358091, 358138, 358151, 358162, 358178, 358186, 358192, 358234, 358259, 358260, 358292, 358310, 358323, 358338, 358343, 358347, 358358, 358380, 358381, 358514, 358526, 358528, 358529, 358534, 358548, 358568, 358575, 358577, 358581, 358673, 358690, 358712, 358715, 358717, 358718, 358737, 358744, 358746, 358777, 358801, 358825, 358835, 358934, 358935, 358936, 358939, 358946, 358947, 358948, 359217, 359283, 359288, 359290, 359299, 359831, 360000, 360003, 360005, 360006, 360060, 360063, 360068, 360157, 360161, 360162, 360167, 360168, 360171, 360172, 360175, 360176, 360177, 360178, 360181, 360182, 360184, 360186, 360187, 360188, 360189, 360191, 360209, 360211, 360214, 360216, 360217, 360218, 360219, 360220, 360223, 360239, 360268, 360275, 360299, 360301, 360305, 360411, 360433, 360635, 360640, 360641, 360642, 360643, 360644, 360645, 360646, 360647, 360695, 360696, 360705, 360709, 360712, 360837, 360923, 360936, 361109, 361110, 361111, 361202, 361204, 361205, 361206, 361219, 361233, 361257, 361364, 361367, 361428, 361433, 361448, 361490, 361515, 361516, 361563, 361585, 361586, 361590, 361593, 361595, 361601, 361615, 361676, 361717, 361730, 361764, 361766, 361776, 361781, 361964, 362022, 362030, 362048, 362049, 362136, 362137, 362138, 362140, 362141, 362145, 362150, 362151, 362153, 362154, 362156, 362157, 362164, 362166, 362169, 362170, 362174, 362177, 362179, 362181, 362187, 362188, 362192, 362203, 362206, 362208, 362209, 362210, 362308, 362337, 362338, 362343, 362507, 362558, 362629, 362654, 362699, 362806, 362892, 362914, 363057, 363059, 363060, 363062, 363063, 363067, 363068, 363069, 363070, 363072, 363075, 363079, 363081, 363082, 363084, 363085, 363091, 363095, 363097, 363098, 363100, 363103, 363126, 363135, 363143, 363144, 363147, 363158, 363159, 363212, 363215, 363216, 363217, 363218, 363311, 363332, 363342, 363347, 363404, 363414, 363415, 363417, 363426, 363427, 363432, 363445, 363458, 363492, 363570, 363586, 363605, 363622, 363639, 363677, 363679, 363685, 363700, 363704, 363718, 363794, 363796, 363867, 363916, 363952, 364021, 364147, 364149, 364174, 364191, 364197, 364203, 364224, 364232, 364238, 364259, 364262, 364447, 364452, 364590, 364795, 364797, 364812, 364813, 364817, 364820, 364841, 364864, 364925, 365017, 365035, 365053, 365105, 365106, 365132, 365137, 365344, 365428, 365442, 365452, 365454, 365461, 365537, 365696, 365697, 365707, 365723, 365738, 365838, 365979, 366053, 366101, 366103, 366104, 366105, 366109, 366702, 366754, 366775, 366807, 366812, 366825, 366920, 366993, 367190, 367232, 367275, 367306, 367325, 367343, 367348, 367372, 367381, 367703, 367704, 367706, 367857, 367899, 367986, 367994, 368067, 368086, 368134, 368190, 368196, 368199, 368201, 368216, 368239, 368311, 368375, 368485, 368506, 368507, 368616, 368660, 369101, 369143, 369192, 369236, 369237, 369238, 369253, 369254, 369422, 369464, 369570, 369575, 369577, 369578, 369584, 369585, 369596, 369598, 369606, 369607, 369611, 369612, 369614, 369616, 369622, 369624, 369625, 369630, 369751, 369752, 369883, 369893, 369900, 369935, 369951, 369966, 369988, 369989, 369990, 369991, 370057, 370161, 370179, 370181, 370182, 370184, 370345, 370346, 370439, 370440, 370441, 370442, 370443, 370444, 370445, 370446, 370447, 370450, 370557, 370618, 370624, 370629, 370780, 370781, 371196, 371608, 371697, 371730, 371732, 371733, 371736, 371742, 371744, 371745, 371746, 371753, 371813, 371829, 371841, 371843, 371849, 371859, 371881, 371882, 371984, 372018, 372182, 372198, 372210, 372212, 372213, 372224, 372231, 372232, 372233, 372235, 372242, 372248, 372268, 372269, 372270, 372271, 372273, 372282, 372284, 372287, 372293, 372296, 372298, 372299, 372393, 372413, 372501, 372698, 372764, 372773, 372915, 372946, 372965, 372974, 373048, 373056, 373086, 373087, 373230, 373261, 373270, 373289, 373424, 373458, 373507, 373524, 373537, 373547, 373551, 373552, 373555, 373564, 373567, 373605, 373611, 373632, 373633, 373634, 373692, 373704, 373707, 373709, 373715, 373720, 373770, 373791, 373796, 373800, 373802, 373821, 373827, 373899, 373925, 373953, 373957, 373996, 374006, 374061, 374166, 374189, 374211, 374270, 374287, 374357, 374375, 374411, 374444, 374475, 374597, 374644, 374682, 374684, 374740, 374753, 374778, 374794, 374795, 374796, 374798, 374799, 374862, 374871, 374880, 374936, 374947, 375030, 375031, 375036, 375037, 375039, 375040, 375043, 375046, 375889, 375981, 375982, 376131, 376161, 376162, 376197, 376199, 376200, 376201, 376202, 376243, 376270, 376337, 376513, 377452, 377618, 377690, 377698, 377799, 377809, 377824, 377863, 377872, 377890, 377980, 378010, 378037, 378051, 378064, 378129, 378143, 378219, 378224, 378234, 378255, 378256, 378262, 378295, 378296, 378323, 378362, 378364, 378403, 378450, 378473, 378641, 378871, 378872, 378982, 378988, 379012, 379019, 379234, 379237, 379239, 379240, 379241, 379243, 379249, 379250, 379251, 379253, 379285, 379286, 379367, 379519, 379520, 379533, 379549, 379589, 379595, 379597, 379601, 379784, 380064, 380081, 380099, 380110, 380160, 380188, 380271, 380300, 380301, 380402, 380404, 380491, 380492, 380493, 380494, 380495, 380496, 380497, 380498, 380499, 380500, 380501, 380502, 380503, 380504, 380505, 380506, 380507, 380508, 380509, 380510, 380511, 380512, 380513, 380514, 380515, 380516, 380517, 380518, 380519, 380520, 380521, 380522, 380523, 380524, 380525, 380534, 380535, 380536, 380537, 380538, 380539, 380540, 380541, 380542, 380543, 380544, 380545, 380546, 380547, 380548, 380549, 380550, 380551, 380552, 380562, 380563, 380565, 380577, 380578, 380579, 380580, 380595, 380598, 380599, 380608, 380614, 380617, 380635, 380660, 380686, 380734, 380740, 380837, 380879, 380885, 380915, 380935, 380940, 381001, 381010, 381012, 381024, 381053, 381054, 381116, 381125, 381127, 381128, 381136, 381148, 381216, 381241, 381252, 381257, 381263, 381265, 381270, 381336, 381513, 381548, 381549, 381565, 381996, 382002, 382012, 382013, 382015, 382018, 382019, 382020, 382021, 382023, 382024, 382058, 382126, 382127, 382130, 382131, 382132, 382133, 382296, 382328, 382329, 382330, 382335, 382416, 382552, 382553, 382558, 382564, 382868, 382876, 382937, 383065, 383252, 383272, 383279, 383309, 383340, 383415, 383447, 383456, 383482, 383483, 383504, 383513, 383522, 383532, 383542, 383550, 383572, 383597, 383600, 383615, 383627, 383639, 383642, 383643, 383653, 383684, 383712, 383739, 383748, 383756, 383768, 383769, 383823, 383826, 383849, 383875, 383921, 383924, 383960, 384001, 384095, 384101, 384116, 384131, 384139, 384241, 384292, 384372, 384479, 384491, 384492, 384493, 384494, 384495, 384496, 384502, 384603, 384608, 384609, 384613, 384615, 384621, 384623, 384824, 384866, 384915, 385040, 385121, 385122, 385123, 385125, 385126, 385127, 385128, 385129, 385130, 385131, 385132, 385133, 385134, 385135, 385136, 385137, 385142, 385143, 385262, 385446, 385677, 385713, 385723, 385886, 386038, 386093, 386145, 386147, 386369, 386398, 386481, 386482, 386593, 386607, 386632, 386635, 386643, 386689, 386814, 386822, 386824, 386828, 386935, 386942, 386945, 386946, 386947, 387015, 387077, 387135, 387136, 387189, 387249, 387332, 387343, 387354, 387497, 387524, 387588, 387599, 387602, 387633, 387638, 387701, 387789, 387886, 387949, 387952, 387958, 387959, 387960, 387973, 388001, 388002, 388006, 388031, 388047, 388148, 388165, 388177, 388178, 388192, 388223, 388244, 388296, 388310, 388318, 388338, 388483, 388516, 388517, 388519, 388520, 388521, 388526, 388528, 388564, 388576, 388596, 388615, 388626, 388627, 388680, 388697, 388703, 388719, 388720, 388721, 388726, 388728, 388737, 388768, 388779, 388780, 388781, 388793, 388803, 388804, 388821, 388836, 388838, 388844, 388871, 388872, 388903, 388907, 388935, 388959, 388985, 389021, 389096, 389102, 389124, 389125, 389192, 389222, 389291, 389294, 389352, 389481, 389482, 389484, 389488, 389514, 389518, 389519, 389533, 389536, 389542, 389550, 389552, 389604, 389607, 389612, 389669, 389698, 389744, 389745, 389776, 389840, 389843, 389855, 389898, 389934, 390035, 390037, 390084, 390121, 390352, 390380, 390448, 390559, 390589, 390706, 390758, 390763, 390899, 390903, 390911, 390964, 390965, 390970, 390971, 390972, 390973, 391067, 391076, 391090, 391092, 391118, 391188, 391212, 391219, 391236, 391431, 391545, 391754, 391891, 391900, 391915, 392044, 392134, 392203, 392228, 392253, 392258, 392288, 392320, 392328, 392356, 392362, 392369, 392372, 392431, 392550, 392552, 392554, 392555, 392562, 392607, 392651, 392809, 392874, 392875, 392876, 392877, 392880, 392968, 392972, 393039, 393040, 393051, 393052, 393083, 393145, 393177, 393186, 393190, 393196, 393197, 393198, 393202, 393204, 393219, 393235, 393303, 393334, 393335, 393338, 393340, 393344, 393369, 393458, 393466, 393475, 393512, 393597, 393610, 393643, 393664, 393683, 393714, 394090, 394232, 394314, 394316, 394317, 394320, 394321, 394323, 394324, 394325, 394716, 394745, 394752, 394781, 394949, 394951, 394955, 394957, 394958, 394959, 394960, 394963, 394988, 394989, 395005, 395008, 395009, 395013, 395014, 395015, 395016, 395050, 395057, 395064, 395066, 395074, 395262, 395551, 395553, 395598, 395657, 395808, 395809, 395822, 395854, 395892, 395893, 395931, 395949, 396174, 396246, 396266, 396268, 396324, 396349, 396350, 396359, 396365, 396370, 396375, 396380, 396382, 396389, 396467, 396508, 396560, 396567, 396568, 396575, 396577, 396581, 396584, 396641, 396645, 396646, 396647, 396648, 396650, 396651, 396652, 396653, 396654, 396655, 396656, 396658, 396659, 396661, 396663, 396664, 396666, 396667, 396669, 396670, 396671, 396673, 396675, 396676, 396677, 396682, 396684, 396685, 396687, 396688, 396689, 396691, 396695, 396696, 396697, 396698, 396699, 396702, 396703, 396704, 396705, 396707, 396708, 396710, 396713, 396843, 396872, 396992, 397001, 397174, 397270, 397293, 397396, 397413, 397517, 397543, 397562, 397628, 397700, 397709, 397727, 397739, 397774, 397780, 397781, 397782, 397819, 397989, 398080, 398115, 398181, 398237, 398238, 398239, 398240, 398241, 398242, 398243, 398244, 398245, 398246, 398247, 398248, 398249, 398250, 398251, 398252, 398253, 398254, 398268, 398324, 398325, 398326, 398327, 398328, 398329, 398330, 398331, 398337, 398338, 398339, 398340, 398341, 398342, 398355, 398356, 398357, 398373, 398377, 398378, 398379, 398380, 398381, 398382, 398383, 398425, 398450, 398511, 398540, 398734, 398741, 398743, 398849, 398850, 398943, 398982, 398993, 399052, 399086, 399156, 399190, 399191, 399193, 399260, 399303, 399304, 399465, 399467, 399478, 399486, 399491, 399492, 399494, 399551, 399573, 399691, 399713, 399725, 399730, 399731, 399787, 399806, 399807, 399810, 399816, 399833, 399850, 399858, 399875, 399888, 399889, 399895, 399900, 399909, 399910, 399921, 399923, 399932, 399961, 399965, 399968, 399982, 400030, 400144, 400157, 400158, 400159, 400160, 400163, 400164, 400165, 400166, 400167, 400266, 400340, 400422, 400462, 400489, 400548, 400567, 400587, 400600, 400603, 400628, 400654, 400660, 400666, 400742, 400847, 400863, 400864, 400865, 400866, 400867, 400870, 400871, 400873, 400878, 400879, 400880, 400881, 400882, 400883, 400884, 400890, 400892, 400894, 400895, 400918, 400924, 400926, 400927, 400948, 401074, 401150, 401216, 401219, 401342, 401431, 401455, 401548, 401561, 401599, 401600, 401627, 401679, 401687, 401689, 401691, 401692, 401769, 401771, 401772, 401774, 401776, 401778, 401779, 401814, 401819, 401821, 401822, 401823, 401825, 401827, 401828, 401829, 401831, 401832, 401841, 401848, 401854, 401885, 401901, 401974, 401995, 402108, 402141, 402152, 402157, 402164, 402169, 402179, 402181, 402185, 402200, 402207, 402222, 402233, 402236, 402241, 402242, 402261, 402264, 402273, 402298, 402316, 402354, 402485, 402534, 402535, 402536, 402567, 402568, 402603, 402632, 402699, 402700, 402745, 402838, 402852, 402874, 402954, 402992, 402993, 402997, 403002, 403003, 403004, 403005, 403006, 403007, 403008, 403009, 403010, 403011, 403013, 403014, 403015, 403016, 403019, 403020, 403021, 403022, 403023, 403024, 403025, 403058, 403061, 403062, 403063, 403076, 403077, 403078, 403080, 403081, 403093, 403139, 403145, 403153, 403186, 403208, 403228, 403229, 403230, 403233, 403236, 403239, 403240, 403242, 403243, 403244, 403245, 403255, 403258, 403271, 403275, 403337, 403338, 403374, 403398, 403413, 403443, 403491, 403521, 403534, 403622, 403665, 403789, 403930, 403931, 403982, 404260, 404709, 404738, 404741, 404747, 404752, 404755, 404759, 404761, 404762, 404765, 404766, 404767, 404768, 404769, 404770, 404771, 404772, 404773, 404774, 404775, 404776, 404780, 404781, 404785, 404786, 404787, 404791, 404792, 404793, 404795, 404796, 404797, 404798, 404800, 404801, 404803, 404804, 404805, 404806, 404807, 404808, 404810, 404811, 404812, 404813, 404814, 404815, 404816, 404818, 404819, 404820, 404821, 404823, 404824, 404825, 404826, 404827, 404828, 404829, 404830, 404832, 404833, 404834, 404835, 404836, 404837, 404841, 404842, 404843, 404844, 404845, 404847, 404848, 404850, 404852, 404853, 404854, 404855, 404856, 404857, 404858, 404859, 404860, 404863, 404865, 404868, 404869, 404870, 404872, 404873, 404874, 404876, 404879, 404880, 404882, 404883, 404886, 404887, 404890, 404893, 404898, 404900, 404927, 404936, 404952, 404964, 404965, 404966, 404980, 404984, 405003, 405041, 405148, 405149, 405166, 405191, 405348, 405356, 405425, 405432, 405462, 405467, 405546, 405553, 405596, 405675, 405782, 405785, 405962, 406137, 406138, 406143, 406293, 406294, 406300, 406308, 406314, 406315, 406319, 406321, 406323, 406331, 406332, 406335, 406365, 406382, 406384, 406662, 406672, 406742, 406752, 406753, 406758, 406780, 406854, 406948, 406954, 406976, 406992, 406997, 407006, 407008, 407160, 407220, 407257, 407260, 407261, 407262, 407297, 407308, 407383, 407402, 407413, 407455, 407464, 407467, 407507, 407516, 407542, 407564, 407578, 407604, 407685, 407688, 407692, 407807, 407813, 407836, 407946, 407974, 408044, 408199, 408283, 408303, 408430, 408431, 408435, 408464, 408465, 408473, 408507, 408508, 408509, 408512, 408513, 408515, 408516, 408517, 408518, 408519, 408520, 408521, 408526, 408528, 408560, 408566, 408665, 408670, 408690, 408692, 408721, 408814, 408905, 408962, 408963, 408973, 408979, 409004, 409226, 409410, 409563, 410074, 410476, 410558, 410717, 410718, 410728, 410730, 410752, 410760, 410772, 410778, 410779, 410782, 410805, 410825, 410907, 410935, 410943, 410955, 410959, 411001, 411009, 411011, 411027, 411115, 411206, 411212, 411213, 411215, 411216, 411220, 411226, 411245, 411255, 411260, 411261, 411262, 411265, 411272, 411280, 411285, 411287, 411291, 411293, 411295, 411312, 411326, 411330, 411339, 411340, 411408, 411648, 411669, 411672, 411786, 411804, 411805, 411806, 411818, 412013, 412018, 412028, 412039, 412069, 412119, 412133, 412152, 412332, 412397, 412421, 412422, 412430, 412467, 412494, 412500, 412508, 412533, 412536, 412590, 412633, 412670, 412716, 412771, 412787, 412812, 412820, 412975, 413055, 413457, 413462, 413464, 413468, 413470, 413474, 413488, 413489, 413490, 413491, 413548, 413577, 413595, 413616, 413618, 413945, 413946, 413947, 413948, 413949, 413950, 413951, 413952, 413953, 413954, 413955, 413956, 413957, 413958, 413959, 413960, 413961, 413962, 413963, 413964, 413965, 413966, 413967, 413968, 413969, 413970, 413971, 414043, 414044, 414045, 414046, 414047, 414048, 414049, 414050, 414051, 414052, 414053, 414054, 414055, 414056, 414057, 414058, 414059, 414060, 414061, 414062, 414063, 414064, 414065, 414066, 414067, 414068, 414069, 414070, 414124, 414125, 414127, 414135, 414245, 414319, 414335, 414351, 414363, 414375, 414396, 414406, 414422, 414428, 414453, 414456, 414463, 414468, 414496, 414512, 414517, 414536, 414551, 414562, 414563, 414569, 414587, 414597, 414607, 414608, 414673, 414689, 414791, 414981, 414998, 415155, 415174, 415180, 415183, 415241, 415299, 415314, 415325, 415331, 415333, 415350, 415359, 415365, 415376, 415380, 415381, 415383, 415384, 415385, 415392, 415410, 415460, 415462, 415489, 415503, 415596, 415604, 415631, 415633, 415637, 415638, 415650, 415950, 415951, 415969, 415970, 415971, 416032, 416135, 416214, 416288, 416436, 416615, 416617, 416671, 416749, 416773, 416777, 416781, 416798, 416807, 416915, 416942, 416951, 416961, 416968, 416971, 416974, 416975, 416991, 416993, 416996, 417005, 417010, 417025, 417028, 417031, 417032, 417033, 417035, 417036, 417039, 417041, 417052, 417058, 417059, 417061, 417063, 417064, 417070, 417071, 417076, 417092, 417101, 417204, 417207, 417208, 417213, 417214, 417251, 417305, 417310, 417344, 417442, 417443, 417459, 417483, 417657, 417908, 418022, 418088, 418089, 418093, 418094, 418105, 418109, 418192, 418225, 418272, 418273, 418278, 418479, 418481, 418699, 418775, 418797, 418944, 418977, 418978, 418979, 418984, 419125, 419222, 419398, 419423, 419449, 419466, 419467, 419473, 419478, 419483, 419490, 419491, 419492, 419494, 419495, 419498, 419499, 419503, 419507, 419508, 419511, 419513, 419514, 419515, 419516, 419517, 419521, 419614, 419637, 419648, 419712, 419746, 419749, 419755, 419766, 419774, 419787, 419805, 419824, 419829, 419831, 419832, 419919, 419933, 420236, 420442, 420447, 420454, 420470, 420481, 420508, 420533, 420648, 420743, 420800, 420831, 421119, 421204, 421208, 421406, 421417, 421539, 421809, 421835, 421893, 421916, 421957, 421958, 421962, 421964, 421965, 421966, 421969, 421970, 421971, 422085, 422095, 422096, 422099, 422120, 422192, 422194, 422264, 422338, 422349, 422356, 422360, 422363, 422367, 422385, 422399, 422401, 422404, 422406, 422407, 422427, 422436, 422446, 422471, 422484, 422511, 422515, 422526, 422533, 422561, 422568, 422628, 422665, 422733, 422790, 422792, 422812, 422879, 422909, 422914, 422918, 422919, 422941, 422966, 422990, 422992, 422995, 422999, 423016, 423036, 423039, 423048, 423051, 423053, 423066, 423069, 423082, 423090, 423108, 423111, 423131, 423156, 423164, 423204, 423243, 423244, 423258, 423264, 423289, 423306, 423330, 423349, 423366, 423381, 423389, 423396, 423401, 423408, 423433, 423447, 423450, 423457, 423476, 423488, 423513, 423516, 423522, 423531, 423533, 423536, 423543, 423547, 423555, 423579, 423595, 423597, 423601, 423608, 423620, 423641, 423664, 423703, 423710, 423717, 423748, 423751, 423780, 423796, 423809, 423819, 423833, 423852, 423856, 423870, 423873, 423883, 423898, 423914, 423925, 423926, 423927, 423936, 423946, 423948, 423955, 423959, 423961, 423973, 424050, 424051, 424055, 424057, 424071, 424089, 424104, 424114, 424119, 424120, 424121, 424123, 424136, 424147, 424152, 424164, 424175, 424221, 424227, 424257, 424262, 424273, 424277, 424278, 424279, 424287, 424293, 424302, 424308, 424322, 424323, 424350, 424386, 424394, 424417, 424420, 424421, 424425, 424449, 424459, 424462, 424463, 424466, 424475, 424491, 424556, 424563, 424588, 424606, 424610, 424626, 424628, 424630, 424645, 424663, 424683, 424690, 424705, 424719, 424752, 424773, 424776, 424798, 424799, 424800, 424803, 424810, 424817, 424827, 424851, 424901, 424904, 424910, 424911, 424916, 424920, 424934, 424939, 424952, 424957, 424963, 424972, 424985, 424987, 425029, 425031, 425047, 425067, 425074, 425076, 425077, 425078, 425079, 425080, 425081, 425084, 425085, 425086, 425087, 425088, 425089, 425090, 425091, 425092, 425094, 425207, 425220, 425226, 425227, 425244, 425245, 425246, 425247, 425248, 425250, 425311, 425424, 425426, 425814, 425817, 425864, 425877, 425878, 425882, 425883, 425892, 426056, 426159, 426418, 426480, 426511, 426531, 426637, 426681, 426688, 426707, 426714, 426715, 426730, 426759, 427097, 427098, 427202, 427210, 427211, 427212, 427223, 427308, 427309, 427310, 427311, 427314, 427317, 427320, 427322, 427323, 427327, 427330, 427331, 427336, 427337, 427339, 427340, 427341, 427342, 427521, 427590, 427603, 427629, 427630, 427632, 427633, 427638, 427810, 427820, 427822, 427831, 427832, 427839, 427852, 427857, 427858, 427863, 427895, 427896, 428005, 428141, 428144, 428158, 428193, 428212, 428233, 428237, 428243, 428809, 428919, 428927, 428935, 428946, 428949, 429042, 429081, 429106, 429107, 429108, 429109, 429110, 429111, 429113, 429115, 429116, 429118, 429119, 429121, 429122, 429123, 429125, 429126, 429127, 429129, 429130, 429132, 429133, 429135, 429185, 429186, 429194, 429198, 429201, 429207, 429208, 429219, 429220, 429230, 429232, 429353, 429515, 429518, 429521, 429524, 429525, 429526, 429527, 429528, 429529, 429534, 429536, 429619, 429620, 429626, 429627, 429630, 429652, 429660, 429744, 429745, 429746, 429748, 429751, 429752, 429753, 429754, 429755, 429756, 429757, 429758, 429759, 429760, 429761, 429762, 429763, 429764, 429766, 429768, 429771, 429772, 429773, 429775, 429781, 430050, 430180, 430217, 430314, 430492, 430512, 430824, 430913, 430944, 430962, 430967, 430988, 431014, 431015, 431106, 431114, 431245, 431748, 431926, 431927, 431928, 431977, 431995, 432001, 432003, 432019, 432069, 432077, 432078, 432114, 432116, 432117, 432179, 432196, 432202, 432207, 432261, 432262, 432267, 432276, 432277, 432282, 432285, 432319, 432374, 432376, 432378, 432380, 432422, 432433, 432459, 432461, 432463, 432595, 432604, 432688, 432713, 432714, 432975, 432986, 432988, 432989, 432990, 433050, 433051, 433055, 433061, 433332, 433333, 433338, 433339, 433342, 433344, 433523, 433528, 433529, 433531, 433539, 433561, 433616, 433626, 433634, 433691, 433735, 433815, 433858, 433873, 433894, 433923, 433925, 433938, 433970, 433983, 433996, 434015, 434017, 434018, 434026, 434027, 434049, 434060, 434071, 434090, 434091, 434102, 434106, 434108, 434119, 434143, 434169, 434172, 434179, 434184, 434449, 434511, 434518, 434519, 434528, 434905, 434916, 434978, 435085, 435090, 435105, 435157, 435159, 435160, 435176, 435288, 435424, 435505, 435538, 435545, 435546, 435586, 435587, 435649, 435713, 435723, 435760, 435791, 435792, 435833, 435972, 435991, 436037, 436071, 436299, 436411, 436412, 436518, 436546, 436624, 436632, 436648, 436649, 436650, 436651, 436652, 436654, 436656, 436657, 436658, 436659, 436660, 436661, 436662, 436664, 436666, 436667, 436670, 436776, 436793, 436794, 436795, 436796, 436797, 436825, 436900, 437017, 437027, 437054, 437055, 437132, 437259, 437282, 437286, 437303, 437372, 437399, 437462, 437514, 437730, 437743, 437806, 437848, 437873, 437951, 437954, 437957, 437965, 438027, 438028, 438033, 438042, 438101, 438124, 438128, 438196, 438216, 438219, 438230, 438231, 438239, 438247, 438262, 438269, 438270, 438286, 438359, 438369, 438523, 438541, 438545, 438561, 438576, 438592, 438594, 438663, 438743, 438753, 438769, 438770, 438773, 438774, 438833, 439169, 439171, 439172, 439174, 439194, 439221, 439254, 439255, 439261, 439262, 439361, 439447, 439448, 439471, 439478, 439479, 439538, 439543, 439545, 439551, 439577, 439592, 439654, 439665, 439666, 439706, 439836, 439849, 439894, 440001, 440038, 440040, 440126, 440142, 440143, 440149, 440154, 440155, 440169, 440172, 440176, 440183, 440184, 440186, 440190, 440194, 440199, 440202, 440204, 440209, 440210, 440265, 440561, 440582, 440585, 440612, 440613, 440614, 440615, 440616, 440622, 440623, 440627, 440631, 440634, 440636, 440637, 440949, 441012, 441045, 441241, 441328, 441332, 441349, 441418, 441422, 441424, 441425, 441432, 441433, 441440, 441450, 441643, 441720, 441721, 441727, 441740, 441811, 441849, 441890, 442026, 442071, 442076, 442094, 442100, 442130, 442133, 442137, 442261, 442272, 442297, 442300, 442302, 442305, 442306, 442310, 442312, 442335, 442337, 442476, 442484, 442516, 442567, 442600, 442602, 442603, 442607, 442609, 442611, 442632, 442649, 442813, 442819, 442820, 442821, 442850, 442859, 442863, 442936, 442939, 442940, 442941, 442942, 442943, 442961, 442966, 442968, 442980, 443016, 443019, 443168, 443445, 443457, 443501, 443781, 443822, 443851, 443892, 443904, 443905, 443914, 443940, 443942, 443991, 443997, 444045, 444107, 444157, 444158, 444180, 444197, 444199, 444222, 444224, 444452, 444463, 444511, 444512, 444516, 444517, 444545, 444551, 444558, 444563, 444617, 444618, 444624, 444675, 444688, 444751, 444755, 444820, 444822, 444886, 444887, 444888, 444889, 444891, 444892, 444893, 444896, 444899, 444900, 444907, 444909, 444910, 444915, 444924, 444953, 445491, 445533, 445726, 445788, 445878, 445884, 445886, 445986, 445994, 446030, 446050, 446141, 446238, 446296, 446374, 446424, 446428, 446477, 446540, 446544, 446619, 446620, 446647, 446673, 446685, 446704, 446705, 446709, 446718, 446730, 446738, 446748, 446781, 446782, 446784, 446788, 447010, 447012, 447013, 447014, 447015, 447016, 447020, 447136, 447149, 447151, 447168, 447185, 447198, 447221, 447225, 447231, 447232, 447238, 447418, 447456, 447498, 447752, 447754, 447756, 447786, 447808, 447813, 447816, 447839, 448010, 448509, 448536, 448553, 448554, 448555, 448556, 448580, 448600, 448639, 448676, 448721, 448742, 448767, 448778, 448914, 448985, 448994, 449012, 449016, 449095, 449249, 449336, 449394, 449477, 449657, 449709, 449845, 449890, 449891, 449895, 449908, 449909, 449915, 449917, 450080, 450084, 450104, 450143, 450144, 450184, 450195, 450202, 450205, 450292, 450365, 450490, 450491, 450492, 450495, 450496, 450590, 450607, 450644, 450645, 450726, 450736, 450750, 450766, 450767, 450768, 450770, 450771, 450774, 450806, 450816, 450840, 450935, 450938, 450946, 450961, 450962, 450964, 450966, 451184, 451186, 451319, 451337, 451338, 451392, 451401, 451420, 451428, 451510, 451527, 451531, 451623, 451712, 451752, 451797, 451798, 451799, 451800, 451801, 451802, 451803, 451842, 451843, 451849, 451855, 451877, 451895, 451896, 451897, 451898, 451899, 451900, 451901, 451902, 451903, 451904, 451956, 451992, 452064, 452065, 452074, 452075, 452557, 452573, 452581, 452600, 452601, 452602, 452638, 452665, 452668, 452773, 452852, 452954, 453028, 453036, 453050, 453068, 453091, 453099, 453115, 453122, 453173, 453176, 453224, 453247, 453292, 453312, 453332, 453343, 453348, 453362, 453426, 453491, 453522, 453552, 453555, 453561, 453584, 453586, 453593, 453600, 453603, 453604, 453605, 453703, 453708, 453814, 453816, 453959, 454219, 454220, 454289, 454338, 454454, 454676, 454686, 454689, 454725, 454740, 454744, 454751, 454760, 454787, 454905, 455012, 455092, 455140, 455163, 455167, 455214, 455215, 455345, 455398, 455504, 455516, 455524, 455552, 455554, 455556, 455557, 455558, 455560, 455562, 455563, 455564, 455566, 455568, 455569, 455570, 455572, 455584, 455585, 455588, 455591, 455618, 455620, 455622, 455625, 455643, 456014, 456023, 456091, 456096, 456137, 456141, 456228, 456229, 456236, 457160, 457166, 457254, 457255, 457256, 457259, 457312, 457325, 457326, 457336, 457346, 457442, 457505, 457520, 457646, 457718, 457719, 457785, 457813, 457846, 457847, 457850, 458073, 458116, 458118, 458361, 458437, 458443, 458627, 458649, 458658, 458660, 458783, 458825, 458829, 458830, 458880, 458881, 458883, 458884, 458901, 459142, 459155, 459168, 459169, 459175, 459177, 459264, 459269, 459345, 459516, 459575, 459576, 459579, 459580, 459581, 459582, 459583, 459584, 459585, 459586, 459587, 459588, 459590, 459591, 459592, 459593, 459594, 459595, 459596, 459597, 459598, 459599, 459600, 459601, 459602, 459603, 459604, 459605, 459606, 459607, 459608, 459609, 459610, 459611, 459612, 459613, 459614, 459615, 459616, 459617, 459618, 459619, 459620, 459621, 459622, 459623, 459624, 459625, 459626, 459629, 459665, 459667, 459669, 459670, 459673, 459678, 459680, 459735, 459736, 459741, 459747, 459859, 459871, 459926, 459928, 459968, 460006, 460056, 460086, 460087, 460091, 460108, 460132, 460149, 460184, 460191, 460192, 460203, 460205, 460213, 460251, 460313, 460335, 460344, 460348, 460357, 460388, 460389, 460391, 460399, 460401, 460412, 460413, 460419, 460420, 460474, 460475, 460476, 460477, 460707, 460815, 460819, 460820, 460821, 460824, 460832, 460833, 460839, 460844, 460877, 460905, 460916, 460964, 461014, 461107, 461142, 461179, 461193, 461247, 461268, 461310, 461386, 461497, 461511, 461705, 461824, 461836, 461849, 461851, 461854, 461875, 461913, 461914, 461916, 461917, 461918, 461939, 461941, 461960, 461977, 461986, 462003, 462308, 462497, 462498, 462530, 462542, 462571, 462585, 462623, 462630, 462636, 462692, 462800, 462813, 462898, 462900, 462902, 462940, 462956, 462972, 463004, 463120, 463121, 463142, 463223, 463352, 463371, 463372, 463373, 463374, 463387, 463393, 463395, 463396, 463397, 463410, 463661, 463922, 463960, 463966, 464014, 464043, 464146, 464170, 464200, 464226, 464375, 464378, 464384, 464385, 464390, 464391, 464396, 464400, 464402, 464403, 464405, 464411, 464432, 464529, 464541, 464546, 464561, 464601, 464742, 464880, 464955, 464981, 465007, 465016, 465022, 465102, 465134, 465158, 465184, 465211, 465241, 465298, 465369, 465504, 465522, 465533, 465723, 465733, 465840, 465841, 465899, 465910, 465912, 465913, 465914, 465926, 465948, 465952, 465966, 465983, 465984, 466027, 466032, 466058, 466085, 466098, 466105, 466121, 466169, 466171, 466174, 466180, 466190, 466290, 466468, 466470, 466471, 466485, 466494, 466495, 466496, 466515, 466517, 466519, 466531, 466534, 466536, 466537, 466540, 466543, 466610, 466611, 466612, 466613, 466619, 466620, 466624, 466626, 466631, 466632, 466638, 466639, 466641, 466644, 466647, 466653, 466655, 466657, 466658, 466659, 466660, 466665, 466666, 466679, 466746, 466757, 466758, 466759, 466763, 466764, 466765, 466768, 466769, 466771, 466774, 466801, 466830, 466838, 466844, 466849, 466854, 466887, 466898, 466915, 466923, 466935, 467198, 467208, 467209, 467212, 467214, 467232, 467262, 467320, 467400, 467448, 467471, 467475, 467581, 467719, 467725, 467786, 467791, 467912, 467916, 467917, 467918, 467919, 467922, 467923, 467924, 467925, 467946, 467947, 467950, 467959, 467979, 467982, 467983, 467997, 468022, 468034, 468063, 468068, 468108, 468111, 468112, 468113, 468117, 468118, 468119, 468120, 468121, 468201, 468245, 468266, 468281, 468289, 468290, 468292, 468294, 468295, 468297, 468298, 468300, 468301, 468302, 468303, 468304, 468305, 468306, 468336, 468337, 468343, 468498, 468575, 468579, 468583, 468584, 468589, 468592, 468593, 468596, 468598, 468600, 468601, 468608, 468611, 468612, 468613, 468618, 468619, 468622, 468623, 468625, 468626, 468629, 468630, 468635, 468636, 468637, 468639, 468641, 468643, 468645, 468647, 468648, 468650, 468651, 468652, 468654, 468657, 468658, 468659, 468664, 468665, 468666, 468668, 468670, 468674, 468680, 468681, 468683, 468686, 468687, 468688, 468689, 468690, 468692, 468699, 468700, 468701, 468702, 468704, 468705, 468706, 468707, 468713, 468715, 468719, 468722, 468723, 468724, 468725, 468726, 468728, 468729, 468732, 468733, 468735, 468738, 468742, 468744, 468745, 468746, 468748, 468749, 468753, 468754, 468779, 468928, 469008, 469030, 469087, 469088, 469099, 469133, 469188, 469196, 469199, 469201, 469252, 469505, 469533, 469586, 469627, 469650, 469804, 469807, 469811, 469812, 469836, 469837, 469935, 470155, 470209, 470211, 470214, 470219, 470224, 470234, 470235, 470240, 470242, 470245, 470293, 470413, 470414, 470417, 471129, 471196, 471203, 471210, 471213, 471214, 471395, 471618, 471654, 471698, 471822, 471824, 471900, 472013, 472131, 472162, 472163, 472400, 472415, 472453, 472465, 472496, 472554, 472558, 472563, 472564, 472566, 472642, 472760, 472778, 472852, 472886, 472955, 472959, 472980, 473002, 473042, 473064, 473153, 473169, 473174, 473176, 473181, 473182, 473183, 473217, 473223, 473224, 473226, 473229, 473235, 473304, 473319, 473336, 473393, 473395, 473483, 473581, 473584, 473589, 473591, 473610, 473615, 473616, 473628, 473630, 473632, 473642, 473643, 473654, 473659, 473662, 473666, 473669, 473671, 473679, 473682, 473765, 473916, 473928, 473932, 473933, 474111, 474112, 474120, 474128, 474138, 474141, 474148, 474153, 474154, 474159, 474163, 474165, 474166, 474168, 474174, 474306, 474312, 474320, 474345, 474348, 474402, 474452, 474457, 474502, 474507, 474623, 474628, 474749, 474765, 474768, 474806, 474814, 474821, 474824, 474826, 474863, 474872, 474882, 474887, 474890, 474894, 474908, 474987, 474994, 474998, 475019, 475064, 475082, 475114, 475131, 475187, 475190, 475365, 475457, 475799, 475836, 475949, 476213, 476236, 476241, 476242, 476267, 476360, 476376, 476615, 476679, 476731, 476797, 476894, 476915, 476955, 476956, 476998, 477000, 477024, 477116, 477152, 477153, 477156, 477157, 477158, 477159, 477262, 477324, 477344, 477597, 477605, 477637, 477718, 477747, 477901, 477905, 477917, 478017, 478173, 478174, 478182, 478198, 478229, 478234, 478235, 478237, 478238, 478244, 478249, 478260, 478261, 478274, 478278, 478279, 478282, 478283, 478285, 478286, 478287, 478288, 478289, 478290, 478291, 478294, 478299, 478301, 478302, 478304, 478311, 478317, 478324, 478326, 478503, 479541, 479560, 479704, 479717, 479718, 479779, 479886, 480154, 480215, 480298, 480398, 480426, 480427, 480430, 480446, 480511, 480567, 480600, 480625, 480632, 480649, 480694, 480696, 480718, 480755, 480789, 480790, 480851, 480908, 480912, 480918, 480924, 480953, 480955, 480983, 481033, 481040, 481046, 481073, 481126, 481188, 481240, 481322, 481352, 481390, 481530, 481550, 481667, 481695, 481762, 481781, 481802, 481838, 481860, 481861, 481863, 481873, 481876, 481878, 481884, 481887, 481911, 481928, 481940, 481949, 481954, 481956, 481976, 481987, 482017, 482019, 482024, 482038, 482060, 482069, 482088, 482101, 482115, 482123, 482140, 482143, 482149, 482251, 482377, 482420, 482421, 482425, 482426, 482434, 482494, 482536, 482548, 482559, 482569, 482761, 482841, 482845, 482859, 482935, 482955, 482963, 482994, 482997, 483002, 483003, 483005, 483006, 483007, 483008, 483037, 483053, 483128, 483138, 483153, 483158, 483161, 483163, 483168, 483172, 483216, 483232, 483237, 483249, 483267, 483268, 483269, 483271, 483278, 483281, 483282, 483290, 483291, 483292, 483295, 483296, 483297, 483313, 483353, 483452, 483457, 483512, 483513, 483516, 483523, 483524, 483582, 483631, 483637, 483640, 483645, 483648, 483660, 483663, 483664, 483665, 483666, 483667, 483671, 483672, 483688, 483689, 483693, 483694, 483696, 483697, 483702, 483703, 483706, 483708, 483709, 483710, 483711, 483712, 483713, 483714, 483715, 483716, 483717, 483718, 483719, 483720, 483721, 483722, 483723, 483724, 483725, 483726, 483727, 483728, 483729, 483730, 483731, 483733, 483734, 483735, 483737, 483738, 483739, 483754, 483755, 483756, 483757, 483758, 483759, 483760, 483761, 483762, 483805, 483806, 483807, 483810, 483813, 483814, 483985, 483998, 483999, 484000, 484121, 484201, 484352, 484353, 484354, 484356, 484381, 484417, 484418, 484421, 484454, 484469, 484479, 484576, 484623, 484627, 484651, 484661, 484665, 484666, 484681, 484683, 484714, 484715, 484728, 484738, 484740, 484817, 484826, 484891, 484952, 484953, 484954, 484977, 484980, 484989, 485069, 485184, 485273, 485316, 485356, 485361, 485366, 485373, 485377, 485403, 485433, 485518, 485537, 485539, 485540, 485605, 485727, 485806, 485822, 485852, 486015, 486029, 486072, 486275, 486354, 486368, 486369, 486378, 486384, 486392, 486405, 486486, 486501, 486503, 486803, 486804, 486806, 486811, 486817, 486932, 486946, 487044, 487064, 487077, 487078, 487120, 487125, 487190, 487200, 487207, 487208, 487235, 487238, 487246, 487248, 487325, 487395, 487426, 487453, 487564, 487568, 487573, 487593, 487595, 487597, 487622, 487625, 487648, 487660, 487674, 487686, 487820, 487821, 487857, 487889, 487891, 487906, 487910, 487912, 487936, 487943, 487944, 487966, 488021, 488039, 488044, 488056, 488116, 488266, 488350, 488516, 488521, 488522, 488533, 488534, 488538, 488542, 488543, 488583, 488653, 488714, 488773, 488774, 488775, 488778, 488781, 488784, 488785, 488786, 488788, 488789, 488790, 488806, 488821, 488824, 488827, 488828, 488830, 488833, 488834, 488837, 489232, 489290, 489667, 489712, 489728, 489769, 489770, 489772, 489774, 489775, 489777, 489783, 489787, 489795, 489814, 489866, 490011, 490023, 490096, 490175, 490181, 490209, 490210, 490220, 490253, 490256, 490267, 490296, 490303, 490320, 490322, 490341, 490380, 490384, 490424, 490442, 490453, 490462, 490482, 490516, 490517, 490518, 490527, 490529, 490535, 490545, 490548, 490549, 490553, 490560, 490562, 490573, 490576, 490577, 490582, 490586, 490588, 490591, 490596, 490600, 490603, 490612, 490629, 490632, 490651, 490652, 490734, 490735, 490736, 490737, 490752, 490756, 490911, 490986, 491084, 491090, 491220, 491312, 491320, 491345, 491396, 491399, 491400, 491403, 491404, 491405, 491406, 491407, 491408, 491409, 491410, 491413, 491419, 491550, 491584, 491587, 491597, 491609, 491611, 491615, 491618, 491619, 491621, 491623, 491624, 491625, 491626, 491631, 491632, 491639, 491644, 491648, 491657, 491658, 491662, 491665, 491666, 491669, 491672, 491675, 491676, 491677, 491683, 491689, 491694, 491759, 491807, 491908, 491937, 491938, 492049, 492134, 492153, 492159, 492160, 492165, 492182, 492187, 492188, 492211, 492213, 492314, 492666, 493040, 493621, 494288, 494485, 494486, 494487, 494518, 494523, 494543, 494571, 494575, 494580, 494581, 494588, 494599, 494602, 494631, 494690, 494760, 494769, 494797, 494892, 494893, 494894, 494895, 494966, 494974, 495001, 495006, 495150, 495157, 495466, 495555, 495565, 495566, 495567, 495582, 495700, 495757, 495761, 495762, 495766, 495778, 495784, 495789, 495790, 495796, 495797, 495798, 495818, 495819, 495821, 495823, 495826, 495828, 495829, 495830, 495831, 495833, 495834, 495835, 495836, 495837, 495839, 495842, 495845, 495846, 495848, 495849, 495850, 495874, 495895, 495899, 496002, 496138, 496139, 496190, 496193, 496223, 496349, 496373, 496401, 496459, 496472, 496474, 496478, 496486, 496487, 496488, 496494, 496504, 496573, 496606, 496654, 496655, 496724, 497034, 497145, 497252, 497268, 497274, 497521, 497860, 497867, 498028, 498068, 498125, 498146, 498252, 498285, 498347, 498375, 498376, 498389, 498470, 498473, 498474, 498476, 498540, 498553, 498659, 498779, 498782, 498960, 499028, 499029, 499032, 499034, 499049, 499062, 499070, 499090, 499095, 499153, 499167, 499178, 499189, 499301, 499303, 499306, 499312, 499316, 499483, 499519, 499551, 499605, 499683, 499684, 499992, 500036, 500130, 500188, 500268, 500303, 500311, 500482, 500558, 500575, 500625, 500743, 500748, 500810, 500923, 500942, 500943, 501001, 501017, 501029, 501045, 501078, 501115, 501133, 501140, 501160, 501273, 501289, 501291, 501304, 501306, 501310, 501311, 501315, 501317, 501320, 501321, 501323, 501335, 501336, 501337, 501344, 501353, 501354, 501356, 501357, 501376, 501378, 501382, 501391, 501392, 501400, 501536, 501565, 501566, 501567, 501642, 501643, 501651, 501681, 501768, 501850, 501866, 501899, 501902, 501941, 501942, 501944, 501960, 501975, 502006, 502015, 502041, 502042, 502043, 502044, 502045, 502051, 502055, 502274, 502275, 502353, 502452, 502497, 502514, 502568, 502577, 502602, 502604, 502628, 502640, 502647, 502656, 502664, 502667, 502668, 502670, 502671, 502696, 502711, 502724, 502728, 502779, 502808, 502814, 502818, 502826, 502834, 502876, 502885, 502888, 502983, 503007, 503015, 503284, 503302, 503333, 503478, 503485, 503494, 503500, 503518, 503773, 503775, 503776, 503782, 503783, 503784, 503785, 503787, 503788, 503809, 503898, 504122, 504218, 504323, 504325, 504355, 504885, 505003, 505005, 505006, 505009, 505764, 505822, 505948, 506431, 506802, 507071, 507075, 507081, 507173, 507186, 507191, 507386, 507401, 507417, 507467, 507468, 507478, 507589, 507590, 507594, 507595, 507597, 507598, 507599, 507600, 507624, 507637, 507640, 507646, 507660, 507661, 507672, 507674, 507757, 507767, 507778, 507792, 507830, 507836, 507837, 507854, 507864, 507959, 507965, 507968, 507973, 507975, 507977, 507980, 507990, 507996, 507999, 508001, 508002, 508050, 508057, 508078, 508080, 508089, 508103, 508111, 508145, 508353, 508404, 508407, 508672, 508674, 508675, 508678, 508680, 508728, 508729, 508731, 508755, 508830, 508832, 508835, 508837, 508839, 508841, 508846, 508852, 508857, 508894, 508919, 508965, 508971, 508992, 509023, 509024, 509025, 509031, 509051, 509054, 509152, 509182, 509204, 509285, 509333, 509338, 509340, 509341, 509343, 509369, 509370, 509372, 509387, 509435, 509446, 509479, 509592, 509664, 509700, 509705, 509706, 509708, 509709, 509710, 509717, 509740, 509867, 509899, 509970, 509971, 510095, 510260, 510379, 510381, 510382, 510561, 510609, 510610, 510647, 510726, 510817, 510937, 510938, 510941, 511452, 511453, 511456, 511481, 511653, 511756, 511758, 511759, 511760, 511769, 511777, 511954, 512022, 512041, 512055, 512056, 512057, 512068, 512069, 512071, 512073, 512077, 512087, 512089, 512093, 512094, 512099, 512102, 512114, 512215, 512230, 512274, 512296, 512304, 512550, 512551, 512586, 512635, 512668, 512830, 512831, 512835, 512917, 512942, 512970, 512996, 513016, 513079, 513082, 513186, 513195, 513200, 513206, 513212, 513236, 513280, 513282, 513286, 513323, 513344, 513348, 513433, 513487, 513497, 513512, 513729, 513830, 513992, 514041, 514046, 514051, 514055, 514056, 514058, 514059, 514089, 514096, 514099, 514100, 514117, 514123, 514130, 514157, 514162, 514163, 514175, 514176, 514177, 514178, 514179, 514198, 514199, 514240, 514246, 514249, 514250, 514353, 514423, 514427, 514428, 514429, 514438, 514440, 514441, 514446, 514447, 514449, 514452, 514453, 514956, 514959, 514960, 514965, 514966, 515030, 515034, 515035, 515036, 515038, 515078, 515222, 515307, 515308, 515314, 515320, 515410, 515475, 515494, 515495, 515500, 515502, 515505, 515512, 515513, 515515, 515516, 515519, 515520, 515522, 515524, 515525, 515528, 515532, 515533, 515535, 515537, 515542, 515776, 515792, 515841, 515845, 515924, 515938, 516002, 516112, 516120, 516121, 516127, 516458, 516467, 516478, 516504, 516581, 516582, 516601, 517081, 517098, 517122, 517140, 517151, 517167, 517185, 517360, 517613, 517629, 517630, 517631, 517632, 517639, 517640, 517641, 517642, 517661, 517742, 517760, 517770, 517772, 517774, 517788, 517792, 517794, 517805, 517806, 517807, 517808, 517813, 517814, 517815, 517816, 517818, 517820, 517823, 517825, 517826, 517829, 517830, 517831, 517832, 517833, 517837, 517838, 517845, 517849, 517854, 517855, 517856, 517857, 517861, 517862, 517864, 517865, 517870, 517873, 517875, 517877, 517879, 517883, 517887, 517888, 517889, 517890, 517891, 517892, 517894, 517897, 517898, 517899, 517900, 518220, 518239, 518249, 518500, 518501, 518502, 518503, 518504, 518522, 518523, 518631, 518637, 518696, 518697, 518699, 518700, 518974, 518982, 519025, 519026, 519030, 519083, 519090, 519138, 519153, 519155, 519158, 519174, 519176, 519235, 519259, 519359, 519374, 519460, 519462, 519481, 519482, 519492, 519494, 519517, 519527, 519529, 519535, 519536, 519537, 519538, 519545, 519549, 519553, 519632, 519745, 519751, 519804, 519811, 519881, 519893, 519913, 519963, 520050, 520073, 520082, 520084, 520113, 520163, 520165, 520317, 520351, 520430, 520567, 520603, 520622, 520705, 520773, 520828, 520834, 520894, 520942, 520991, 521195, 521215, 521228, 521418, 521515, 521659, 521660, 521661, 521662, 521663, 521664, 521665, 521666, 521667, 521671, 521672, 521674, 521678, 521679, 521680, 521681, 521683, 521686, 521688, 521867, 521944, 522031, 522063, 522065, 522066, 522068, 522069, 522070, 522076, 522077, 522080, 522081, 522086, 522157, 522328, 522564, 522565, 522805, 522931, 522933, 522940, 523023, 523120, 523122, 523139, 523140, 523334, 523336, 523376, 523379, 523402, 523524, 523554, 523761, 523792, 523818, 523819, 523823, 523840, 523873, 523874, 523875, 523876, 523878, 523881, 523882, 523885, 523894, 523896, 523899, 523901, 523906, 523917, 523926, 523932, 523934, 523958, 523976, 523982, 524014, 524027, 524033, 524035, 524046, 524055, 524075, 524101, 524109, 524111, 524112, 524120, 524122, 524125, 524126, 524133, 524160, 524172, 524195, 524212, 524213, 524216, 524223, 524224, 524225, 524228, 524230, 524235, 524236, 524237, 524238, 524299, 524314, 524315, 524328, 524338, 524340, 524341, 524345, 524346, 524348, 524354, 524361, 524383, 524385, 524387, 524402, 524407, 524412, 524414, 524422, 524436, 524455, 524460, 524474, 524476, 524487, 524502, 524507, 524517, 524531, 524560, 524580, 524596, 524603, 524604, 524641, 524656, 524660, 524661, 524701, 524708, 524749, 524755, 524761, 524807, 524812, 524821, 524833, 524849, 524855, 524870, 524900, 524918, 524933, 524985, 524986, 524990, 525056, 525067, 525070, 525096, 525112, 525116, 525126, 525131, 525152, 525155, 525163, 525166, 525171, 525181, 525190, 525196, 525197, 525232, 525238, 525239, 525246, 525250, 525275, 525312, 525320, 525324, 525363, 525365, 525372, 525373, 525379, 525381, 525383, 525402, 525403, 525406, 525411, 525419, 525420, 525421, 525432, 525436, 525441, 525442, 525444, 525447, 525477, 525480, 525493, 525500, 525505, 525506, 525507, 525512, 525528, 525538, 525556, 525557, 525560, 525562, 525580, 525842, 525883, 525967, 525973, 526216, 526274, 526286, 526289, 526290, 526305, 526308, 526319, 526321, 526339, 526356, 526377, 526378, 526425, 526430, 526487, 526795, 526802, 526804, 526813, 526947, 526948, 527069, 527072, 527077, 527078, 527079, 527091, 527095, 527096, 527098, 527099, 527100, 527102, 527103, 527105, 527106, 527109, 527110, 527111, 527255, 527266, 527286, 527304, 527339, 527364, 527369, 527433, 527444, 527474, 527476, 527540, 527566, 527570, 527571, 527573, 527577, 527706, 527731, 527733, 527740, 527756, 527791, 527822, 527826, 527830, 527835, 527845, 527847, 527851, 527852, 527857, 527860, 527863, 527866, 527868, 527869, 527873, 527874, 527875, 527876, 527878, 527912, 527916, 527949, 528130, 528146, 528295, 528296, 528304, 528309, 528312, 528313, 528317, 528323, 528328, 528336, 528338, 528365, 528390, 528396, 528402, 528403, 528404, 528418, 528422, 528441, 528479, 528495, 528586, 528587, 528604, 528629, 528786, 528794, 528863, 528870, 528900, 528905, 528984, 528991, 529034, 529113, 529114, 529218, 529303, 529306, 529312, 529317, 529320, 529325, 529326, 529327, 529330, 529331, 529332, 529333, 529334, 529335, 529336, 529337, 529338, 529339, 529340, 529341, 529346, 529350, 529351, 529352, 529357, 529358, 529360, 529361, 529362, 529363, 529366, 529368, 529369, 529370, 529371, 529372, 529373, 529375, 529376, 529377, 529378, 529379, 529380, 529381, 529383, 529384, 529385, 529386, 529388, 529389, 529390, 529391, 529392, 529393, 529394, 529395, 529396, 529397, 529398, 529399, 529400, 529401, 529402, 529406, 529407, 529408, 529409, 529410, 529412, 529413, 529415, 529417, 529418, 529419, 529420, 529421, 529422, 529423, 529424, 529425, 529428, 529430, 529433, 529434, 529437, 529438, 529439, 529441, 529444, 529445, 529448, 529451, 529475, 529477, 529480, 529481, 529504, 529506, 529507, 529531, 529532, 529533, 529536, 529537, 529539, 529543, 529625, 529817, 529822, 530025, 530074, 530086, 530094, 530104, 530144, 530166, 530189, 530220, 530221, 530223, 530262, 530268, 530283, 530313, 530316, 530317, 530325, 530334, 530339, 530346, 530371, 530379, 530386, 530393, 530396, 530464, 530475, 530476, 530477, 530491, 530494, 530504, 530508, 530513, 530514, 530518, 530519, 530524, 530525, 530527, 530529, 530546, 530550, 530556, 530560, 530561, 530562, 530565, 530569, 530570, 530571, 530577, 530588, 530593, 530597, 530601, 530604, 530605, 530610, 530614, 530615, 530616, 530621, 530627, 530631, 530632, 530635, 530641, 530643, 530644, 530655, 530659, 530667, 530673, 530676, 530678, 530683, 530688, 530694, 530695, 530701, 530703, 530704, 530811, 530812, 530844, 530845, 530846, 530856, 530871, 531039, 531087, 531088, 531100, 531106, 531129, 531130, 531165, 531170, 531286, 531365, 531384, 531516, 531522, 531524, 531525, 531527, 531534, 531629, 531630, 531636, 531639, 531641, 531642, 531646, 531650, 531654, 531658, 531662, 531665, 531667, 531672, 531676, 531957, 531968, 531985, 531986, 531987, 531989, 531990, 531991, 531992, 531995, 531996, 531997, 531998, 532001, 532002, 532003, 532004, 532005, 532007, 532009, 532010, 532013, 532014, 532016, 532017, 532018, 532019, 532021, 532022, 532023, 532025, 532026, 532027, 532028, 532029, 532030, 532032, 532033, 532034, 532106, 532201, 532383, 532388, 532389, 532390, 532391, 532392, 532393, 532394, 532423, 532439, 532777, 533108, 533123, 533263, 533293, 533308, 533309, 533314, 533316, 533317, 533318, 533320, 533322, 533335, 533405, 533427, 533623, 533627, 533628, 533629, 533630, 534273, 534284, 534306, 534416, 534495, 534500, 534699, 534728, 534738, 534768, 534975, 534991, 534996, 535002, 535020, 535021, 535022, 535035, 535039, 535061, 535113, 535115, 535117, 535121, 535163, 535177, 535188, 535197, 535226, 535235, 535266, 535320, 535321, 535350, 535351, 535402, 535417, 535424, 535444, 535446, 535449, 535451, 535454, 535459, 535471, 535474, 535508, 535510, 535511, 535514, 535518, 535556, 535573, 535583, 535615, 535668, 535674, 535682, 535685, 535688, 535689, 535690, 535691, 535692, 535693, 535850, 535984, 536034, 536170, 536183, 536206, 536273, 536274, 536277, 536280, 536302, 536324, 536359, 536360, 536367, 536558, 536572, 536883, 536886, 536888, 536890, 536891, 536892, 536893, 536896, 536897, 536898, 536899, 536900, 537044, 537072, 537105, 537116, 537248, 537263, 537273, 537344, 537350, 537351, 537353, 537354, 537355, 537356, 537364, 537387, 537391, 537525, 537614, 537620, 537628, 537678, 537704, 537731, 537741, 537769, 537770, 537771, 537772, 537780, 537844, 537850, 537857, 537915, 537941, 537966, 537971, 537987, 538049, 538162, 538167, 538238, 538466, 538498, 538691, 538744, 538785, 538791, 538858, 538862, 538866, 538941, 538993, 539051, 539057, 539059, 539060, 539061, 539065, 539076, 539086, 539087, 539096, 539097, 539098, 539099, 539102, 539103, 539104, 539105, 539106, 539107, 539109, 539111, 539115, 539116, 539118, 539121, 539124, 539125, 539127, 539147, 539153, 539154, 539155, 539156, 539157, 539159, 539161, 539162, 539163, 539168, 539170, 539173, 539174, 539178, 539180, 539181, 539189, 539190, 539191, 539192, 539196, 539197, 539198, 539205, 539208, 539210, 539211, 539212, 539214, 539215, 539216, 539217, 539226, 539230, 539231, 539240, 539244, 539248, 539251, 539252, 539253, 539254, 539256, 539258, 539259, 539260, 539262, 539263, 539264, 539265, 539266, 539267, 539268, 539269, 539270, 539271, 539272, 539275, 539279, 539281, 539285, 539292, 539300, 539306, 539315, 539316, 539317, 539320, 539333, 539334, 539342, 539350, 539360, 539369, 539370, 539372, 539373, 539388, 539389, 539399, 539403, 539404, 539405, 539406, 539410, 539411, 539418, 539419, 539439, 539441, 539459, 539483, 539486, 539511, 539512, 539513, 539532, 539533, 539538, 539545, 539565, 539567, 539568, 539571, 539574, 539577, 539588, 539610, 539612, 539726, 539821, 539850, 539929, 539965, 539976, 539989, 539994, 539998, 540014, 540015, 540020, 540029, 540060, 540235, 540271, 540424, 540459, 540461, 540464, 540465, 540467, 540468, 540469, 540471, 540472, 540473, 540474, 540475, 540476, 540477, 540478, 540479, 540481, 540482, 540483, 540484, 540485, 540486, 540487, 540488, 540489, 540490, 540492, 540494, 540504, 540513, 540514, 540515, 540516, 540518, 540529, 540535, 540536, 540561, 540562, 540565, 540569, 540570, 540571, 540572, 540573, 540574, 540575, 540580, 540582, 540591, 540593, 540599, 540600, 540601, 540603, 540613, 540614, 540622, 540623, 540625, 540627, 540628, 540629, 540630, 540632, 540634, 540636, 540637, 540638, 540639, 540640, 540642, 540644, 540645, 540647, 540648, 540666, 540668, 540669, 540670, 540671, 540877, 540889, 540890, 540892, 540898, 541251, 541253, 541255, 541299, 541311, 541335, 541382, 541403, 541407, 541409, 541424, 541425, 541446, 541477, 541496, 541666, 541667, 541674, 541677, 541776, 542140, 542391, 542393, 542394, 542395, 542398, 542399, 542460, 542474, 542543, 542557, 542821, 542856, 542861, 542952, 542971, 543213, 543253, 543254, 543354, 543355, 543356, 543357, 543359, 543361, 543367, 543371, 543408, 543454, 543509, 543525, 543550, 543558, 543723, 543728, 543741, 543746, 543748, 543752, 543779, 543781, 543795, 543807, 543821, 543829, 543831, 543832, 543846, 544086, 544195, 544254, 544259, 544265, 544309, 544326, 544348, 544519, 544523, 544673, 544676, 544682, 544688, 544723, 544781, 544819, 544820, 544892, 544938, 544941, 544947, 544948, 544972, 544976, 544988, 544994, 544998, 545026, 545035, 545065, 545067, 545086, 545112, 545114, 545149, 545242, 545243, 545254, 545260, 545279, 545281, 545283, 545298, 545442, 545498, 546007, 546093, 546095, 546096, 546103, 546104, 546206, 546309, 546342, 546402, 546589, 546639, 546810, 546903, 546988, 547059, 547070, 547071, 547072, 547073, 547074, 547076, 547077, 547080, 547081, 547082, 547089, 547124, 547137, 547138, 547228, 547231, 547282, 547423, 547424, 547430, 547438, 547440, 547447, 547482, 547484, 547486, 547488, 547489, 547528, 547579, 547589, 547626, 547642, 547679, 547711, 547770, 547792, 547835, 547836, 547838, 547839, 547842, 547930, 547975, 547979, 547993, 547994, 548007, 548259, 548421, 548423, 548424, 548425, 548426, 548428, 548435, 548523, 548524, 548525, 548532, 548534, 548537, 548547, 548549, 548552, 548553, 548555, 548556, 548557, 548558, 548559, 548560, 548607, 548686, 548754, 548792, 548793, 548794, 548795, 548796, 548800, 548801, 548802, 548803, 548804, 548805, 548806, 548882, 549009, 549025, 549030, 549099, 549224, 549343, 549344, 549492, 549541, 549544, 549545, 549555, 549556, 549559, 549560, 549561, 549565, 549566, 549569, 549574, 549578, 549579, 549582, 549590, 549593, 549594, 549599, 549600, 549601, 549603, 549605, 549607, 549609, 549611, 549612, 549615, 549617, 549622, 549625, 549627, 549628, 549629, 549632, 549633, 549634, 549636, 549637, 549638, 549641, 549642, 549643, 549646, 549647, 549711, 549718, 549721, 549722, 549726, 549727, 549728, 549730, 549734, 549735, 549737, 549738, 549741, 549750, 549753, 549755, 549765, 549766, 549772, 549775, 549780, 549786, 549787, 549789, 549790, 549801, 549804, 549811, 549815, 549820, 549826, 549833, 549836, 550129, 550187, 550213, 550247, 550286, 550292, 550498, 550499, 550500, 550501, 550504, 550505, 550507, 550511, 550513, 550514, 550533, 550563, 550572, 550575, 550580, 550604, 550605, 550633, 550634, 550659, 550660, 550671, 550673, 550685, 550686, 550689, 550690, 550692, 550694, 550698, 550699, 550704, 550706, 550733, 550817, 550834, 550835, 550875, 550893, 550921, 550925, 551003, 551005, 551052, 551062, 551083, 551096, 551134, 551139, 551173, 551197, 551205, 551230, 551267, 551323, 551403, 551550, 551604, 551624, 551635, 551695, 551748, 551781, 551878, 551986, 551990, 552167, 552364, 552400, 552873, 552877, 552880, 552882, 552883, 552885, 552896, 552908, 552943, 552975, 552982, 553057, 553077, 553082, 553150, 553308, 553447, 553472, 553658, 553732, 554406, 554417, 554418, 554421, 554422, 554423, 554424, 554425, 554426, 554434, 554502, 554503, 554805, 554851, 555026, 555027, 555188, 555225, 555265, 555522, 555525, 555527, 555528, 555532, 555536, 555585, 555598, 555606, 555615, 555618, 555626, 555651, 555654, 555676, 555890, 555900, 555980, 555981, 555986, 556008, 556283, 556438, 556580, 556835, 556903, 557072, 557073, 557075, 557176, 557232, 557291, 557353, 557354, 557355, 557384, 557387, 557481, 557508, 557524, 557536, 557547, 557563, 557589, 557610, 557615, 557622, 557638, 557670, 557674, 557677, 557722, 557728, 557733, 557749, 557783, 557784, 557801, 557808, 557816, 557839, 557846, 557849, 557850, 557851, 557852, 557858, 557877, 557885, 557898, 557899, 557902, 557903, 557937, 557943, 557953, 557961, 557985, 558010, 558039, 558049, 558054, 558068, 558139, 558147, 558183, 558187, 558194, 558221, 558241, 558266, 558279, 558289, 558357, 558364, 558370, 558373, 558405, 558427, 558446, 558450, 558467, 558474, 558485, 558488, 558504, 558537, 558600, 558630, 558648, 558655, 558657, 558660, 558661, 558662, 558663, 558664, 558812, 558830, 558837, 558847, 559001, 559275, 559358, 559364, 559397, 559406, 559416, 559419, 559431, 559442, 559443, 559493, 559550, 559580, 559587, 559601, 559713, 559768, 559770, 559777, 559864, 559904, 559909, 559920, 559929, 559931, 559932, 559933, 559934, 559987, 560080, 560139, 560170, 560187, 560195, 560219, 560222, 560243, 560317, 560339, 560348, 560363, 560462, 560470, 560477, 560657, 560904, 560922, 560923, 560948, 560967, 561092, 561119, 561348, 561356, 561364, 561375, 561378, 561397, 561593, 561608, 561693, 561703, 561716, 561832, 562086, 562096, 562097, 562098, 562101, 562102, 562103, 562104, 562106, 562107, 562108, 562110, 562348, 562417, 562453, 562637, 562650, 562714, 562830, 562832, 562833, 562835, 562837, 562839, 562991, 562997, 562999, 563004, 563011, 563027, 563042, 563046, 563073, 563211, 563212, 563249, 563257, 563260, 563287, 563393, 563398, 563399, 563416, 563417, 563418, 563431, 563438, 563447, 563453, 563508, 563516, 563518, 563519, 563521, 563522, 563524, 563526, 563531, 563533, 563534, 563538, 563542, 563543, 563546, 563547, 563555, 563559, 563597, 563602, 563641, 563773, 563956, 563959, 563966, 563967, 563976, 564006, 564007, 564096, 564097, 564099, 564100, 564101, 564102, 564103, 564104, 564106, 564114, 564215, 564243, 564253, 564260, 564362, 564411, 564452, 564458, 564461, 564547, 564577, 564580, 564583, 564584, 564862, 565163, 565294, 565344, 565426, 565468, 565718, 565951, 565953, 566089, 566090, 566101, 566133, 566135, 566176, 566181, 566253, 566265, 566285, 566320, 566335, 566375, 566381, 566384, 566385, 566457, 566468, 566551, 566564, 566574, 566598, 566625, 566626, 567661, 567680, 567692, 567695, 567724, 567728, 567730, 567737, 567745, 567753, 567787, 567788, 567792, 567793, 567806, 567816, 567830, 567831, 567834, 567838, 567839, 567841, 567858, 567861, 567885, 567892, 567905, 567915, 567918, 567919, 568165, 568200, 568203, 568258, 568259, 568279, 568318, 568319, 568339, 568352, 568390, 568437, 568449, 568450, 568461, 568477, 568485, 568491, 568533, 568558, 568559, 568591, 568609, 568622, 568637, 568642, 568646, 568657, 568679, 568680, 568813, 568825, 568827, 568828, 568833, 568847, 568867, 568874, 568876, 568880, 568972, 568989, 569011, 569014, 569016, 569017, 569036, 569043, 569045, 569065, 569084, 569113, 569123, 569155, 569321, 569355, 569359, 569381, 569403, 569430, 569439, 569440, 569475, 569486, 569507, 569509, 569530, 569532, 569537, 569551, 569600, 569607, 569611, 569645, 569650, 569769, 570007, 570008, 570252, 570439, 570446, 570556, 570575, 570599, 570768, 570788, 570789, 570796, 570819, 570915, 571028, 571077, 571092, 571157, 571162, 571180, 571195, 571199, 571225, 571233, 571252, 571268, 571271, 571384, 571876, 571914, 571930, 571932, 571959, 572005, 572008, 572211, 572214, 572223, 572226, 572228, 572229, 572239, 572245, 572354, 572364, 572367, 572368, 572369, 572370, 572371, 572372, 572373, 572374, 572375, 572376, 572377, 572378, 572379, 572385, 572386, 572387, 572388, 572389, 572390, 572391, 572392, 572393, 572468, 572513, 572535, 572548, 572575, 572578, 572579, 572582, 572583, 572634, 572767, 572770, 572771, 572772, 572773, 572775, 572926, 572932, 572933, 573044, 573122, 573123, 573125, 573128, 573134, 573138, 573173, 573237, 573335, 573340, 573344, 573353, 573355, 573359, 573363, 573364, 573365, 573366, 573367, 573368, 573369, 573371, 573374, 573375, 573378, 573381, 573383, 573386, 573388, 573392, 573394, 573397, 573404, 573410, 573416, 573420, 573421, 573422, 573423, 573425, 573428, 573429, 573430, 573436, 573438, 573444, 573448, 573451, 573457, 573461, 573462, 573463, 573468, 573471, 573472, 573475, 573555, 573556, 573557, 573561, 573713, 573715, 573739, 573848, 573950, 574198, 574228, 574233, 574410, 574411, 574412, 574455, 574456, 574469, 574485, 574806, 574807, 574898, 574910, 574921, 574961, 574964, 574968, 574971, 575001, 575064, 575065, 575066, 575067, 575069, 575075, 575076, 575077, 575085, 575093, 575099, 575101, 575102, 575103, 575107, 575108, 575114, 575116, 575117, 575120, 575145, 575168, 575338, 575376, 575402, 575429, 575576, 575577, 575583, 575603, 575604, 575609, 575610, 575615, 575622, 575631, 575632, 575633, 575639, 575643, 575651, 575652, 575653, 575654, 575656, 575662, 575664, 575667, 575673, 575676, 575677, 575695, 575698, 575700, 575718, 575726, 575729, 575738, 575756, 576030, 576077, 576178, 576188, 576567, 576569, 576599, 576607, 576635, 576671, 576682, 576695, 576700, 576759, 576778, 576779, 576882, 576893, 576897, 576902, 576943, 576948, 576949, 576977, 576984, 577007, 577008, 577150, 577151, 577154, 577158, 577159, 577163, 577164, 577165, 577166, 577167, 577170, 577172, 577174, 577176, 577177, 577178, 577179, 577180, 577182, 577183, 577230, 577232, 577234, 577236, 577244, 577360, 577469, 577627, 577681, 577792, 577793, 577794, 577796, 577798, 577806, 577823, 577855, 577881, 577995, 578282, 578672, 578763, 578787, 578959, 579102, 579103, 579111, 579115, 579122, 579126, 579128, 579129, 579140, 579225, 579250, 579278, 579290, 579293, 579340, 579358, 579359, 579360, 579392, 579401, 579422, 579635, 579643, 579650, 579653, 579661, 579711, 579712, 579746, 579747, 579749, 579751, 579752, 579754, 579756, 579757, 579759, 579760, 579761, 579763, 579765, 579767, 579770, 579773, 579775, 579777, 579778, 579779, 579781, 579791, 579866, 579868, 579914, 579932, 579973, 580015, 580023, 580089, 580211, 580233, 580238, 580242, 580246, 580250, 580259, 580260, 580266, 580270, 580272, 580446, 580453, 580454, 580456, 580552, 580618, 580667, 580668, 580673, 580686, 581361, 581381, 581382, 581386, 581387, 581388, 581394, 581395, 581396, 581403, 581412, 581419, 581425, 581428, 581455, 581462, 581469, 581493, 581495, 581526, 581527, 581549, 581550, 581557, 581577, 581597, 581669, 581680, 581694, 581701, 581710, 581729, 581734, 581749, 581750, 581757, 581785, 581802, 581804, 581812, 581815, 581816, 581822, 581826, 581844, 581855, 581857, 581859, 581871, 581875, 581882, 581894, 581906, 581907, 581915, 581918, 581921, 581923, 581939, 581944, 581948, 581954, 581959, 581960, 581965, 581976, 581987, 581998, 582004, 582015, 582017, 582033, 582038, 582046, 582052, 582128, 582162, 582173, 582188, 582192, 582198, 582230, 582232, 582239, 582268, 582296, 582297, 582298, 582306, 582314, 582317, 582319, 582320, 582356, 582377, 582381, 582430, 582439, 582467, 582472, 582473, 582474, 582481, 582501, 582545, 582548, 582561, 582563, 582570, 582574, 582577, 582584, 582609, 582645, 582674, 582725, 582888, 582911, 582962, 582977, 582978, 583036, 583044, 583052, 583059, 583123, 583131, 583139, 583140, 583146, 583153, 583157, 583163, 583165, 583167, 583171, 583179, 583181, 583185, 583196, 583198, 583202, 583223, 583264, 583300, 583352, 583357, 583358, 583359, 583360, 583361, 583362, 583363, 583364, 583367, 583377, 583569, 583614, 583665, 583673, 583732, 583746, 583756, 583943, 584072, 584377, 584421, 584457, 584476, 584655, 584707, 584719, 584720, 584727, 584786, 584876, 584877, 585174, 585179, 585184, 585192, 585209, 585233, 585237, 585239, 585330, 585353, 585368, 585440, 585445, 585490, 585496, 585497, 585582, 585583, 585593, 585595, 585599, 585955, 586002, 586008, 586010, 586020, 586043, 586048, 586049, 586054, 586084, 586085, 586087, 586116, 586124, 586125, 586128, 586135, 586143, 586146, 586261, 586269, 586271, 586274, 586276, 586290, 586291, 586305, 586334, 586336, 586338, 586339, 586340, 586343, 586345, 586374, 586378, 586431, 586432, 586446, 586545, 586546, 586559, 586568, 586573, 586654, 586683, 586691, 586692, 586783, 586787, 586940, 586972, 586993, 587062, 587074, 587122, 587126, 587139, 587150, 587155, 587158, 587159, 587172, 587173, 587269, 587291, 587295, 587296, 587297, 587299, 587317, 587327, 587371, 587399, 587400, 587710, 587712, 587808, 587845, 587938, 588103, 588116, 588183, 588237, 588261, 588319, 588324, 588332, 588334, 588376, 588390, 588397, 588401, 588403, 588405, 588526, 588619, 588620, 588621, 588622, 588623, 588801, 588893, 588910, 588927, 588937, 588948, 588969, 588982, 588988, 589000, 589005, 589038, 589201, 589401, 589407, 589415, 589440, 589443, 589915, 589930, 589939, 589942, 590026, 590027, 590028, 590029, 590031, 590034, 590035, 590042, 590046, 590052, 590053, 590054, 590055, 590058, 590059, 590063, 590064, 590071, 590075, 590076, 590079, 590081, 590082, 590085, 590088, 590089, 590091, 590092, 590094, 590096, 590236, 590266, 590326, 590504, 590643, 590706, 590728, 590750, 590963, 590964, 591006, 591037, 591041, 591049, 591050, 591051, 591052, 591053, 591056, 591058, 591060, 591062, 591063, 591064, 591092, 591299, 591312, 591322, 591336, 591371, 591375, 591381, 591402, 591420, 591421, 591434, 591452, 591454, 591475, 591545, 591560, 591569, 591588, 591592, 591605, 591642, 591672, 591673, 591719, 591742, 591755, 591763, 591769, 591784, 591787, 591838, 591853, 591875, 591881, 591893, 591894, 591904, 591910, 591920, 591922, 591928, 591934, 591935, 591954, 591962, 591966, 591991, 592038, 592041, 592046, 592067, 592081, 592090, 592100, 592105, 592107, 592128, 592130, 592144, 592153, 592171, 592186, 592188, 592225, 592235, 592238, 592260, 592282, 592309, 592310, 592324, 592331, 592342, 592369, 592389, 592402, 592407, 592428, 592439, 592444, 592446, 592464, 592484, 592496, 592502, 592508, 592605, 592652, 592662, 592716, 592717, 592743, 592744, 592755, 592756, 592759, 592760, 592763, 592767, 592768, 592770, 592774, 592775, 592779, 592785, 592789, 592791, 592792, 592806, 592814, 592815, 592822, 592825, 592828, 592832, 592835, 592836, 592840, 592852, 592876, 592928, 592996, 592998, 593005, 593006, 593007, 593008, 593011, 593015, 593024, 593026, 593027, 593041, 593042, 593043, 593050, 593054, 593055, 593103, 593104, 593130, 593136, 593141, 593164, 593165, 593166, 593167, 593168, 593169, 593170, 593171, 593172, 593173, 593174, 593175, 593176, 593177, 593178, 593179, 593180, 593181, 593183, 593195, 593204, 593214, 593226, 593228, 593236, 593242, 593246, 593250, 593267, 593276, 593280, 593284, 593286, 593291, 593293, 593297, 593299, 593304, 593305, 593311, 593313, 593314, 593315, 593316, 593317, 593324, 593359, 593381, 593386, 593406, 593413, 593418, 593430, 593435, 593448, 593455, 593466, 593475, 593477, 593478, 593479, 593480, 593481, 593488, 593489, 593490, 593491, 593492, 593493, 593494, 593496, 593497, 593498, 593499, 593500, 593501, 593502, 593503, 593504, 593505, 593506, 593507, 593508, 593509, 593510, 593511, 593512, 593513, 593514, 593515, 593516, 593517, 593518, 593519, 593520, 593521, 593522, 593523, 593524, 593525, 593526, 593527, 593528, 593529, 593683, 593684, 593685, 593759, 593937, 593953, 593977, 593978, 593979, 593980, 593981, 593982, 593986, 593998, 594000, 594001, 594009, 594011, 594017, 594018, 594020, 594021, 594024, 594027, 594029, 594031, 594037, 594038, 594039, 594040, 594041, 594042, 594043, 594044, 594045, 594046, 594049, 594052, 594054, 594055, 594059, 594060, 594064, 594065, 594066, 594070, 594071, 594073, 594077, 594085, 594088, 594089, 594090, 594094, 594095, 594099, 594101, 594103, 594105, 594106, 594108, 594112, 594114, 594115, 594117, 594118, 594119, 594193, 594348, 594357, 594358, 594390, 594399, 594414, 594415, 594416, 594418, 594419, 594420, 594421, 594488, 594503, 594512, 594513, 594540, 594541, 594549, 594557, 594559, 594607, 594651, 594759, 594763, 594776, 594777, 594788, 594793, 594794, 594796, 594800, 594802, 594803, 594804, 594815, 594818, 594844, 595070, 595071, 595128, 595153, 595215, 595289, 595305, 595315, 595328, 595348, 595349, 595350, 595352, 595371, 595384, 595401, 595408, 595410, 595414, 595418, 595420, 595434, 595436, 595439, 595440, 595465, 595494, 595581, 595585, 595589, 595594, 595600, 595641, 595668, 595693, 595696, 595704, 596228, 596235, 596237, 596246, 596294, 596295, 596307, 596316, 596318, 596319, 596384, 596389, 596390, 596392, 596435, 596436, 596439, 596447, 596451, 596452, 596462, 596463, 596466, 596467, 596468, 596469, 596470, 596486, 596572, 596622, 596625, 596628, 596629, 596635, 596637, 596640, 596641, 596643, 596651, 596654, 596659, 596660, 596663, 596664, 596665, 596669, 596670, 596675, 596676, 596677, 596757, 596807, 596835, 596855, 596873, 596874, 596875, 596878, 596879, 596880, 596902, 596938, 596950, 596955, 596958, 597035, 597067, 597270, 597320, 597321, 597323, 597343, 597362, 597363, 597386, 597389, 597415, 597420, 597427, 597437, 597439, 597504, 597652, 597662, 597674, 597759, 597780, 597809, 597810, 597924, 597934, 597942, 597946, 597949, 597951, 597952, 597959, 597962, 597967, 598010, 598018, 598064, 598117, 598119, 598123, 598128, 598130, 598136, 598137, 598139, 598142, 598143, 598149, 598159, 598162, 598165, 598166, 598168, 598176, 598209, 598211, 598218, 598235, 598266, 598274, 598369, 598381, 598383, 598399, 598407, 598409, 598411, 598414, 598415, 598419, 598421, 598422, 598510, 598519, 598530, 598565, 598570, 598650, 598711, 598735, 598738, 598739, 598740, 598744, 598750, 598753, 598983, 598996, 598997, 598998, 599000, 599001, 599006, 599085, 599116, 599822, 600155, 600300, 600307, 600505, 600524, 600816, 601141, 601142, 601148, 601162, 601220, 601225, 601227, 601261, 601348, 601510, 601542, 601553, 601557, 601559, 601561, 601571, 601574, 601582, 601591, 601619, 601891, 601923, 601938, 602045, 602125, 602173, 602196, 602200, 602255, 602292, 602536, 602538, 602540, 602551, 602735, 602908, 602980, 603049, 603197, 603295, 603495, 603538, 603544, 603589, 603591, 603605, 603739, 603742, 603797, 603818, 603857, 603858, 603878, 603891, 603929, 603976, 603989, 604000, 604016, 604024, 604030, 604072, 604097, 604098, 604130, 604148, 604161, 604176, 604181, 604185, 604196, 604218, 604219, 604352, 604364, 604366, 604367, 604372, 604386, 604406, 604413, 604415, 604419, 604511, 604528, 604550, 604553, 604555, 604556, 604575, 604582, 604584, 604663, 604664, 604772, 604773, 604799, 604803, 604839, 604901, 604945, 605005, 605075, 605085, 605100, 605101, 605108, 605115, 605143, 605165, 605202, 605230, 605253, 605265, 605318, 605333, 605334, 605473, 605506, 605515, 605537, 605540, 605598, 605605, 605641, 605759, 605773, 605813, 605885, 605910, 605972, 606080, 606101, 606120, 606162, 606163, 606164, 606165, 606168, 606170, 606171, 606173, 606174, 606183, 606187, 606189, 606218, 606295, 606305, 606324, 606348, 606362, 606388, 606411, 606428, 606430, 606431, 606432, 606471, 606496, 606501, 606522, 606563, 606600, 606632, 606634, 606635, 606660, 606731, 606733, 606754, 606755, 606767, 606790, 606838, 606862, 606949, 607039, 607094, 607140, 607143, 607151, 607154, 607156, 607162, 607163, 607216, 607239, 607241, 607276, 607296, 607344, 607456, 607463, 607496, 607505, 607708, 607721, 608057, 608137, 608141, 608142, 608143, 608145, 608146, 608147, 608148, 608154, 608155, 608157, 608165, 608166, 608184, 608188, 608190, 608191, 608192, 608193, 608194, 608198, 608199, 608201, 608202, 608208, 608209, 608210, 608216, 608217, 608221, 608222, 608223, 608224, 608225, 608226, 608227, 608228, 608229, 608230, 608231, 608232, 608470, 608566, 608585, 608609, 608610, 608611, 608929, 608988, 608989, 609008, 609073, 609165, 609201, 609242, 609456, 609462, 609468, 609483, 609488, 609489, 609500, 609502, 609523, 609558, 609631, 609667, 609766, 609808, 609859, 609862, 609902, 609958, 609966, 609989, 610125, 610131, 610145, 610156, 610267, 610272, 610361, 610393, 610450, 610456, 610475, 610537, 610614, 610615, 610616, 610618, 610619, 610622, 610623, 610624, 610633, 610635, 610640, 610811, 610812, 610938, 610968, 611064, 611113, 611184, 611185, 611203, 611209, 611272, 611285, 611353, 611368, 611374, 611383, 611395, 611405, 611423, 611424, 611425, 611432, 611434, 611436, 611660, 611661, 611662, 611663, 611665, 611742, 611948, 611951, 611959, 611960, 611961, 612053, 612055, 612065, 612066, 612069, 612147, 612187, 612188, 612202, 612217, 612413, 612422, 612426, 612462, 612471, 612491, 612763, 612881, 612886, 612934, 612945, 612948, 612949, 612951, 612958, 612960, 612966, 612972, 612975, 613003, 613008, 613011, 613012, 613015, 613020, 613022, 613030, 613034, 613037, 613060, 613061, 613075, 613131, 613197, 613204, 613206, 613207, 613261, 613640, 614087, 614088, 614089, 614090, 614091, 614092, 614093, 614094, 614095, 614096, 614097, 614098, 614099, 614100, 614157, 614398, 614451, 614645, 614646, 614702, 614931, 614933, 614936, 614938, 614950, 614975, 615097, 615159, 615265, 615266, 615267, 615268, 615462, 615503, 615529, 615530, 615535, 615583, 615715, 615721, 615722, 615726, 615727, 615728, 615733, 615767, 615768, 615771, 615798, 615800, 615801, 615859, 615901, 615945, 615982, 615983, 615993, 615998, 616038, 616045, 616046, 616058, 616060, 616089, 616090, 616093, 616175, 616260, 616262, 616309, 616318, 616372, 616392, 616440, 616527, 616534, 616574, 616664, 616683, 616710, 616816, 616822, 616865, 616890, 616901, 616904, 616926, 616971, 617041, 617126, 617479, 617754, 617886, 617897, 617981, 618002, 618006, 618032, 618174, 618182, 618226, 618233, 618244, 618277, 618354, 618437, 618475, 618519, 618552, 618554, 618606, 618716, 618719, 618887, 618891, 618895, 618916, 619007, 619021, 619024, 619034, 619131, 619160, 619302, 619303, 619304, 619312, 619332, 619569, 619638, 619825, 619888, 619889, 619894, 619897, 619905, 619906, 619909, 619910, 619911, 619913, 619914, 619915, 619917, 619919, 619927, 619996, 620039, 620073, 620095, 620112, 620113, 620130, 620157, 620159, 620202, 620237, 620322, 620360, 620361, 620448, 620450, 620604, 620661, 620715, 620717, 620718, 620808, 620848, 620898, 620902, 620969, 621281, 621299, 621300, 621302, 621303, 621304, 621309, 621311, 621571, 621687, 621696, 621707, 621773, 621775, 621780, 621796, 621799, 621800, 621897, 621994, 622112, 622114, 622115, 622118, 622627, 622759, 622793, 622794, 622795, 622796, 622798, 622799, 622805, 622807, 622808, 622810, 622820, 622905, 622967, 623054, 623087, 623175, 623178, 623180, 623184, 623319, 623366, 623444, 623453, 623456, 623716, 623810, 623820, 623838, 623851, 623941, 623979, 623985, 624010, 624321, 624382, 624383, 624478, 624494, 624647, 624649, 624653, 624654, 624669, 624673, 624685, 624692, 624765, 624775, 624794, 624932, 624961, 624971, 624977, 625023, 625224, 625355, 625362, 625383, 625384, 625386, 625388, 625390, 625404, 625424, 625450, 625458, 625464, 625520, 625521, 625532, 625616, 625620, 625622, 625628, 625683, 625736, 625767, 625768, 625799, 625820, 625857, 625860, 625861, 625874, 625885, 625894, 625909, 625910, 625913, 625975, 625976, 626060, 626111, 626253, 626257, 626318, 626354, 626438, 626546, 626552, 626602, 626608, 626609, 626610, 626612, 626613, 626852, 626976, 626979, 626982, 626985, 626986, 626987, 626988, 626989, 626990, 626991, 626992, 626994, 627001, 627007, 627012, 627113, 627215, 627332, 627334, 627338, 627454, 627871, 627926, 627948, 627962, 627969, 627974, 627981, 627986, 628007, 628015, 628029, 628030, 628036, 628124, 628137, 628143, 628157, 628178, 628180, 628181, 628183, 628195, 628196, 628199, 628276, 628291, 628292, 628293, 628302, 628400, 628401, 628402, 628403, 628404, 628405, 628406, 628407, 628408, 628409, 628410, 628411, 628412, 628414, 628415, 628418, 628419, 628420, 628421, 628422, 628423, 628425, 628426, 628430, 628431, 628433, 628473, 628475, 628483, 628599, 628600, 628611, 628614, 628617, 628618, 628631, 628639, 628723, 628782, 628918, 629117, 629277, 629281, 629286, 629287, 629318, 629384, 629397, 629431, 629473, 629520, 629527, 629530, 629576, 629626, 629660, 629665, 629814, 629820, 630085, 630117, 630262, 630310, 630317, 630318, 630326, 630327, 630328, 630330, 630485, 630490, 630521, 630533, 630572, 630610, 630650, 630697, 630911, 630967, 630973, 631037, 631038, 631039, 631088, 631106, 631112, 631114, 631130, 631188, 631189, 631225, 631227, 631228, 631296, 631301, 631303, 631304, 631308, 631310, 631312, 631314, 631316, 631317, 631318, 631319, 631324, 631325, 631326, 631328, 631329, 631333, 631336, 631339, 631343, 631356, 631357, 631358, 631369, 631372, 631516, 631517, 631518, 631519, 631521, 631523, 631524, 631525, 631526, 631527, 631529, 631530, 631531, 631532, 631533, 631534, 631535, 631536, 631539, 631541, 631542, 631543, 631544, 631545, 631546, 631547, 631586, 631606, 631614, 631733, 631736, 631737, 631740, 631752, 631757, 631758, 631759, 631760, 631762, 631765, 631781, 631807, 631832, 631860, 631960, 632062, 632165, 632166, 632237, 632289, 632290, 632293, 632294, 632472, 632631, 632632, 632740, 632798, 632814, 632851, 633021, 633030, 633092, 633098, 633106, 633112, 633113, 633119, 633250, 633310, 633314, 633327, 633335, 633341, 633342, 633343, 633344, 633528, 633539, 633540, 633541, 633637, 633696, 633715, 633716, 633717, 633721, 633723, 633726, 633727, 633788, 633890, 633992, 634041, 634043, 634158, 634159, 634205, 634239, 634343, 634345, 634347, 634396, 634401, 634409, 634413, 634557, 634558, 634559, 634575, 634582, 634646, 634649, 634662, 634663, 634679, 634685, 634731, 634732, 634733, 634747, 634780, 634781, 634782, 634787, 634928, 634980, 635011, 635016, 635032, 635233, 635234, 635240, 635286, 635287, 635289, 635290, 635291, 635292, 635293, 635294, 635296, 635297, 635298, 635299, 635300, 635305, 635333, 635336, 635352, 635353, 635357, 635366, 635371, 635378, 635408, 635465, 635467, 635543, 635750, 635814, 635818, 635822, 635827, 635875, 635929, 636072, 636086, 636097, 636105, 636148, 636184, 636185, 636206, 636207, 636208, 636346, 636347, 636350, 636357, 636360, 636381, 636382, 636445, 636452, 636472, 636477, 636479, 636490, 636511, 636514, 636522, 636535, 636564, 636604, 636665, 636759, 636760, 636762, 636766, 636774, 636783, 636786, 636787, 636788, 636789, 636840, 636889, 637149, 637173, 637195, 637425, 637430, 637431, 637432, 637435, 637436, 637437, 637438, 637439, 637440, 637442, 637443, 637445, 637459, 637460, 637498, 637518, 638070, 638783, 638944, 638948, 638952, 638956, 638966, 638968, 638969, 638971, 638972, 638973, 638974, 638976, 638977, 638978, 638979, 638980, 638982, 638983, 638984, 638985, 638986, 638987, 638989, 638991, 638992, 638993, 638994, 639035, 639062, 639189, 639336, 639379, 639497, 639617, 639632, 639640, 639642, 639690, 639819, 639859, 639874, 639875, 639949, 639950, 639954, 640116, 640175, 640197, 640204, 640205, 640214, 640225, 640230, 640248, 640251, 640287, 640306, 640317, 640338, 640343, 640417, 640421, 640650, 640698, 640722, 641080, 641409, 641429, 641442, 641455, 641457, 641458, 641459, 641460, 641461, 641462, 641463, 641589, 641590, 641651, 641661, 641670, 641732, 641736, 641740, 641741, 641755, 641759, 641762, 641915, 641948, 642101, 642110, 642399, 642411, 642427, 642761, 642979, 642981, 642982, 642984, 643013, 643035, 643123, 643131, 643139, 643239, 643248, 643250, 643252, 643266, 643278, 643280, 643285, 643348, 643363, 643372, 643379, 643414, 643434, 643445, 643447, 643658, 643659, 643693, 643698, 643699, 643702, 643707, 643717, 643720, 643739, 643740, 644038, 644181, 644197, 644259, 644427, 644438, 644439, 644440, 644717, 644767, 644768, 644769, 644770, 644772, 644808, 644811, 644812, 644820, 644823, 644824, 644825, 644865, 644867, 644935, 645042, 645043, 645225, 645271, 645345, 645347, 645351, 645379, 645453, 645491, 645552, 645559, 645578, 645579, 645580, 645581, 645582, 645583, 645585, 645586, 645587, 645588, 645590, 645591, 645597, 645600, 645601, 645603, 645605, 645606, 645607, 645609, 645611, 645612, 645613, 645616, 645617, 645618, 645619, 645621, 645623, 645626, 645632, 645634, 645635, 645636, 645641, 645642, 645644, 645647, 645654, 645655, 645657, 645658, 645659, 645660, 645661, 645662, 645664, 645665, 645666, 645668, 645672, 645673, 645674, 645676, 645679, 645680, 645681, 645686, 645688, 645690, 645693, 645695, 645700, 645701, 645702, 645704, 645705, 645708, 645709, 645712, 645713, 645714, 645753, 645868, 645875, 645885, 645886, 646036, 646039, 646041, 646043, 646044, 646105, 646154, 646164, 646242, 646285, 646348, 646372, 646373, 646375, 646452, 646477, 646503, 646518, 646734, 646735, 646736, 646737, 646739, 646749, 646752, 646753, 646821, 646822, 646828, 646839, 646856, 646912, 646944, 646984, 647013, 647049, 647060, 647086, 647116, 647200, 647228, 647237, 647257, 647294, 647296, 647298, 647301, 647306, 647311, 647316, 647317, 647318, 647319, 647333, 647336, 647340, 647341, 647342, 647343, 647352, 647356, 647358, 647389, 647398, 647401, 647406, 647569, 647570, 647571, 647597, 647598, 647663, 647687, 647715, 647883, 647903, 647971, 648190, 648435, 648526, 648527, 648600, 648893, 649099, 649110, 649140, 649264, 649270, 649271, 649348, 649481, 649501, 649509, 649540, 649558, 649586, 649652, 649653, 649693, 649714, 649784, 649789, 649806, 649816, 649828, 649911, 649913, 649943, 649989, 649990, 649995, 649998, 650000, 650009, 650013, 650014, 650037, 650038, 650039, 650040, 650165, 650184, 650352, 650460, 650617, 650618, 650619, 650620, 650621, 650622, 650623, 650624, 650625, 650626, 650627, 650628, 650629, 650630, 650631, 650632, 650633, 650634, 650635, 650636, 650637, 650638, 650639, 650640, 650641, 650642, 650643, 650644, 650645, 650646, 650647, 650648, 650649, 650650, 650651, 650657, 650658, 650682, 650749, 650754, 650878, 650880, 650891, 650894, 650895, 650896, 650954, 650965, 650967, 650968, 650987, 650995, 650997, 651222, 651229, 651257, 651267, 651298, 651313, 651390, 651431, 651444, 651508, 651509, 651512, 651513, 651519, 651522, 651606, 651792, 651816, 651817, 651828, 651837, 651840, 651987, 652014, 652082, 652313, 652546, 652547, 652549, 652550, 652553, 652555, 652557, 652558, 652559, 652562, 652563, 652564, 652566, 652572, 652589, 652643, 652646, 652648, 652664, 652669, 652674, 652676, 652692, 652694, 652695, 652701, 652703, 652707, 652708, 652709, 652712, 652713, 652714, 652716, 652717, 652724, 652728, 652731, 652775, 652844, 652865, 652954, 652976, 653035, 653058, 653163, 653189, 653191, 653211, 653290, 653291, 653331, 653341, 653345, 653346, 653347, 653348, 653349, 653353, 653362, 653390, 653565, 653568, 653571, 653629, 653630, 653635, 653647, 653649, 653768, 653980, 654079, 654152, 654155, 654157, 654160, 654162, 654163, 654167, 654169, 654170, 654171, 654174, 654178, 654179, 654181, 654184, 654214, 654306, 654555, 654606, 654637, 654677, 654681, 654802, 655004, 655078, 655082, 655083, 655098, 655123, 655128, 655129, 655130, 655138, 655140, 655160, 655168, 655190, 655195, 655196, 655210, 655261, 655264, 655269, 655272, 655305, 655400, 655497, 655499, 655501, 655504, 655505, 655516, 655517, 655518, 655519, 655520, 655540, 655685, 655687, 655720, 655730, 655734, 655736, 655737, 655743, 655749, 655758, 655759, 655760, 655843, 656007, 656104, 656109, 656113, 656114, 656136, 656161, 656185, 656187, 656190, 656194, 656211, 656231, 656234, 656243, 656246, 656248, 656261, 656264, 656277, 656285, 656303, 656306, 656326, 656351, 656359, 656399, 656438, 656439, 656443, 656452, 656453, 656459, 656484, 656501, 656544, 656547, 656561, 656576, 656591, 656596, 656628, 656634, 656642, 656645, 656652, 656671, 656683, 656685, 656708, 656711, 656717, 656726, 656728, 656738, 656742, 656750, 656774, 656790, 656792, 656796, 656803, 656815, 656836, 656859, 656898, 656905, 656912, 656943, 656946, 656975, 656991, 657004, 657028, 657047, 657065, 657068, 657078, 657093, 657109, 657120, 657121, 657122, 657131, 657141, 657143, 657150, 657154, 657156, 657168, 657206, 657245, 657246, 657250, 657252, 657266, 657284, 657299, 657309, 657314, 657315, 657316, 657318, 657331, 657342, 657347, 657359, 657370, 657383, 657416, 657422, 657452, 657457, 657467, 657468, 657472, 657474, 657482, 657488, 657497, 657503, 657517, 657518, 657540, 657545, 657581, 657589, 657612, 657615, 657616, 657620, 657644, 657654, 657657, 657658, 657661, 657670, 657744, 657751, 657758, 657783, 657784, 657801, 657805, 657821, 657823, 657825, 657858, 657878, 657885, 657900, 657939, 657947, 657968, 657971, 657993, 657994, 657995, 657998, 658005, 658012, 658022, 658046, 658096, 658099, 658105, 658106, 658111, 658115, 658129, 658134, 658147, 658152, 658158, 658167, 658182, 658230, 658232, 658248, 658268, 658546, 658656, 658661, 658665, 658666, 658773, 658789, 658792, 658826, 658834, 658930, 658939, 658940, 658967, 658969, 658976, 658978, 658983, 658990, 658991, 658993, 658999, 659003, 659008, 659010, 659012, 659021, 659024, 659025, 659028, 659034, 659035, 659038, 659041, 659045, 659048, 659055, 659056, 659057, 659073, 659112, 659113, 659114, 659135, 659163, 659197, 659203, 659311, 659403, 659475, 659477, 659532, 659555, 659563, 659610, 659612, 659620, 659742, 659743, 659749, 659764, 659790, 659818, 659843, 659844, 659871, 659890, 659941, 659943, 659944, 659961, 659991, 659994, 659995, 660003, 660010, 660015, 660017, 660019, 660033, 660046, 660055, 660061, 660073, 660075, 660077, 660090, 660101, 660103, 660104, 660108, 660129, 660130, 660131, 660132, 660135, 660159, 660163, 660167, 660171, 660172, 660187, 660201, 660216, 660219, 660225, 660241, 660242, 660243, 660255, 660268, 660275, 660327, 660337, 660371, 660388, 660395, 660397, 660404, 660408, 660435, 660461, 660469, 660540, 660542, 660555, 660598, 660599, 660600, 660605, 660621, 660640, 660657, 660663, 660677, 660678, 660702, 660703, 660708, 660722, 660764, 660781, 660783, 660809, 660811, 660855, 660893, 660897, 660901, 660920, 660937, 660947, 660954, 660961, 660979, 661003, 661004, 661014, 661049, 661052, 661057, 661062, 661073, 661085, 661105, 661267, 661272, 661277, 661278, 661286, 661355, 661361, 661369, 661394, 661397, 661440, 661467, 661493, 661641, 661656, 661659, 661660, 661667, 661668, 661669, 661672, 661673, 661674, 661685, 661703, 661735, 661824, 661906, 661920, 661926, 661967, 661981, 661997, 662015, 662028, 662036, 662043, 662147, 662151, 662194, 662212, 662215, 662264, 662360, 662377, 662378, 662390, 662392, 662395, 662399, 662402, 662410, 662427, 662451, 662503, 662506, 662534, 662647, 662658, 662847, 662877, 662883, 662945, 662952, 662965, 662970, 662974, 662980, 662993, 662997, 663000, 663002, 663003, 663004, 663005, 663006, 663007, 663056, 663086, 663087, 663120, 663135, 663157, 663267, 663300, 663316, 663343, 663349, 663355, 663369, 663378, 663392, 663586, 663631, 663632, 663633, 663634, 663653, 663929, 663957, 663968, 664030, 664031, 664032, 664038, 664039, 664040, 664044, 664045, 664060, 664061, 664062, 664065, 664066, 664071, 664072, 664080, 664112, 664130, 664167, 664170, 664197, 664227, 664229, 664233, 664242, 664244, 664280, 664281, 664284, 664293, 664295, 664296, 664321, 664326, 664327, 664328, 664329, 664330, 664333, 664339, 664422, 664522, 664536, 664545, 664639, 664645, 664647, 664679, 664761, 664819, 664924, 665072, 665337, 665509, 665629, 665716, 665733, 665764, 665786, 665789, 665791, 665828, 665902, 665984, 665986, 665994, 665995, 665996, 666005, 666025, 666026, 666027, 666028, 666029, 666032, 666035, 666036, 666037, 666038, 666039, 666188, 666233, 666241, 666254, 666519, 666555, 666562, 666563, 666568, 666571, 666575, 666579, 666580, 666584, 666585, 666586, 666594, 666595, 666598, 666617, 666637, 666639, 666644, 666652, 666653, 666654, 666655, 666657, 666659, 666660, 666697, 666704, 666742, 666744, 666746, 666837, 666843, 666851, 666876, 666879, 666936, 666991, 667005, 667006, 667009, 667019, 667029, 667043, 667079, 667151, 667153, 667301, 667312, 667349, 667351, 667546, 667547, 667548, 667549, 667550, 667551, 667552, 667553, 667554, 667555, 667574, 667746, 667781, 667791, 668072, 668096, 668134, 668306, 668311, 668313, 668456, 668457, 668459, 668537, 668551, 668784, 668826, 668863, 668909, 668964, 668980, 669005, 669013, 669079, 669116, 669121, 669126, 669132, 669139, 669140, 669305, 669406, 669415, 669768, 669771, 669951, 669991, 670233, 670243, 670519, 670520, 670521, 670522, 670618, 670672, 670673, 670707, 670743, 670823, 670853, 670897, 670902, 671061, 671085, 671108, 671115, 671121, 671122, 671125, 671132, 671137, 671145, 671151, 671152, 671153, 671156, 671223, 671252, 671254, 671256, 671267, 671400, 671442, 671457, 671501, 671507, 671572, 671586, 671732, 671738, 671745, 671752, 671871, 671953, 671966, 671967, 672006, 672019, 672025, 672043, 672044, 672385, 672535, 672553, 672631, 672738, 672753, 672754, 672762, 672788, 672805, 672824, 672827, 672834, 672868, 672869, 672874, 672894, 672927, 672928, 672931, 672932, 672934, 672937, 672964, 672965, 672966, 673038, 673039, 673110, 673190, 673238, 673261, 673265, 673383, 673384, 673482, 673483, 673485, 673486, 673487, 673489, 673490, 673491, 673494, 673495, 673496, 673497, 673498, 673500, 673501, 673502, 673505, 673506, 673507, 673508, 673509, 673510, 673513, 673521, 673522, 673523, 673525, 673526, 673527, 673528, 673529, 673530, 673533, 673534, 673539, 673540, 673541, 673542, 673543, 673544, 673545, 673547, 673549, 673550, 673551, 673686, 673692, 673721, 673788, 673851, 674038, 674058, 674097, 674126, 674127, 674128, 674129, 674130, 674246, 674248, 674250, 674258, 674316, 674369, 674373, 674378, 674405, 674416, 674436, 674453, 674467, 674480, 674491, 674499, 674515, 674567, 674588, 674592, 674609, 674644, 674659, 674698, 674854, 675186, 675202, 675535, 675536, 675567, 675568, 675570, 675571, 675576, 675578, 675579, 675581, 675584, 675585, 675587, 675588, 675620, 675787, 675798, 675864, 676070, 676071, 676072, 676092, 676098, 676111, 676139, 676210, 676213, 676214, 676240, 676246, 676269, 676284, 676293, 676305, 676322, 676324, 676345, 676346, 676347, 676349, 676351, 676353, 676354, 676355, 676356, 676357, 676358, 676359, 676360, 676361, 676362, 676364, 676365, 676367, 676368, 676369, 676373, 676375, 676381, 676384, 676386, 676387, 676388, 676389, 676390, 676392, 676395, 676396, 676397, 676398, 676399, 676401, 676402, 676403, 676404, 676406, 676408, 676410, 676411, 676413, 676415, 676416, 676417, 676418, 676425, 676426, 676427, 676428, 676429, 676430, 676432, 676435, 676437, 676439, 676441, 676443, 676446, 676447, 676449, 676450, 676451, 676455, 676559, 676568, 676579]\n",
      "the index number ['nl', 'af', 'fr', 'hr', 'nl', 'de', 'id', 'ro', 'ro', 'de', 'de', 'nl', 'no', 'no', 'ro', 'ro', 'nl', 'ro', 'tl', 'nl', 'nl', 'nl', 'ro', 'de', 'nl', 'nl', 'de', 'sw', 'de', 'es', 'es', 'es', 'es', 'de', 'sl', 'es', 'es', 'sv', 'es', 'es', 'sl', 'so', 'sv', 'de', 'sv', 'de', 'de', 'id', 'es', 'so', 'sv', 'tr', 'pl', 'sw', 'hu', 'af', 'ca', 'vi', 'de', 'af', 'af', 'cy', 'tl', 'ca', 'sq', 'fi', 'af', 'no', 'de', 'et', 'pl', 'vi', 'da', 'so', 'nl', 'it', 'no', 'nl', 'nl', 'ca', 'nl', 'af', 'cy', 'it', 'cy', 'af', 'tr', 'nl', 'it', 'pl', 'so', 'no', 'so', 'no', 'sw', 'en', 'so', 'cy', 'no', 'sl', 'sv', 'hr', 'pl', 'it', 'pl', 'af', 'fr', 'af', 'hr', 'de', 'cy', 'no', 'tl', 'pl', 'vi', 'no', 'nl', 'nl', 'ro', 'tr', 'af', 'fr', 'sv', 'pl', 'fr', 'af', 'en', 'da', 'sl', 'pt', 'cy', 'cy', 'tr', 'de', 'so', 'cy', 'nl', 'tl', 'tl', 'id', 'lt', 'nl', 'fr', 'it', 'fi', 'tl', 'id', 'nl', 'af', 'so', 'af', 'lt', 'hu', 'lt', 'da', 'af', 'tl', 'no', 'en', 'so', 'no', 'de', 'da', 'pl', 'vi', 'sv', 'fi', 'no', 'fr', 'sk', 'sk', 'af', 'en', 'it', 'cy', 'cs', 'af', 'da', 'hu', 'cy', 'cy', 'no', 'so', 'no', 'sv', 'sw', 'pl', 'en', 'hr', 'af', 'no', 'af', 'da', 'so', 'af', 'tr', 'sv', 'so', 'no', 'it', 'en', 'sw', 'en', 'so', 'tr', 'cy', 'da', 'nl', 'cy', 'af', 'so', 'en', 'id', 'hr', 'so', 'fr', 'hr', 'hr', 'af', 'so', 'sq', 'vi', 'fr', 'en', 'af', 'tr', 'lt', 'sl', 'lt', 'fi', 'id', 'af', 'en', 'id', 'de', 'nl', 'de', 'no', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'so', 'tl', 'af', 'id', 'lt', 'en', 'fr', 'hu', 'en', 'nl', 'no', 'hr', 'fr', 'no', 'so', 'no', 'af', 'cy', 'sk', 'tl', 'sq', 'sv', 'nl', 'da', 'nl', 'nl', 'fr', 'no', 'no', 'de', 'nl', 'de', 'da', 'lt', 'hr', 'nl', 'sv', 'de', 'id', 'it', 'nl', 'tl', 'sv', 'nl', 'sw', 'en', 'sw', 'et', 'de', 'nl', 'nl', 'pt', 'so', 'sk', 'sv', 'nl', 'so', 'ro', 'cy', 'ca', 'af', 'cy', 'de', 'it', 'nl', 'da', 'et', 'et', 'fi', 'it', 'af', 'ro', 'it', 'it', 'af', 'de', 'sv', 'id', 'af', 'sk', 'da', 'de', 'tl', 'af', 'fi', 'af', 'tl', 'en', 'et', 'ca', 'de', 'nl', 'id', 'af', 'en', 'nl', 'cy', 'lt', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'fr', 'et', 'so', 'id', 'id', 'sv', 'pt', 'sv', 'es', 'sw', 'es', 'sw', 'sw', 'sv', 'sl', 'sl', 'sl', 'sl', 'sl', 'af', 'af', 'fr', 'da', 'ro', 'sl', 'nl', 'de', 'es', 'hr', 'en', 'lt', 'de', 'so', 'so', 'et', 'nl', 'nl', 'af', 'lt', 'lt', 'lt', 'nl', 'de', 'sv', 'de', 'nl', 'nl', 'en', 'so', 'sv', 'fr', 'en', 'tl', 'no', 'et', 'et', 'lt', 'et', 'id', 'id', 'en', 'tl', 'lt', 'pt', 'hu', 'af', 'af', 'pl', 'no', 'ca', 'es', 'lt', 'lt', 'de', 'fr', 'fr', 'no', 'es', 'no', 'sv', 'de', 'ro', 'sv', 'nl', 'de', 'lt', 'tl', 'en', 'sv', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'tl', 'nl', 'sv', 'so', 'sw', 'de', 'de', 'en', 'pt', 'lv', 'en', 'de', 'nl', 'da', 'pt', 'pt', 'pt', 'pt', 'lt', 'de', 'sw', 'nl', 'nl', 'tr', 'nl', 'en', 'nl', 'sv', 'lt', 'hu', 'id', 'et', 'nl', 'nl', 'nl', 'de', 'no', 'cy', 'nl', 'af', 'af', 'it', 'it', 'en', 'sv', 'pt', 'af', 'de', 'id', 'lt', 'de', 'pl', 'lt', 'lt', 'id', 'id', 'id', 'id', 'so', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'en', 'so', 'tl', 'lt', 'id', 'nl', 'de', 'nl', 'fi', 'lt', 'nl', 'de', 'lt', 'sv', 'de', 'de', 'sv', 'nl', 'no', 'da', 'lt', 'de', 'nl', 'sv', 'lt', 'fi', 'hu', 'fi', 'it', 'it', 'cy', 'en', 'tr', 'de', 'no', 'af', 'fr', 'fr', 'so', 'fr', 'vi', 'no', 'cy', 'pl', 'so', 'fr', 'no', 'no', 'cy', 'tr', 'hr', 'nl', 'en', 'de', 'nl', 'et', 'fi', 'cy', 'no', 'cy', 'es', 'id', 'no', 'fr', 'cy', 'sv', 'en', 'lt', 'af', 'hr', 'af', 'tl', 'en', 'so', 'pt', 'cy', 'tl', 'pl', 'nl', 'nl', 'et', 'tl', 'de', 'hr', 'it', 'sv', 'nl', 'sw', 'ca', 'it', 'lt', 'sv', 'de', 'de', 'de', 'en', 'fr', 'so', 'id', 'de', 'so', 'da', 'id', 'de', 'de', 'de', 'nl', 'cy', 'vi', 'de', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'sw', 'lt', 'nl', 'no', 'sv', 'en', 'nl', 'cy', 'ro', 'tl', 'af', 'de', 'lt', 'da', 'no', 'tr', 'nl', 'en', 'nl', 'nl', 'ro', 'nl', 'nl', 'sv', 'id', 'en', 'nl', 'af', 'nl', 'nl', 'en', 'sv', 'de', 'nl', 'id', 'ca', 'nl', 'no', 'de', 'sv', 'pt', 'pt', 'pt', 'pt', 'pt', 'id', 'de', 'id', 'lt', 'lt', 'de', 'sv', 'lt', 'lt', 'ca', 'nl', 'lt', 'tr', 'lt', 'lt', 'en', 'id', 'lt', 'de', 'tr', 'af', 'so', 'fr', 'it', 'nl', 'de', 'de', 'lt', 'tl', 'id', 'id', 'no', 'lt', 'de', 'sv', 'nl', 'af', 'de', 'de', 'cy', 'da', 'so', 'nl', 'de', 'it', 'lt', 'id', 'nl', 'et', 'de', 'so', 'de', 'hu', 'lt', 'da', 'ro', 'nl', 'de', 'so', 'nl', 'de', 'sv', 'de', 'de', 'nl', 'en', 'nl', 'sv', 'de', 'de', 'en', 'de', 'de', 'en', 'de', 'de', 'de', 'nl', 'de', 'lt', 'af', 'nl', 'af', 'sv', 'lt', 'ro', 'hu', 'de', 'nl', 'fi', 'no', 'de', 'de', 'nl', 'ca', 'lt', 'nl', 'sv', 'af', 'ro', 'nl', 'nl', 'de', 'de', 'en', 'de', 'de', 'nl', 'sv', 'fi', 'sv', 'lt', 'lt', 'nl', 'lt', 'sv', 'nl', 'sv', 'nl', 'de', 'sv', 'de', 'lt', 'lt', 'sv', 'en', 'sl', 'de', 'nl', 'nl', 'af', 'af', 'lt', 'de', 'nl', 'nl', 'nl', 'nl', 'de', 'sv', 'nl', 'de', 'nl', 'nl', 'de', 'so', 'de', 'lt', 'nl', 'nl', 'de', 'da', 'de', 'af', 'sv', 'nl', 'en', 'de', 'nl', 'de', 'nl', 'nl', 'fr', 'de', 'de', 'nl', 'lt', 'da', 'lt', 'nl', 'de', 'fr', 'nl', 'fr', 'de', 'lt', 'ca', 'de', 'fr', 'de', 'cy', 'et', 'nl', 'de', 'de', 'id', 'cy', 'sq', 'vi', 'de', 'de', 'de', 'de', 'de', 'sw', 'de', 'sq', 'sq', 'de', 'en', 'id', 'so', 'hr', 'vi', 'fi', 'tl', 'de', 'id', 'nl', 'nl', 'de', 'id', 'cy', 'so', 'no', 'en', 'en', 'it', 'af', 'af', 'it', 'de', 'de', 'fi', 'tl', 'ca', 'ro', 'de', 'nl', 'nl', 'lt', 'de', 'lt', 'lt', 'lt', 'nl', 'en', 'et', 'de', 'fr', 'sl', 'de', 'tr', 'fr', 'de', 'sw', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'sv', 'de', 'ro', 'pl', 'nl', 'sv', 'de', 'id', 'id', 'id', 'id', 'en', 'en', 'de', 'no', 'no', 'de', 'de', 'de', 'nl', 'de', 'de', 'lt', 'de', 'lt', 'de', 'de', 'nl', 'nl', 'nl', 'pl', 'fi', 'no', 'nl', 'it', 'lt', 'lt', 'tl', 'tl', 'de', 'fi', 'it', 'no', 'de', 'en', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'vi', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'et', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'sv', 'de', 'sv', 'sl', 'nl', 'de', 'af', 'af', 'fr', 'da', 'fi', 'nl', 'nl', 'nl', 'lt', 'cy', 'nl', 'de', 'nl', 'af', 'de', 'fr', 'et', 'nl', 'lt', 'de', 'sv', 'af', 'sv', 'ro', 'ca', 'ca', 'sv', 'sv', 'da', 'no', 'nl', 'pt', 'pt', 'de', 'de', 'pt', 'es', 'nl', 'cy', 'af', 'lt', 'so', 'da', 'no', 'tl', 'lt', 'da', 'it', 'sw', 'id', 'so', 'no', 'lt', 'sv', 'af', 'sv', 'id', 'nl', 'de', 'id', 'id', 'de', 'fi', 'de', 'et', 'id', 'id', 'so', 'de', 'en', 'fr', 'fr', 'fr', 'it', 'fr', 'fr', 'en', 'it', 'fr', 'en', 'en', 'tl', 'da', 'da', 'en', 'da', 'da', 'fr', 'fr', 'da', 'fr', 'fr', 'en', 'fr', 'fr', 'ca', 'fr', 'it', 'it', 'en', 'fr', 'fr', 'fr', 'fr', 'da', 'fr', 'fr', 'fr', 'fr', 'da', 'da', 'fr', 'da', 'en', 'da', 'fr', 'so', 'de', 'en', 'af', 'de', 'sv', 'nl', 'en', 'nl', 'id', 'cy', 'it', 'cy', 'tr', 'lt', 'fi', 'hu', 'et', 'sk', 'it', 'pt', 'nl', 'nl', 'nl', 'tl', 'nl', 'de', 'sl', 'nl', 'id', 'lt', 'id', 'id', 'id', 'sv', 'et', 'sv', 'nl', 'id', 'lt', 'so', 'en', 'cs', 'de', 'fi', 'lt', 'en', 'so', 'lt', 'en', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'ca', 'es', 'es', 'es', 'es', 'id', 'fr', 'lt', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'ca', 'et', 'id', 'it', 'nl', 'so', 'lt', 'fr', 'pt', 'pt', 'no', 'sq', 'cy', 'so', 'id', 'en', 'af', 'id', 'fr', 'fr', 'nl', 'pl', 'fr', 'pt', 'de', 'so', 'tl', 'id', 'af', 'fr', 'pl', 'it', 'ca', 'de', 'de', 'tr', 'sk', 'so', 'fr', 'sl', 'nl', 'fr', 'de', 'en', 'af', 'tl', 'fi', 'en', 'tr', 'so', 'ro', 'fr', 'so', 'lt', 'sv', 'id', 'sl', 'de', 'lt', 'sv', 'fi', 'nl', 'lt', 'en', 'tr', 'pl', 'nl', 'nl', 'cy', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'de', 'id', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'id', 'id', 'tl', 'so', 'lt', 'de', 'de', 'de', 'lt', 'de', 'nl', 'so', 'lt', 'es', 'lt', 'et', 'lt', 'lt', 'lt', 'nl', 'nl', 'id', 'af', 'af', 'en', 'nl', 'sk', 'da', 'fr', 'tl', 'ca', 'id', 'ro', 'af', 'de', 'sv', 'tl', 'so', 'nl', 'de', 'nl', 'nl', 'de', 'tl', 'tr', 'nl', 'sv', 'de', 'id', 'sv', 'id', 'id', 'tl', 'id', 'es', 'id', 'fi', 'lt', 'de', 'nl', 'sv', 'cy', 'nl', 'de', 'et', 'sv', 'nl', 'nl', 'nl', 'lt', 'lt', 'lt', 'nl', 'nl', 'nl', 'nl', 'ro', 'lt', 'lt', 'nl', 'nl', 'nl', 'nl', 'nl', 'lt', 'lt', 'lt', 'et', 'en', 'ca', 'lt', 'tl', 'tl', 'tl', 'no', 'de', 'lt', 'et', 'de', 'tl', 'tl', 'sv', 'lt', 'en', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'so', 'af', 'af', 'et', 'en', 'af', 'de', 'vi', 'tl', 'tl', 'tl', 'en', 'tl', 'tl', 'de', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'en', 'tl', 'en', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'de', 'sl', 'lt', 'ca', 'sv', 'sv', 'de', 'de', 'de', 'lt', 'nl', 'nl', 'sv', 'de', 'en', 'et', 'de', 'pl', 'sv', 'lt', 'de', 'af', 'no', 'nl', 'nl', 'nl', 'cs', 'sv', 'sl', 'nl', 'da', 'lt', 'da', 'de', 'de', 'et', 'en', 'lt', 'fi', 'de', 'nl', 'lt', 'fr', 'nl', 'fr', 'nl', 'nl', 'et', 'fr', 'af', 'sv', 'lt', 'sw', 'nl', 'fr', 'en', 'sv', 'no', 'de', 'de', 'nl', 'nl', 'nl', 'nl', 'de', 'lt', 'et', 'af', 'lt', 'nl', 'lt', 'lt', 'lt', 'lt', 'tl', 'id', 'sw', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'tl', 'id', 'id', 'id', 'id', 'sw', 'de', 'id', 'id', 'id', 'id', 'nl', 'de', 'nl', 'tl', 'so', 'hu', 'de', 'ro', 'en', 'de', 'ca', 'pt', 'hu', 'et', 'nl', 'de', 'fr', 'af', 'id', 'sk', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'de', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'pt', 'no', 'cy', 'pt', 'sq', 'de', 'es', 'so', 'nl', 'tl', 'sl', 'lt', 'lt', 'es', 'lt', 'lt', 'nl', 'sv', 'nl', 'so', 'id', 'af', 'fi', 'ca', 'es', 'id', 'sv', 'no', 'lt', 'de', 'en', 'sv', 'nl', 'nl', 'nl', 'nl', 'lt', 'de', 'lt', 'lt', 'lt', 'af', 'de', 'en', 'nl', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'af', 'cy', 'af', 'de', 'hr', 'no', 'id', 'sv', 'cy', 'ro', 'so', 'id', 'lt', 'lt', 'lt', 'lt', 'sl', 'so', 'no', 'id', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'tl', 'tl', 'tl', 'tl', 'cy', 'sv', 'lt', 'lt', 'tl', 'vi', 'lt', 'lt', 'lt', 'lt', 'lt', 'de', 'so', 'de', 'de', 'nl', 'nl', 'tl', 'en', 'it', 'nl', 'id', 'lt', 'pl', 'nl', 'af', 'da', 'et', 'sw', 'cy', 'id', 'sv', 'sv', 'sv', 'lt', 'tl', 'fr', 'fr', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'nl', 'et', 'af', 'sv', 'cy', 'tl', 'so', 'fi', 'de', 'af', 'de', 'en', 'nl', 'nl', 'af', 'so', 'es', 'es', 'so', 'so', 'cy', 'et', 'de', 'ca', 'da', 'af', 'id', 'af', 'nl', 'id', 'tl', 'en', 'es', 'af', 'es', 'so', 'no', 'pl', 'pl', 'pt', 'de', 'nl', 'tl', 'nl', 'so', 'pl', 'de', 'so', 'fr', 'en', 'so', 'so', 'no', 'nl', 'nl', 'fi', 'fr', 'ca', 'tl', 'sk', 'af', 'so', 'cs', 'en', 'lt', 'da', 'it', 'no', 'vi', 'id', 'fr', 'so', 'vi', 'es', 'so', 'de', 'nl', 'lt', 'da', 'tr', 'es', 'it', 'nl', 'tr', 'pl', 'so', 'fi', 'da', 'sv', 'tl', 'fr', 'tl', 'nl', 'tl', 'af', 'no', 'en', 'it', 'af', 'so', 'so', 'en', 'de', 'no', 'fi', 'sv', 'nl', 'de', 'de', 'nl', 'fi', 'nl', 'sv', 'sv', 'sv', 'sv', 'de', 'cy', 'nl', 'pt', 'tl', 'sl', 'af', 'en', 'de', 'en', 'id', 'de', 'de', 'de', 'de', 'en', 'lt', 'lt', 'en', 'sv', 'lt', 'de', 'lt', 'et', 'de', 'sv', 'lt', 'nl', 'da', 'de', 'lt', 'lt', 'en', 'so', 'id', 'de', 'lt', 'en', 'lt', 'cy', 'cy', 'cy', 'lt', 'tr', 'tl', 'sv', 'de', 'so', 'sv', 'nl', 'it', 'de', 'id', 'en', 'tl', 'lt', 'tl', 'tl', 'tl', 'so', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'lt', 'lt', 'lt', 'fr', 'nl', 'lt', 'sv', 'nl', 'en', 'lt', 'sq', 'nl', 'id', 'es', 'sv', 'de', 'nl', 'it', 'nl', 'hu', 'sv', 'cy', 'nl', 'af', 'nl', 'de', 'de', 'lt', 'lt', 'af', 'de', 'id', 'sv', 'da', 'de', 'da', 'lt', 'nl', 'de', 'de', 'tl', 'id', 'nl', 'da', 'de', 'de', 'nl', 'lt', 'nl', 'sv', 'en', 'en', 'lt', 'so', 'af', 'lt', 'et', 'fr', 'fr', 'fr', 'fr', 'lt', 'lt', 'es', 'tl', 'af', 'nl', 'sv', 'en', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'de', 'fr', 'no', 'de', 'et', 'nl', 'de', 'lt', 'no', 'tr', 'af', 'af', 'de', 'af', 'de', 'hu', 'de', 'pl', 'de', 'en', 'sv', 'de', 'lt', 'id', 'so', 'es', 'af', 'en', 'lt', 'sl', 'sl', 'sl', 'nl', 'sl', 'de', 'lt', 'sl', 'sl', 'af', 'sl', 'nl', 'sl', 'lt', 'sl', 'sl', 'sl', 'sl', 'nl', 'lt', 'sl', 'sl', 'cy', 'lt', 'sl', 'sl', 'sl', 'sl', 'lt', 'af', 'sl', 'sl', 'lt', 'en', 'pl', 'de', 'sv', 'nl', 'nl', 'lt', 'de', 'nl', 'en', 'et', 'tl', 'tl', 'so', 'en', 'sv', 'es', 'fr', 'cy', 'et', 'de', 'nl', 'so', 'ca', 'no', 'no', 'cy', 'no', 'nl', 'de', 'so', 'cy', 'tr', 'af', 'fr', 'cy', 'fr', 'fr', 'fr', 'fr', 'id', 'af', 'nl', 'sv', 'de', 'de', 'da', 'lt', 'nl', 'fi', 'sv', 'tl', 'no', 'tl', 'tl', 'da', 'tl', 'es', 'tl', 'tl', 'tl', 'tl', 'so', 'tl', 'tl', 'tl', 'tl', 'tl', 'af', 'es', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'sw', 'tl', 'en', 'tl', 'af', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'cy', 'tl', 'tl', 'hr', 'tl', 'tl', 'tl', 'tl', 'tl', 'so', 'tl', 'tl', 'tl', 'id', 'pl', 'tl', 'cy', 'tl', 'tl', 'tl', 'tl', 'tl', 'pt', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'hr', 'tl', 'tl', 'tl', 'tl', 'sv', 'tl', 'tl', 'id', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'de', 'de', 'tl', 'tl', 'tl', 'tl', 'sv', 'so', 'tl', 'tl', 'tl', 'tl', 'de', 'tl', 'tl', 'cy', 'tl', 'tl', 'fi', 'sw', 'de', 'tl', 'tl', 'tl', 'tl', 'hr', 'tl', 'tl', 'tl', 'tl', 'sv', 'nl', 'pl', 'pl', 'tr', 'de', 'de', 'sw', 'tl', 'tl', 'id', 'af', 'tl', 'tl', 'de', 'so', 'ca', 'hu', 'de', 'so', 'fi', 'de', 'so', 'de', 'tr', 'nl', 'vi', 'de', 'sv', 'sv', 'lt', 'lt', 'lt', 'nl', 'lt', 'hr', 'sv', 'en', 'no', 'af', 'cy', 'no', 'no', 'sl', 'nl', 'nl', 'nl', 'nl', 'nl', 'sl', 'nl', 'nl', 'lt', 'fi', 'pl', 'af', 'it', 'da', 'tl', 'id', 'tl', 'da', 'it', 'so', 'hu', 'en', 'de', 'ro', 'no', 'vi', 'ca', 'cy', 'nl', 'lt', 'ro', 'de', 'nl', 'cy', 'et', 'no', 'id', 'no', 'ro', 'nl', 'da', 'nl', 'sv', 'vi', 'no', 'en', 'en', 'fi', 'tl', 'en', 'ca', 'en', 'id', 'af', 'ca', 'sv', 'nl', 'pl', 'af', 'af', 'en', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'so', 'so', 'et', 'tl', 'nl', 'sw', 'de', 'en', 'nl', 'lt', 'es', 'af', 'et', 'nl', 'en', 'en', 'id', 'tl', 'id', 'de', 'nl', 'af', 'de', 'af', 'tr', 'en', 'nl', 'nl', 'nl', 'id', 'lt', 'nl', 'fi', 'id', 'tr', 'nl', 'nl', 'id', 'sl', 'af', 'id', 'nl', 'id', 'id', 'ro', 'de', 'sv', 'sl', 'nl', 'nl', 'en', 'en', 'nl', 'id', 'af', 'id', 'id', 'nl', 'da', 'lt', 'sv', 'de', 'so', 'tl', 'da', 'et', 'sv', 'de', 'nl', 'lt', 'lt', 'sw', 'de', 'lt', 'it', 'sv', 'so', 'de', 'af', 'so', 'de', 'nl', 'nl', 'sv', 'so', 'lt', 'fi', 'nl', 'nl', 'nl', 'sv', 'en', 'nl', 'ro', 'sv', 'lt', 'sv', 'nl', 'en', 'tl', 'en', 'af', 'de', 'de', 'lt', 'lt', 'en', 'nl', 'en', 'sv', 'de', 'nl', 'nl', 'de', 'nl', 'sv', 'nl', 'id', 'de', 'sq', 'en', 'lt', 'pl', 'fr', 'pt', 'fr', 'es', 'et', 'en', 'id', 'it', 'sv', 'nl', 'de', 'nl', 'de', 'ro', 'nl', 'en', 'nl', 'nl', 'nl', 'da', 'nl', 'lt', 'nl', 'de', 'de', 'de', 'fi', 'de', 'de', 'no', 'sv', 'en', 'en', 'so', 'tl', 'tl', 'de', 'en', 'lt', 'hu', 'de', 'de', 'sv', 'lt', 'nl', 'sl', 'tl', 'de', 'nl', 'id', 'so', 'de', 'id', 'de', 'de', 'id', 'nl', 'nl', 'cy', 'no', 'cy', 'pt', 'af', 'id', 'id', 'sv', 'de', 'de', 'sv', 'lt', 'lt', 'nl', 'sv', 'de', 'de', 'lt', 'no', 'de', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'es', 'tl', 'so', 'id', 'id', 'tl', 'nl', 'nl', 'cy', 'nl', 'id', 'id', 'ro', 'lt', 'lt', 'af', 'de', 'sk', 'fr', 'tl', 'tl', 'de', 'tl', 'de', 'tl', 'tl', 'tl', 'de', 'tl', 'tl', 'tl', 'lt', 'de', 'no', 'af', 'es', 'es', 'es', 'lt', 'lt', 'it', 'de', 'sv', 'et', 'lt', 'id', 'it', 'it', 'af', 'en', 'en', 'de', 'id', 'af', 'lt', 'so', 'de', 'nl', 'de', 'so', 'id', 'nl', 'so', 'de', 'fi', 'fi', 'de', 'fi', 'id', 'tl', 'de', 'cy', 'sl', 'id', 'ro', 'so', 'hu', 'de', 'sv', 'en', 'de', 'tl', 'af', 'no', 'lt', 'de', 'de', 'fr', 'id', 'en', 'de', 'sv', 'de', 'en', 'it', 'nl', 'fr', 'nl', 'af', 'nl', 'id', 'nl', 'sv', 'de', 'de', 'en', 'de', 'it', 'nl', 'sv', 'sl', 'en', 'de', 'af', 'sv', 'nl', 'de', 'lt', 'sv', 'sv', 'ro', 'nl', 'de', 'nl', 'af', 'de', 'nl', 'de', 'sl', 'sv', 'en', 'de', 'sv', 'de', 'nl', 'nl', 'de', 'en', 'de', 'de', 'sv', 'de', 'nl', 'nl', 'de', 'de', 'lt', 'de', 'nl', 'no', 'sv', 'nl', 'nl', 'en', 'en', 'nl', 'nl', 'nl', 'en', 'en', 'nl', 'de', 'pt', 'sv', 'en', 'af', 'nl', 'af', 'so', 'da', 'af', 'fi', 'af', 'tl', 'id', 'de', 'nl', 'it', 'da', 'pt', 'de', 'fi', 'tr', 'es', 'es', 'cy', 'nl', 'et', 'lt', 'lt', 'fr', 'fr', 'sv', 'lt', 'en', 'nl', 'en', 'de', 'de', 'nl', 'id', 'nl', 'nl', 'ro', 'de', 'de', 'nl', 'id', 'en', 'de', 'lt', 'sv', 'id', 'nl', 'de', 'de', 'nl', 'pl', 'id', 'de', 'de', 'nl', 'nl', 'nl', 'nl', 'nl', 'pl', 'pl', 'lt', 'id', 'sv', 'nl', 'sv', 'nl', 'sv', 'sv', 'nl', 'lt', 'nl', 'tr', 'de', 'nl', 'af', 'de', 'sv', 'fi', 'sv', 'ca', 'nl', 'fr', 'so', 'nl', 'nl', 'af', 'de', 'sv', 'nl', 'de', 'sv', 'de', 'da', 'so', 'lt', 'lt', 'lt', 'so', 'id', 'id', 'id', 'af', 'sv', 'de', 'fi', 'de', 'de', 'de', 'de', 'nl', 'sv', 'sl', 'nl', 'nl', 'no', 'fr', 'tr', 'so', 'de', 'no', 'de', 'lt', 'af', 'id', 'id', 'id', 'id', 'id', 'id', 'et', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'en', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'lv', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'en', 'id', 'en', 'id', 'et', 'id', 'id', 'id', 'id', 'id', 'id', 'pl', 'id', 'id', 'id', 'so', 'de', 'tl', 'sw', 'cy', 'cy', 'so', 'lt', 'lt', 'de', 'lt', 'de', 'ca', 'de', 'nl', 'nl', 'sv', 'da', 'de', 'lt', 'af', 'lt', 'en', 'ro', 'de', 'nl', 'de', 'de', 'id', 'lt', 'en', 'en', 'de', 'sq', 'et', 'so', 'nl', 'nl', 'de', 'nl', 'en', 'lt', 'lt', 'fr', 'lt', 'sv', 'hu', 'af', 'af', 'af', 'nl', 'so', 'nl', 'de', 'nl', 'ca', 'lt', 'de', 'sl', 'lv', 'et', 'en', 'it', 'de', 'no', 'de', 'tr', 'so', 'de', 'lt', 'sv', 'nl', 'de', 'sv', 'et', 'tl', 'tl', 'so', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'da', 'ro', 'nl', 'tl', 'nl', 'nl', 'id', 'de', 'id', 'nl', 'fr', 'nl', 'fr', 'de', 'de', 'no', 'nl', 'de', 'fr', 'it', 'et', 'nl', 'af', 'sv', 'de', 'nl', 'tl', 'nl', 'nl', 'de', 'de', 'nl', 'de', 'et', 'en', 'da', 'de', 'de', 'de', 'sl', 'pt', 'da', 'sv', 'de', 'sv', 'lt', 'so', 'cs', 'de', 'sv', 'af', 'en', 'so', 'nl', 'af', 'en', 'tl', 'nl', 'tl', 'sv', 'de', 'af', 'no', 'de', 'en', 'de', 'ro', 'nl', 'en', 'lt', 'pt', 'no', 'id', 'de', 'nl', 'en', 'de', 'de', 'fr', 'sw', 'so', 'lt', 'sw', 'vi', 'de', 'id', 'tl', 'id', 'id', 'et', 'nl', 'nl', 'nl', 'af', 'nl', 'nl', 'de', 'de', 'ro', 'de', 'de', 'de', 'et', 'da', 'id', 'lt', 'hu', 'ro', 'et', 'pt', 'de', 'lt', 'so', 'lt', 'af', 'lt', 'tl', 'af', 'tl', 'tl', 'en', 'lt', 'lt', 'en', 'de', 'nl', 'lt', 'lt', 'de', 'de', 'sl', 'hu', 'hu', 'hu', 'hu', 'hu', 'hu', 'hu', 'hu', 'sv', 'de', 'en', 'de', 'nl', 'af', 'id', 'fr', 'af', 'de', 'nl', 'sv', 'de', 'nl', 'nl', 'de', 'af', 'nl', 'lt', 'es', 'fr', 'fr', 'et', 'fr', 'fr', 'fr', 'fr', 'no', 'da', 'en', 'pt', 'pt', 'es', 'pt', 'pt', 'id', 'pt', 'de', 'lt', 'lt', 'lt', 'de', 'de', 'no', 'sw', 'en', 'da', 'sv', 'fr', 'en', 'de', 'so', 'et', 'da', 'et', 'de', 'so', 'so', 'fr', 'fi', 'de', 'en', 'fr', 'de', 'de', 'af', 'nl', 'et', 'nl', 'da', 'da', 'en', 'da', 'af', 'en', 'en', 'de', 'nl', 'ca', 'lt', 'lt', 'lt', 'en', 'lt', 'fi', 'id', 'de', 'nl', 'lt', 'cy', 'hr', 'id', 'sv', 'nl', 'lt', 'de', 'de', 'de', 'lt', 'et', 'id', 'lt', 'tl', 'tl', 'tl', 'af', 'de', 'en', 'fr', 'lt', 'de', 'en', 'so', 'hu', 'tl', 'nl', 'nl', 'sw', 'de', 'tl', 'tl', 'cy', 'so', 'tl', 'fr', 'tl', 'de', 'ca', 'de', 'no', 'no', 'no', 'no', 'nl', 'sl', 'nl', 'de', 'sq', 'lt', 'lt', 'lt', 'lt', 'nl', 'lt', 'lt', 'lt', 'it', 'sw', 'nl', 'nl', 'de', 'sv', 'nl', 'de', 'sv', 'sv', 'sv', 'nl', 'de', 'nl', 'fr', 'lt', 'lt', 'lt', 'lt', 'fr', 'de', 'fr', 'de', 'sv', 'sv', 'no', 'nl', 'en', 'nl', 'en', 'sv', 'de', 'id', 'nl', 'nl', 'so', 'sv', 'sv', 'de', 'lt', 'nl', 'so', 'de', 'nl', 'nl', 'hu', 'lt', 'lt', 'tl', 'sv', 'nl', 'lt', 'lt', 'sv', 'tl', 'tl', 'nl', 'sw', 'de', 'fi', 'fi', 'lt', 'nl', 'en', 'af', 'lt', 'de', 'sv', 'en', 'en', 'af', 'no', 'id', 'pl', 'tl', 'id', 'sl', 'ca', 'pt', 'sv', 'af', 'af', 'fr', 'no', 'fr', 'da', 'en', 'af', 'sk', 'af', 'af', 'de', 'af', 'en', 'so', 'id', 'id', 'so', 'tl', 'id', 'id', 'nl', 'so', 'id', 'cy', 'fr', 'de', 'et', 'cy', 'sl', 'de', 'af', 'fr', 'sv', 'af', 'de', 'sv', 'de', 'cy', 'pt', 'lt', 'en', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'nl', 'sw', 'de', 'lt', 'id', 'de', 'en', 'sv', 'so', 'nl', 'lt', 'lt', 'lt', 'tl', 'ca', 'tl', 'fr', 'no', 'lt', 'de', 'so', 'id', 'fr', 'sv', 'da', 'en', 'de', 'so', 'et', 'et', 'sv', 'de', 'en', 'lt', 'lt', 'lt', 'de', 'de', 'de', 'en', 'lt', 'lt', 'nl', 'id', 'tl', 'de', 'id', 'lt', 'id', 'en', 'de', 'id', 'tl', 'tl', 'id', 'id', 'sw', 'id', 'id', 'id', 'tl', 'sw', 'id', 'id', 'id', 'vi', 'de', 'id', 'sw', 'tl', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'de', 'de', 'tl', 'id', 'sw', 'id', 'id', 'id', 'id', 'id', 'sw', 'de', 'id', 'nl', 'sv', 'sv', 'sv', 'lt', 'sv', 'sv', 'de', 'de', 'id', 'af', 'de', 'nl', 'lt', 'nl', 'nl', 'lt', 'af', 'lt', 'af', 'nl', 'sv', 'hr', 'id', 'so', 'so', 'de', 'af', 'lt', 'de', 'de', 'nl', 'de', 'et', 'de', 'nl', 'nl', 'tr', 'id', 'id', 'sv', 'de', 'lt', 'nl', 'sl', 'nl', 'id', 'nl', 'nl', 'so', 'fr', 'no', 'af', 'en', 'pl', 'en', 'de', 'so', 'af', 'en', 'nl', 'id', 'lt', 'de', 'af', 'sv', 'af', 'tl', 'tr', 'no', 'lt', 'lt', 'lt', 'de', 'lt', 'lt', 'de', 'nl', 'en', 'de', 'de', 'de', 'de', 'es', 'ca', 'nl', 'nl', 'cs', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'sl', 'sl', 'de', 'nl', 'de', 'tl', 'de', 'de', 'de', 'pt', 'sl', 'nl', 'en', 'de', 'es', 'et', 'id', 'nl', 'de', 'sl', 'nl', 'en', 'sv', 'en', 'de', 'de', 'nl', 'lt', 'sv', 'de', 'de', 'de', 'sv', 'de', 'de', 'de', 'so', 'id', 'tl', 'no', 'no', 'vi', 'it', 'et', 'so', 'so', 'de', 'id', 'fi', 'fr', 'cy', 'en', 'et', 'pt', 'fi', 'fi', 'lt', 'lt', 'lt', 'et', 'af', 'de', 'so', 'vi', 'id', 'af', 'af', 'da', 'es', 'lt', 'af', 'fr', 'en', 'no', 'fr', 'so', 'nl', 'de', 'nl', 'af', 'vi', 'es', 'nl', 'hu', 'de', 'pt', 'it', 'af', 'de', 'en', 'vi', 'de', 'so', 'fr', 'tl', 'lt', 'id', 'af', 'sv', 'ro', 'tl', 'tl', 'nl', 'sl', 'sv', 'sl', 'et', 'da', 'af', 'af', 'de', 'lt', 'sv', 'sv', 'nl', 'sw', 'et', 'sw', 'tl', 'tl', 'da', 'it', 'sv', 'fi', 'fr', 'id', 'de', 'nl', 'sv', 'sv', 'sv', 'sv', 'id', 'id', 'id', 'cy', 'hr', 'fr', 'pt', 'en', 'lt', 'pt', 'fr', 'fr', 'af', 'pt', 'pt', 'fr', 'es', 'fr', 'nl', 'en', 'fr', 'no', 'it', 'ro', 'lt', 'af', 'lt', 'lt', 'lt', 'fi', 'ro', 'lt', 'nl', 'lt', 'sl', 'lt', 'de', 'ro', 'nl', 'ca', 'en', 'de', 'nl', 'sv', 'fi', 'af', 'da', 'nl', 'no', 'lt', 'sv', 'nl', 'af', 'cy', 'sv', 'pt', 'da', 'tl', 'no', 'so', 'de', 'no', 'so', 'sv', 'sv', 'af', 'de', 'de', 'da', 'sv', 'lt', 'lt', 'de', 'de', 'nl', 'it', 'et', 'de', 'lt', 'no', 'de', 'de', 'id', 'id', 'id', 'sw', 'de', 'id', 'id', 'id', 'so', 'en', 'af', 'de', 'id', 'de', 'de', 'lt', 'de', 'sv', 'nl', 'de', 'lt', 'lt', 'lt', 'nl', 'nl', 'ro', 'de', 'pt', 'pt', 'af', 'sk', 'af', 'en', 'en', 'sw', 'it', 'pt', 'cy', 'cs', 'vi', 'so', 'es', 'en', 'so', 'fi', 'pt', 'so', 'vi', 'fi', 'sq', 'lt', 'lt', 'sv', 'af', 'de', 'af', 'fr', 'hu', 'en', 'so', 'de', 'so', 'fi', 'lt', 'lt', 'lt', 'lt', 'sv', 'nl', 'en', 'de', 'lt', 'lt', 'de', 'af', 'pt', 'es', 'cy', 'fr', 'tl', 'tl', 'tl', 'fi', 'tl', 'id', 'so', 'cy', 'en', 'cy', 'cy', 'af', 'tl', 'tl', 'so', 'en', 'tl', 'tl', 'tl', 'cy', 'tl', 'en', 'tl', 'tl', 'tl', 'tl', 'it', 'tl', 'nl', 'nl', 'sv', 'tl', 'tl', 'tl', 'tl', 'en', 'tl', 'en', 'tl', 'tl', 'id', 'tl', 'af', 'tl', 'tl', 'so', 'nl', 'tl', 'fi', 'so', 'cy', 'so', 'tl', 'de', 'tl', 'tl', 'de', 'lt', 'sv', 'et', 'sv', 'fi', 'af', 'tr', 'et', 'id', 'nl', 'lt', 'lt', 'id', 'nl', 'et', 'de', 'af', 'en', 'en', 'et', 'et', 'de', 'no', 'nl', 'de', 'sv', 'et', 'et', 'id', 'de', 'id', 'nl', 'de', 'et', 'fi', 'fi', 'so', 'fi', 'fi', 'fi', 'fi', 'fi', 'fi', 'nl', 'fr', 'fr', 'af', 'it', 'cy', 'tl', 'so', 'fi', 'de', 'af', 'de', 'de', 'nl', 'so', 'af', 'so', 'es', 'so', 'so', 'cy', 'et', 'de', 'fr', 'da', 'af', 'id', 'no', 'af', 'nl', 'id', 'tl', 'nl', 'ca', 'af', 'es', 'so', 'no', 'pl', 'pl', 'pt', 'de', 'nl', 'tl', 'nl', 'so', 'pl', 'de', 'so', 'fr', 'so', 'so', 'no', 'nl', 'nl', 'fi', 'fr', 'ca', 'tl', 'sk', 'af', 'so', 'sk', 'lt', 'da', 'it', 'no', 'vi', 'id', 'fr', 'so', 'vi', 'es', 'so', 'de', 'en', 'lt', 'da', 'tr', 'es', 'it', 'nl', 'tr', 'pl', 'en', 'so', 'fi', 'da', 'pl', 'tl', 'pl', 'fr', 'tl', 'nl', 'tl', 'af', 'en', 'no', 'en', 'it', 'af', 'sv', 'lt', 'af', 'cy', 'af', 'fr', 'nl', 'sv', 'fr', 'sv', 'de', 'en', 'nl', 'nl', 'tr', 'sv', 'sv', 'de', 'nl', 'nl', 'de', 'sv', 'nl', 'de', 'de', 'de', 'de', 'de', 'sv', 'de', 'sv', 'nl', 'nl', 'de', 'nl', 'de', 'de', 'nl', 'af', 'nl', 'de', 'nl', 'nl', 'nl', 'sv', 'sv', 'de', 'af', 'sw', 'tl', 'en', 'nl', 'da', 'af', 'nl', 'sv', 'so', 'en', 'sv', 'nl', 'de', 'vi', 'id', 'nl', 'en', 'it', 'en', 'af', 'vi', 'vi', 'vi', 'so', 'so', 'so', 'vi', 'nl', 'de', 'sv', 'nl', 'nl', 'nl', 'fr', 'nl', 'nl', 'lt', 'nl', 'af', 'de', 'lt', 'fi', 'de', 'lt', 'nl', 'de', 'de', 'en', 'fr', 'lt', 'sv', 'de', 'nl', 'lt', 'id', 'sv', 'de', 'de', 'sw', 'af', 'pt', 'en', 'nl', 'de', 'lt', 'de', 'de', 'de', 'lt', 'de', 'id', 'de', 'nl', 'sv', 'af', 'de', 'de', 'de', 'ca', 'sv', 'sv', 'de', 'en', 'en', 'it', 'nl', 'de', 'ro', 'nl', 'lt', 'de', 'af', 'sv', 'pt', 'nl', 'af', 'nl', 'en', 'nl', 'en', 'de', 'sv', 'en', 'sv', 'de', 'de', 'de', 'nl', 'id', 'af', 'af', 'de', 'tr', 'no', 'tr', 'sv', 'de', 'en', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'sv', 'cy', 'af', 'sv', 'sv', 'sv', 'de', 'lt', 'sv', 'nl', 'sv', 'nl', 'sv', 'de', 'sv', 'nl', 'nl', 'de', 'id', 'nl', 'en', 'de', 'sv', 'fi', 'sv', 'sv', 'de', 'de', 'de', 'sv', 'hr', 'vi', 'de', 'it', 'it', 'lt', 'en', 'it', 'lt', 'id', 'id', 'nl', 'tl', 'sv', 'da', 'da', 'so', 'sv', 'so', 'nl', 'lt', 'af', 'nl', 'nl', 'so', 'de', 'en', 'de', 'hu', 'sl', 'sv', 'so', 'no', 'pl', 'no', 'en', 'pt', 'de', 'no', 'af', 'ca', 'no', 'so', 'en', 'en', 'pt', 'en', 'en', 'en', 'de', 'fr', 'lt', 'en', 'so', 'fr', 'en', 'de', 'da', 'pl', 'it', 'nl', 'lt', 'de', 'de', 'de', 'nl', 'en', 'lt', 'de', 'de', 'de', 'en', 'de', 'ro', 'en', 'sv', 'sv', 'nl', 'nl', 'sv', 'de', 'nl', 'nl', 'nl', 'af', 'de', 'nl', 'de', 'de', 'de', 'de', 'sv', 'nl', 'de', 'de', 'nl', 'de', 'de', 'sv', 'de', 'de', 'nl', 'de', 'de', 'af', 'af', 'de', 'af', 'af', 'de', 'lt', 'fi', 'pt', 'no', 'en', 'de', 'de', 'de', 'lt', 'lt', 'lt', 'lt', 'de', 'lt', 'en', 'nl', 'so', 'af', 'nl', 'cy', 'id', 'so', 'en', 'tl', 'nl', 'fr', 'de', 'no', 'no', 'cy', 'so', 'cy', 'no', 'da', 'da', 'de', 'nl', 'nl', 'so', 'es', 'sl', 'sv', 'fi', 'en', 'no', 'cy', 'nl', 'nl', 'so', 'en', 'sv', 'nl', 'en', 'en', 'no', 'af', 'de', 'fr', 'de', 'de', 'id', 'id', 'id', 'id', 'id', 'id', 'de', 'id', 'da', 'sv', 'so', 'sv', 'tr', 'fr', 'de', 'de', 'sl', 'sv', 'en', 'sv', 'nl', 'nl', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'en', 'sv', 'de', 'de', 'fi', 'de', 'en', 'de', 'lt', 'sv', 'de', 'de', 'de', 'de', 'de', 'de', 'no', 'sv', 'de', 'et', 'sw', 'de', 'it', 'sv', 'en', 'so', 'pl', 'pt', 'so', 'so', 'lt', 'fr', 'fr', 'fr', 'af', 'af', 'nl', 'af', 'lt', 'de', 'de', 'id', 'id', 'cy', 'lt', 'lt', 'lt', 'cy', 'so', 'so', 'es', 'tl', 'nl', 'tl', 'en', 'en', 'nl', 'tr', 'it', 'cy', 'no', 'so', 'no', 'tl', 'nl', 'it', 'fi', 'id', 'fr', 'fi', 'de', 'tr', 'af', 'da', 'da', 'cy', 'fr', 'en', 'sv', 'fr', 'af', 'af', 'nl', 'af', 'it', 'it', 'sk', 'da', 'fr', 'cy', 'so', 'tl', 'tr', 'id', 'sv', 'cy', 'sv', 'sk', 'da', 'pt', 'de', 'tl', 'tl', 'so', 'fr', 'id', 'en', 'id', 'id', 'en', 'id', 'en', 'id', 'id', 'id', 'en', 'de', 'de', 'fr', 'de', 'so', 'tl', 'so', 'nl', 'sv', 'nl', 'nl', 'de', 'de', 'id', 'nl', 'id', 'nl', 'sv', 'af', 'de', 'de', 'en', 'nl', 'de', 'sv', 'de', 'nl', 'de', 'de', 'en', 'nl', 'de', 'fr', 'en', 'cy', 'lt', 'de', 'af', 'en', 'nl', 'af', 'en', 'af', 'nl', 'vi', 'id', 'nl', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'de', 'de', 'tl', 'id', 'es', 'es', 'es', 'nl', 'ca', 'no', 'de', 'en', 'so', 'it', 'et', 'lt', 'af', 'ro', 'tr', 'af', 'af', 'af', 'lt', 'id', 'id', 'sv', 'lt', 'nl', 'sv', 'en', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'nl', 'lt', 'nl', 'de', 'sw', 'de', 'de', 'so', 'fr', 'de', 'af', 'sv', 'vi', 'ca', 'de', 'no', 'es', 'vi', 'nl', 'sw', 'de', 'de', 'en', 'id', 'vi', 'en', 'sk', 'nl', 'no', 'af', 'et', 'pt', 'et', 'so', 'so', 'pt', 'af', 'fr', 'af', 'tr', 'cy', 'et', 'so', 'da', 'en', 'id', 'nl', 'af', 'no', 'cs', 'en', 'cy', 'nl', 'de', 'et', 'ca', 'sv', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'sv', 'no', 'sv', 'en', 'id', 'nl', 'lt', 'ro', 'af', 'en', 'nl', 'cy', 'da', 'da', 'da', 'da', 'da', 'da', 'da', 'da', 'no', 'da', 'da', 'da', 'da', 'da', 'tl', 'af', 'af', 'de', 'lt', 'nl', 'en', 'de', 'nl', 'de', 'sv', 'nl', 'nl', 'nl', 'nl', 'de', 'sv', 'sv', 'de', 'sv', 'nl', 'nl', 'de', 'lt', 'lt', 'nl', 'de', 'af', 'af', 'af', 'af', 'nl', 'af', 'af', 'nl', 'sv', 'lt', 'de', 'lt', 'de', 'no', 'nl', 'lt', 'sv', 'nl', 'de', 'en', 'nl', 'de', 'nl', 'de', 'fr', 'en', 'id', 'id', 'id', 'lt', 'de', 'de', 'nl', 'de', 'sv', 'nl', 'nl', 'nl', 'et', 'sv', 'de', 'de', 'de', 'cs', 'id', 'id', 'sw', 'sw', 'de', 'de', 'id', 'id', 'id', 'lt', 'id', 'id', 'id', 'id', 'so', 'ro', 'id', 'da', 'sq', 'no', 'no', 'es', 'lt', 'af', 'es', 'es', 'lt', 'nl', 'sv', 'en', 'id', 'lt', 'id', 'de', 'id', 'de', 'de', 'lt', 'es', 'sv', 'so', 'tl', 'fr', 'id', 'pl', 'sk', 'id', 'vi', 'da', 'pl', 'da', 'nl', 'de', 'de', 'en', 'pl', 'tl', 'tl', 'cs', 'id', 'lt', 'nl', 'nl', 'en', 'pt', 'af', 'nl', 'cy', 'da', 'tl', 'it', 'en', 'de', 'lt', 'da', 'sk', 'lt', 'so', 'nl', 'nl', 'de', 'tl', 'lv', 'nl', 'no', 'lt', 'de', 'nl', 'et', 'de', 'tl', 'it', 'lt', 'pt', 'lt', 'sv', 'en', 'fi', 'nl', 'nl', 'nl', 'nl', 'af', 'no', 'no', 'so', 'en', 'af', 'ca', 'de', 'de', 'en', 'cy', 'id', 'fr', 'no', 'de', 'cy', 'tl', 'it', 'it', 'af', 'ca', 'de', 'af', 'de', 'sl', 'de', 'id', 'tr', 'nl', 'it', 'en', 'es', 'pl', 'en', 'nl', 'pt', 'lt', 'so', 'id', 'en', 'sv', 'nl', 'sv', 'it', 'af', 'en', 'lt', 'lt', 'fr', 'sl', 'lt', 'lt', 'lt', 'lt', 'so', 'en', 'en', 'da', 'en', 'nl', 'nl', 'lt', 'sv', 'de', 'af', 'de', 'sl', 'it', 'lt', 'da', 'sv', 'af', 'sv', 'nl', 'nl', 'nl', 'af', 'cy', 'no', 'vi', 'lv', 'fi', 'sl', 'de', 'nl', 'tr', 'et', 'en', 'de', 'cy', 'af', 'nl', 'tl', 'sv', 'da', 'da', 'lt', 'de', 'sv', 'cy', 'nl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'nl', 'nl', 'sv', 'nl', 'nl', 'id', 'nl', 'nl', 'tl', 'sq', 'id', 'nl', 'fi', 'et', 'en', 'cy', 'no', 'no', 'tl', 'lt', 'sv', 'tl', 'sv', 'tl', 'tl', 'en', 'en', 'lt', 'af', 'sv', 'sv', 'it', 'sv', 'nl', 'de', 'af', 'tl', 'tl', 'tl', 'da', 'so', 'nl', 'fr', 'nl', 'de', 'de', 'sw', 'lt', 'sv', 'de', 'en', 'de', 'de', 'de', 'nl', 'nl', 'sv', 'nl', 'fr', 'de', 'nl', 'sv', 'fi', 'de', 'so', 'it', 'so', 'de', 'id', 'fr', 'fr', 'id', 'ro', 'sv', 'sl', 'lt', 'lt', 'lt', 'lt', 'lt', 'so', 'nl', 'hr', 'sv', 'vi', 'nl', 'en', 'en', 'af', 'sw', 'so', 'nl', 'cy', 'so', 'de', 'de', 'ro', 'da', 'en', 'fi', 'id', 'id', 'nl', 'cy', 'lt', 'cy', 'so', 'de', 'af', 'fi', 'sw', 'de', 'af', 'en', 'de', 'et', 'nl', 'de', 'id', 'en', 'af', 'lt', 'lt', 'nl', 'de', 'lt', 'de', 'en', 'nl', 'nl', 'nl', 'af', 'sv', 'en', 'lt', 'nl', 'lt', 'nl', 'sv', 'nl', 'sv', 'de', 'sv', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'en', 'pt', 'pt', 'pt', 'pt', 'de', 'da', 'nl', 'fr', 'en', 'hu', 'fr', 'pt', 'de', 'hr', 'lt', 'fr', 'nl', 'de', 'de', 'ca', 'en', 'da', 'tr', 'lt', 'nl', 'ca', 'lt', 'de', 'lt', 'lt', 'so', 'fr', 'lt', 'fr', 'sk', 'lt', 'en', 'nl', 'tl', 'fr', 'cy', 'cy', 'id', 'en', 'de', 'lt', 'ro', 'en', 'tr', 'sv', 'nl', 'sv', 'lt', 'ro', 'en', 'sv', 'de', 'af', 'sv', 'tl', 'nl', 'so', 'nl', 'no', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'cy', 'de', 'lt', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'nl', 'lt', 'lt', 'sv', 'id', 'lt', 'lt', 'tl', 'de', 'sv', 'id', 'cy', 'pl', 'sv', 'en', 'sv', 'lt', 'tl', 'lt', 'et', 'da', 'de', 'nl', 'da', 'nl', 'pt', 'et', 'vi', 'de', 'et', 'sv', 'sv', 'da', 'lt', 'ca', 'lt', 'nl', 'lt', 'lt', 'lt', 'sv', 'sv', 'cy', 'de', 'de', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'af', 'af', 'id', 'nl', 'nl', 'nl', 'id', 'no', 'sk', 'af', 'lt', 'nl', 'nl', 'en', 'lt', 'lt', 'it', 'nl', 'lt', 'nl', 'de', 'nl', 'nl', 'lt', 'de', 'nl', 'id', 'tl', 'de', 'de', 'sv', 'no', 'nl', 'de', 'de', 'nl', 'de', 'af', 'nl', 'de', 'de', 'tr', 'nl', 'nl', 'af', 'sv', 'sv', 'en', 'so', 'sv', 'sl', 'sl', 'it', 'so', 'en', 'no', 'fr', 'nl', 'tl', 'en', 'et', 'af', 'lt', 'lt', 'hr', 'lt', 'da', 'de', 'de', 'sv', 'sv', 'nl', 'lt', 'lt', 'nl', 'ro', 'nl', 'cy', 'lt', 'de', 'sv', 'nl', 'sv', 'sv', 'lt', 'de', 'de', 'lt', 'de', 'de', 'nl', 'no', 'de', 'de', 'nl', 'lt', 'de', 'de', 'de', 'lt', 'sv', 'nl', 'nl', 'sv', 'de', 'ro', 'tr', 'de', 'de', 'de', 'de', 'nl', 'nl', 'pl', 'de', 'de', 'de', 'en', 'de', 'en', 'de', 'lt', 'lt', 'de', 'lt', 'lt', 'lt', 'lt', 'de', 'sw', 'lt', 'de', 'de', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'de', 'lt', 'lt', 'lt', 'de', 'nl', 'de', 'id', 'lt', 'lt', 'lt', 'lt', 'lt', 'sv', 'tl', 'so', 'lt', 'es', 'it', 'lt', 'ro', 'lt', 'de', 'de', 'de', 'af', 'de', 'sv', 'de', 'sv', 'de', 'nl', 'nl', 'de', 'nl', 'af', 'sv', 'de', 'sv', 'af', 'sv', 'de', 'de', 'nl', 'de', 'de', 'nl', 'de', 'lt', 'de', 'de', 'nl', 'sv', 'nl', 'de', 'nl', 'nl', 'sv', 'nl', 'en', 'nl', 'nl', 'en', 'de', 'de', 'sv', 'sv', 'de', 'nl', 'de', 'lt', 'lt', 'lt', 'nl', 'sv', 'nl', 'nl', 'sv', 'nl', 'nl', 'sv', 'sv', 'sv', 'sv', 'lt', 'ro', 'nl', 'sv', 'nl', 'nl', 'sv', 'nl', 'lt', 'de', 'nl', 'sv', 'sv', 'de', 'nl', 'cy', 'tl', 'nl', 'cy', 'pl', 'pl', 'pl', 'af', 'et', 'en', 'so', 'tl', 'sl', 'sq', 'no', 'sv', 'sv', 'nl', 'de', 'de', 'nl', 'nl', 'de', 'de', 'de', 'en', 'af', 'de', 'nl', 'de', 'de', 'de', 'tl', 'tl', 'tl', 'tl', 'de', 'id', 'de', 'lt', 'et', 'vi', 'fr', 'es', 'en', 'da', 'tl', 'sv', 'de', 'da', 'de', 'lt', 'en', 'lt', 'fr', 'fr', 'tl', 'es', 'lt', 'en', 'en', 'id', 'de', 'da', 'pt', 'pt', 'so', 'nl', 'de', 'it', 'lt', 'id', 'de', 'nl', 'et', 'sv', 'de', 'de', 'nl', 'sv', 'sv', 'sv', 'de', 'nl', 'sv', 'nl', 'sv', 'no', 'tl', 'tl', 'it', 'de', 'de', 'it', 'nl', 'et', 'et', 'id', 'af', 'en', 'en', 'id', 'so', 'tl', 'so', 'so', 'it', 'da', 'id', 'lt', 'tl', 'fi', 'nl', 'cy', 'vi', 'sw', 'fr', 'pl', 'af', 'lt', 'sv', 'en', 'fi', 'fi', 'fi', 'so', 'so', 'so', 'cy', 'nl', 'so', 'so', 'so', 'nl', 'sv', 'cs', 'nl', 'de', 'cy', 'fr', 'no', 'id', 'af', 'af', 'af', 'sl', 'sv', 'pl', 'no', 'af', 'af', 'sl', 'af', 'et', 'lt', 'lt', 'lt', 'lt', 'de', 'de', 'sv', 'af', 'lt', 'nl', 'lt', 'sl', 'sv', 'ro', 'lt', 'sv', 'lt', 'en', 'af', 'en', 'lt', 'sv', 'nl', 'de', 'ro', 'da', 'et', 'no', 'tl', 'da', 'de', 'nl', 'sv', 'sv', 'et', 'lt', 'tl', 'lt', 'pt', 'fi', 'it', 'no', 'nl', 'de', 'nl', 'nl', 'nl', 'sv', 'de', 'de', 'so', 'so', 'no', 'nl', 'en', 'en', 'lt', 'nl', 'en', 'lt', 'en', 'nl', 'sv', 'de', 'ca', 'et', 'sv', 'en', 'so', 'de', 'so', 'nl', 'nl', 'lt', 'tl', 'tl', 'af', 'id', 'sv', 'so', 'lt', 'lt', 'tl', 'sv', 'nl', 'af', 'lt', 'lt', 'lt', 'lt', 'ca', 'nl', 'fi', 'no', 'hr', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'en', 'tl', 'sw', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'et', 'tl', 'tl', 'en', 'de', 'de', 'lt', 'de', 'af', 'af', 'da', 'ca', 'de', 'et', 'en', 'en', 'de', 'en', 'fr', 'de', 'sv', 'de', 'et', 'nl', 'de', 'tl', 'en', 'ro', 'no', 'en', 'nl', 'lt', 'de', 'lt', 'ca', 'ca', 'de', 'sq', 'af', 'nl', 'sv', 'nl', 'et', 'da', 'so', 'so', 'da', 'lt', 'tr', 'nl', 'tl', 'nl', 'de', 'en', 'de', 'en', 'de', 'de', 'de', 'lt', 'pt', 'de', 'de', 'de', 'de', 'de', 'vi', 'vi', 'de', 'de', 'es', 'pt', 'et', 'de', 'lt', 'af', 'sv', 'de', 'cy', 'de', 'de', 'de', 'lt', 'af', 'lt', 'nl', 'en', 'nl', 'de', 'nl', 'nl', 'nl', 'de', 'de', 'sv', 'sv', 'nl', 'de', 'lt', 'nl', 'en', 'de', 'de', 'nl', 'nl', 'nl', 'nl', 'nl', 'de', 'de', 'de', 'sv', 'nl', 'de', 'de', 'de', 'nl', 'de', 'de', 'nl', 'en', 'sv', 'nl', 'nl', 'nl', 'nl', 'tl', 'tl', 'so', 'sv', 'en', 'tl', 'en', 'tl', 'tl', 'tl', 'en', 'tl', 'tl', 'de', 'tl', 'en', 'tl', 'id', 'ro', 'sv', 'nl', 'nl', 'de', 'nl', 'de', 'et', 'fi', 'af', 'en', 'es', 'lt', 'nl', 'lt', 'lt', 'nl', 'lt', 'lt', 'de', 'de', 'nl', 'nl', 'de', 'nl', 'nl', 'sv', 'lt', 'nl', 'nl', 'nl', 'de', 'de', 'nl', 'nl', 'nl', 'sv', 'de', 'en', 'sv', 'de', 'lt', 'de', 'no', 'sv', 'sv', 'et', 'pt', 'tl', 'tl', 'tl', 'sv', 'cy', 'en', 'id', 'id', 'id', 'lt', 'af', 'ro', 'id', 'so', 'nl', 'da', 'de', 'lt', 'lt', 'de', 'id', 'fi', 'fr', 'lt', 'fi', 'et', 'lt', 'lt', 'af', 'id', 'af', 'af', 'sv', 'so', 'tr', 'af', 'sv', 'en', 'en', 'af', 'af', 'pl', 'de', 'fi', 'so', 'nl', 'nl', 'pl', 'nl', 'nl', 'af', 'fr', 'sv', 'nl', 'de', 'af', 'ro', 'de', 'nl', 'da', 'lt', 'de', 'en', 'de', 'et', 'sv', 'de', 'fi', 'pl', 'tl', 'nl', 'en', 'nl', 'nl', 'nl', 'nl', 'nl', 'sv', 'lt', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'sw', 'sw', 'lt', 'nl', 'so', 'nl', 'sv', 'pl', 'de', 'nl', 'en', 'nl', 'nl', 'de', 'sv', 'nl', 'nl', 'en', 'tl', 'tl', 'id', 'nl', 'lt', 'en', 'de', 'de', 'de', 'de', 'de', 'nl', 'nl', 'nl', 'de', 'af', 'af', 'de', 'sv', 'tl', 'tl', 'lt', 'nl', 'tl', 'so', 'de', 'et', 'it', 'nl', 'et', 'so', 'de', 'pl', 'no', 'et', 'pt', 'de', 'de', 'de', 'sv', 'de', 'id', 'lt', 'fr', 'en', 'vi', 'en', 'id', 'tl', 'lt', 'af', 'sv', 'sv', 'hr', 'lt', 'nl', 'en', 'de', 'de', 'de', 'en', 'de', 'nl', 'en', 'af', 'af', 'sl', 'de', 'af', 'de', 'de', 'nl', 'de', 'da', 'de', 'af', 'es', 'tl', 'no', 'so', 'tr', 'tl', 'cy', 'da', 'so', 'da', 'af', 'so', 'tl', 'so', 'sl', 'sl', 'id', 'et', 'af', 'tl', 'no', 'tr', 'so', 'sl', 'cy', 'cy', 'af', 'da', 'so', 'fi', 'en', 'et', 'tl', 'sv', 'so', 'en', 'so', 'nl', 'fr', 'cy', 'so', 'so', 'en', 'es', 'en', 'tl', 'nl', 'tl', 'nl', 'tr', 'it', 'cy', 'no', 'so', 'no', 'tl', 'nl', 'it', 'fi', 'id', 'fr', 'fi', 'de', 'tr', 'af', 'da', 'da', 'cy', 'fr', 'en', 'sv', 'fr', 'af', 'af', 'nl', 'af', 'en', 'it', 'sk', 'da', 'fr', 'cy', 'so', 'tl', 'tr', 'id', 'sv', 'cy', 'es', 'af', 'da', 'it', 'pt', 'no', 'tl', 'tl', 'tl', 'vi', 'it', 'tl', 'tl', 'it', 'cy', 'nl', 'nl', 'de', 'lt', 'nl', 'sv', 'cs', 'sv', 'pl', 'da', 'no', 'tl', 'de', 'fi', 'nl', 'de', 'sv', 'so', 'tr', 'cy', 'sv', 'de', 'tl', 'no', 'de', 'en', 'nl', 'tl', 'nl', 'sv', 'nl', 'en', 'ro', 'af', 'de', 'nl', 'fr', 'pl', 'nl', 'sq', 'lt', 'af', 'id', 'so', 'nl', 'da', 'no', 'en', 'nl', 'lt', 'nl', 'nl', 'it', 'cy', 'en', 'af', 'so', 'no', 'no', 'nl', 'sv', 'tr', 'nl', 'da', 'de', 'de', 'lt', 'nl', 'lt', 'nl', 'nl', 'pl', 'sv', 'af', 'de', 'de', 'sv', 'id', 'tl', 'it', 'de', 'en', 'cy', 'id', 'id', 'id', 'et', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'nl', 'de', 'so', 'de', 'sv', 'sv', 'nl', 'nl', 'sv', 'lt', 'id', 'af', 'fi', 'fi', 'lt', 'hu', 'no', 'lt', 'de', 'sv', 'lt', 'pl', 'id', 'nl', 'id', 'id', 'id', 'so', 'sv', 'en', 'en', 'de', 'de', 'de', 'lt', 'en', 'lt', 'nl', 'lt', 'sl', 'sv', 'af', 'pt', 'it', 'nl', 'en', 'fr', 'lt', 'lt', 'lt', 'lt', 'lt', 'so', 'nl', 'lt', 'nl', 'de', 'nl', 'sw', 'da', 'no', 'sq', 'vi', 'lt', 'en', 'en', 'de', 'nl', 'de', 'nl', 'nl', 'en', 'pl', 'en', 'en', 'de', 'fi', 'de', 'fi', 'de', 'de', 'de', 'af', 'de', 'nl', 'tl', 'sv', 'no', 'de', 'tl', 'en', 'no', 'de', 'es', 'lt', 'lt', 'lt', 'lt', 'de', 'de', 'nl', 'nl', 'de', 'de', 'sl', 'lt', 'fr', 'en', 'nl', 'lt', 'de', 'no', 'de', 'de', 'de', 'cy', 'nl', 'sl', 'vi', 'en', 'lt', 'en', 'de', 'fr', 'de', 'nl', 'id', 'lt', 'en', 'lt', 'af', 'en', 'nl', 'en', 'nl', 'tr', 'en', 'lt', 'af', 'sv', 'nl', 'af', 'lt', 'af', 'de', 'nl', 'id', 'af', 'de', 'sv', 'fr', 'so', 'es', 'sl', 'pt', 'pt', 'so', 'af', 'de', 'lt', 'de', 'ro', 'nl', 'sv', 'af', 'cy', 'fr', 'cy', 'de', 'nl', 'es', 'es', 'lt', 'de', 'ro', 'en', 'lt', 'sv', 'id', 'nl', 'sv', 'nl', 'de', 'af', 'nl', 'lt', 'et', 'en', 'lt', 'de', 'af', 'en', 'sv', 'hu', 'ro', 'fr', 'it', 'af', 'de', 'ro', 'ro', 'ro', 'nl', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'sl', 'pl', 'en', 'pl', 'sl', 'sl', 'sl', 'sv', 'sv', 'nl', 'nl', 'de', 'nl', 'so', 'et', 'en', 'lt', 'lt', 'lt', 'en', 'pt', 'no', 'nl', 'no', 'ro', 'en', 'nl', 'no', 'no', 'lt', 'id', 'tr', 'tr', 'id', 'fr', 'id', 'nl', 'sl', 'lt', 'fr', 'de', 'nl', 'af', 'lt', 'id', 'sv', 'tl', 'en', 'fr', 'sv', 'lt', 'fi', 'sv', 'da', 'nl', 'de', 'nl', 'en', 'sv', 'id', 'nl', 'fr', 'nl', 'en', 'ro', 'id', 'hu', 'nl', 'en', 'nl', 'en', 'id', 'de', 'tl', 'tl', 'sv', 'nl', 'lt', 'de', 'de', 'de', 'lt', 'sv', 'en', 'ro', 'af', 'sv', 'sv', 'de', 'de', 'nl', 'af', 'lt', 'nl', 'nl', 'sv', 'pl', 'so', 'no', 'lt', 'de', 'lt', 'sv', 'lt', 'fi', 'sv', 'nl', 'lt', 'nl', 'nl', 'so', 'id', 'sv', 'so', 'sv', 'nl', 'nl', 'af', 'nl', 'sv', 'de', 'nl', 'nl', 'sv', 'nl', 'sv', 'so', 'de', 'sv', 'nl', 'sl', 'af', 'lt', 'pl', 'fr', 'lt', 'nl', 'cy', 'de', 'et', 'lt', 'en', 'en', 'nl', 'da', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'pl', 'cy', 'so', 'tl', 'tl', 'af', 'de', 'tr', 'tr', 'tr', 'tr', 'tr', 'tr', 'tr', 'tr', 'lt', 'cy', 'nl', 'de', 'tr', 'lt', 'lt', 'lt', 'lt', 'sv', 'nl', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'de', 'ro', 'sv', 'it', 'sl', 'lt', 'lt', 'sv', 'lt', 'lt', 'de', 'lt', 'lt', 'lt', 'lt', 'lt', 'de', 'de', 'lt', 'de', 'lt', 'de', 'lt', 'sv', 'af', 'lt', 'ca', 'es', 'sv', 'en', 'de', 'de', 'lt', 'de', 'nl', 'af', 'it', 'cy', 'tl', 'so', 'fi', 'de', 'af', 'de', 'en', 'de', 'nl', 'nl', 'en', 'af', 'so', 'es', 'en', 'so', 'so', 'cy', 'et', 'de', 'da', 'af', 'id', 'en', 'af', 'nl', 'id', 'tl', 'af', 'ca', 'af', 'es', 'so', 'no', 'pl', 'pl', 'pt', 'de', 'nl', 'tl', 'nl', 'so', 'pl', 'de', 'so', 'fr', 'so', 'so', 'no', 'so', 'nl', 'fi', 'en', 'it', 'tl', 'sk', 'af', 'so', 'sk', 'lt', 'da', 'it', 'no', 'vi', 'id', 'fr', 'so', 'vi', 'es', 'so', 'de', 'en', 'lt', 'da', 'tr', 'es', 'en', 'it', 'nl', 'tr', 'pl', 'no', 'so', 'fi', 'da', 'sv', 'en', 'fr', 'tl', 'nl', 'tl', 'af', 'no', 'it', 'af', 'en', 'so', 'so', 'lt', 'nl', 'en', 'id', 'so', 'vi', 'en', 'cy', 'tl', 'en', 'et', 'en', 'sl', 'lt', 'sv', 'sv', 'lt', 'lt', 'sv', 'tr', 'lt', 'lt', 'de', 'de', 'lt', 'de', 'de', 'tl', 'lt', 'lt', 'de', 'lt', 'sl', 'de', 'so', 'nl', 'nl', 'et', 'sl', 'lt', 'lt', 'lt', 'tr', 'lt', 'lt', 'et', 'et', 'lt', 'nl', 'lt', 'tr', 'so', 'lt', 'sl', 'lt', 'nl', 'ro', 'sl', 'lt', 'lt', 'lt', 'lt', 'nl', 'sl', 'it', 'af', 'cy', 'et', 'ca', 'et', 'nl', 'fr', 'tl', 'tl', 'tl', 'af', 'tl', 'af', 'tl', 'id', 'tl', 'tl', 'tr', 'tr', 'so', 'nl', 'de', 'nl', 'af', 'de', 'sw', 'vi', 'de', 'de', 'af', 'id', 'af', 'en', 'de', 'de', 'de', 'ro', 'ca', 'no', 'nl', 'af', 'nl', 'af', 'nl', 'nl', 'af', 'cy', 'ca', 'af', 'id', 'lt', 'en', 'de', 'af', 'es', 'so', 'vi', 'de', 'sv', 'nl', 'id', 'de', 'de', 'lt', 'nl', 'en', 'sv', 'nl', 'sv', 'de', 'pl', 'en', 'nl', 'sv', 'en', 'sv', 'nl', 'de', 'tr', 'de', 'sv', 'nl', 'fi', 'ro', 'nl', 'nl', 'lt', 'de', 'da', 'lt', 'de', 'sv', 'sv', 'tr', 'sv', 'de', 'de', 'sv', 'de', 'de', 'de', 'lt', 'lt', 'lt', 'de', 'nl', 'fr', 'lt', 'et', 'so', 'fr', 'it', 'de', 'en', 'sv', 'tl', 'tl', 'tl', 'af', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'no', 'tl', 'so', 'it', 'fr', 'sw', 'id', 'cy', 'cy', 'no', 'no', 'fr', 'sq', 'so', 'so', 'so', 'sq', 'no', 'so', 'no', 'en', 'no', 'tl', 'fr', 'tr', 'no', 'no', 'en', 'en', 'en', 'no', 'id', 'da', 'da', 'af', 'sq', 'vi', 'no', 'cy', 'so', 'so', 'af', 'fr', 'en', 'cs', 'en', 'fi', 'sv', 'no', 'sq', 'de', 'tr', 'fr', 'pl', 'sl', 'da', 'af', 'id', 'sl', 'et', 'af', 'af', 'af', 'ro', 'so', 'so', 'cy', 'da', 'hr', 'sv', 'sk', 'en', 'cy', 'en', 'en', 'fr', 'tl', 'fr', 'fr', 'en', 'id', 'id', 'so', 'id', 'en', 'it', 'so', 'nl', 'cs', 'tr', 'en', 'af', 'en', 'so', 'sv', 'af', 'cy', 'en', 'fr', 'af', 'hr', 'sv', 'no', 'cy', 'en', 'hr', 'nl', 'cy', 'vi', 'so', 'so', 'vi', 'sk', 'de', 'id', 'en', 'cy', 'nl', 'nl', 'nl', 'nl', 'sv', 'sv', 'lt', 'de', 'de', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'af', 'lt', 'id', 'tl', 'en', 'lt', 'de', 'no', 'af', 'nl', 'en', 'en', 'tr', 'nl', 'id', 'nl', 'en', 'af', 'tl', 'so', 'et', 'en', 'fi', 'de', 'tr', 'de', 'tl', 'en', 'lt', 'et', 'nl', 'tl', 'sv', 'nl', 'sv', 'tl', 'nl', 'nl', 'sv', 'tl', 'en', 'sv', 'ro', 'sl', 'sq', 'tr', 'lt', 'sl', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'en', 'et', 'lt', 'ro', 'es', 'af', 'sl', 'es', 'lt', 'lt', 'ca', 'nl', 'nl', 'id', 'sv', 'af', 'nl', 'no', 'ca', 'es', 'nl', 'sv', 'sv', 'af', 'lt', 'nl', 'nl', 'nl', 'nl', 'tr', 'nl', 'nl', 'sv', 'de', 'lt', 'sv', 'sv', 'sv', 'pl', 'en', 'da', 'id', 'en', 'cy', 'nl', 'af', 'de', 'nl', 'so', 'cy', 'fr', 'de', 'nl', 'lt', 'de', 'de', 'nl', 'nl', 'nl', 'de', 'sv', 'de', 'de', 'af', 'de', 'de', 'de', 'sv', 'sv', 'fi', 'lt', 'da', 'de', 'en', 'nl', 'sv', 'et', 'it', 'sv', 'sv', 'nl', 'sv', 'sv', 'nl', 'de', 'lt', 'nl', 'af', 'sv', 'lt', 'de', 'lt', 'de', 'sv', 'af', 'nl', 'de', 'et', 'de', 'pt', 'lt', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'lt', 'so', 'tl', 'da', 'nl', 'nl', 'nl', 'sv', 'nl', 'en', 'en', 'nl', 'no', 'ro', 'nl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'sv', 'nl', 'af', 'de', 'ro', 'id', 'af', 'so', 'de', 'af', 'de', 'nl', 'nl', 'nl', 'en', 'id', 'nl', 'pl', 'en', 'en', 'vi', 'tl', 'es', 'so', 'vi', 'et', 'fr', 'de', 'de', 'so', 'so', 'sv', 'no', 'nl', 'nl', 'da', 'de', 'ro', 'no', 'tl', 'da', 'so', 'da', 'af', 'af', 'pt', 'fr', 'fr', 'it', 'cy', 'no', 'so', 'so', 'cs', 'es', 'de', 'id', 'so', 'en', 'es', 'cy', 'cy', 'cs', 'nl', 'af', 'de', 'nl', 'sv', 'nl', 'hr', 'tl', 'tr', 'nl', 'cy', 'da', 'ro', 'fr', 'af', 'it', 'af', 'ca', 'tr', 'es', 'fr', 'so', 'ca', 'da', 'no', 'cy', 'sq', 'sl', 'af', 'pt', 'en', 'id', 'it', 'no', 'fr', 'cy', 'en', 'tl', 'it', 'ca', 'af', 'fi', 'no', 'so', 'da', 'id', 'pt', 'id', 'nl', 'lt', 'nl', 'sv', 'nl', 'fi', 'nl', 'en', 'nl', 'sv', 'sv', 'nl', 'de', 'cy', 'nl', 'fr', 'ca', 'tl', 'af', 'da', 'en', 'so', 'pl', 'id', 'no', 'af', 'id', 'id', 'de', 'et', 'tl', 'id', 'da', 'tl', 'nl', 'id', 'de', 'da', 'da', 'fi', 'nl', 'tl', 'tl', 'lt', 'nl', 'af', 'id', 'so', 'tl', 'nl', 'id', 'pl', 'no', 'hr', 'et', 'hr', 'de', 'id', 'id', 'id', 'id', 'fi', 'lt', 'de', 'pt', 'hr', 'lt', 'sv', 'de', 'nl', 'nl', 'sv', 'sv', 'en', 'nl', 'af', 'et', 'et', 'af', 'de', 'de', 'it', 'fr', 'fr', 'no', 'de', 'lt', 'lt', 'af', 'en', 'lt', 'tl', 'af', 'fr', 'hu', 'so', 'de', 'so', 'fi', 'lt', 'lt', 'lt', 'id', 'et', 'so', 'af', 'id', 'en', 'de', 'nl', 'sv', 'fi', 'no', 'fr', 'no', 'vi', 'pt', 'so', 'et', 'de', 'de', 'nl', 'de', 'lt', 'sl', 'nl', 'en', 'lt', 'nl', 'en', 'sw', 'da', 'tl', 'lt', 'de', 'af', 'de', 'no', 'nl', 'da', 'vi', 'nl', 'so', 'de', 'da', 'fr', 'it', 'hu', 'en', 'no', 'so', 'en', 'de', 'es', 'da', 'no', 'hr', 'cy', 'sv', 'sw', 'de', 'tl', 'no', 'so', 'so', 'da', 'tl', 'da', 'cy', 'da', 'nl', 'de', 'sv', 'de', 'sv', 'de', 'de', 'id', 'tl', 'id', 'sv', 'sv', 'af', 'id', 'en', 'fr', 'sv', 'ro', 'fi', 'de', 'ro', 'nl', 'tl', 'tl', 'tl', 'en', 'en', 'sv', 'sv', 'sv', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'nl', 'cy', 'id', 'id', 'af', 'sv', 'de', 'nl', 'nl', 'de', 'de', 'lt', 'de', 'nl', 'no', 'en', 'sv', 'nl', 'nl', 'nl', 'en', 'nl', 'nl', 'de', 'de', 'de', 'nl', 'de', 'de', 'lt', 'nl', 'de', 'de', 'nl', 'de', 'sv', 'de', 'et', 'nl', 'de', 'nl', 'af', 'af', 'de', 'de', 'de', 'nl', 'nl', 'nl', 'lt', 'en', 'nl', 'lt', 'de', 'nl', 'nl', 'tr', 'af', 'lt', 'it', 'nl', 'lt', 'id', 'pl', 'da', 'id', 'tl', 'de', 'af', 'tl', 'it', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'nl', 'de', 'de', 'de', 'de', 'de', 'da', 'nl', 'nl', 'de', 'sv', 'es', 'no', 'af', 'no', 'sk', 'da', 'vi', 'de', 'tl', 'de', 'lt', 'de', 'lt', 'de', 'de', 'lt', 'lt', 'lt', 'lt', 'de', 'sl', 'en', 'lt', 'af', 'de', 'es', 'af', 'nl', 'es', 'en', 'et', 'nl', 'nl', 'de', 'nl', 'no', 'fi', 'af', 'lt', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'da', 'id', 'it', 'id', 'id', 'et', 'id', 'id', 'id', 'lt', 'fr', 'nl', 'nl', 'lt', 'ca', 'et', 'nl', 'lt', 'fi', 'en', 'id', 'tl', 'tl', 'tr', 'tl', 'tl', 'tl', 'tl', 'tl', 'id', 'tl', 'tl', 'tl', 'tl', 'tl', 'af', 'tl', 'nl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'en', 'tl', 'tl', 'tl', 'en', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'so', 'tl', 'tl', 'tl', 'id', 'en', 'tl', 'tl', 'tl', 'en', 'tl', 'tl', 'tl', 'en', 'hu', 'sv', 'sv', 'nl', 'nl', 'de', 'ro', 'fi', 'id', 'fr', 'da', 'hr', 'nl', 'nl', 'de', 'et', 'af', 'de', 'af', 'so', 'tr', 'lt', 'en', 'af', 'af', 'nl', 'nl', 'en', 'tl', 'cy', 'tr', 'cy', 'en', 'sk', 'nl', 'de', 'fi', 'de', 'de', 'nl', 'nl', 'da', 'de', 'lt', 'lt', 'lt', 'it', 'af', 'ro', 'de', 'nl', 'nl', 'de', 'pl', 'id', 'it', 'it', 'no', 'so', 'tr', 'lt', 'nl', 'ro', 'nl', 'de', 'de', 'nl', 'id', 'de', 'sq', 'nl', 'so', 'et', 'lt', 'lt', 'de', 'fr', 'en', 'lt', 'lt', 'sv', 'lt', 'tl', 'so', 'nl', 'fi', 'de', 'so', 'pl', 'lt', 'lt', 'cy', 'en', 'tr', 'da', 'nl', 'en', 'so', 'so', 'tl', 'sv', 'tl', 'sq', 'sv', 'tl', 'tl', 'tl', 'en', 'en', 'nl', 'id', 'id', 'sv', 'de', 'nl', 'lt', 'af', 'id', 'de', 'fr', 'de', 'af', 'de', 'cy', 'id', 'nl', 'et', 'it', 'tr', 'sl', 'de', 'es', 'de', 'es', 'no', 'sk', 'da', 'da', 'de', 'af', 'so', 'sv', 'en', 'nl', 'de', 'tl', 'nl', 'nl', 'tr', 'cy', 'en', 'lt', 'nl', 'nl', 'nl', 'lt', 'en', 'de', 'sv', 'pl', 'sv', 'sv', 'nl', 'de', 'nl', 'nl', 'sv', 'sv', 'nl', 'sv', 'sv', 'de', 'nl', 'de', 'sv', 'af', 'nl', 'nl', 'ca', 'nl', 'tr', 'sv', 'nl', 'sv', 'nl', 'pl', 'sv', 'en', 'no', 'sv', 'nl', 'en', 'en', 'de', 'af', 'nl', 'sv', 'de', 'de', 'ro', 'af', 'et', 'de', 'fi', 'en', 'de', 'lt', 'sv', 'nl', 'nl', 'nl', 'de', 'so', 'nl', 'sv', 'en', 'nl', 'et', 'nl', 'en', 'af', 'de', 'et', 'de', 'nl', 'nl', 'de', 'af', 'de', 'nl', 'de', 'de', 'af', 'de', 'af', 'de', 'af', 'id', 'id', 'id', 'id', 'id', 'id', 'de', 'id', 'nl', 'lt', 'sv', 'nl', 'nl', 'nl', 'nl', 'sl', 'sv', 'de', 'de', 'lt', 'sv', 'nl', 'sv', 'de', 'nl', 'id', 'lt', 'en', 'de', 'id', 'nl', 'lt', 'nl', 'de', 'tr', 'de', 'nl', 'nl', 'so', 'nl', 'ro', 'no', 'ro', 'nl', 'lt', 'af', 'lt', 'nl', 'de', 'af', 'lt', 'de', 'id', 'nl', 'lt', 'sv', 'id', 'id', 'de', 'nl', 'nl', 'sv', 'lt', 'nl', 'tr', 'lt', 'fi', 'nl', 'nl', 'nl', 'sv', 'sv', 'da', 'de', 'nl', 'sv', 'de', 'de', 'sv', 'de', 'de', 'da', 'fr', 'de', 'nl', 'nl', 'nl', 'fr', 'nl', 'en', 'af', 'en', 'sv', 'de', 'nl', 'nl', 'sv', 'nl', 'sv', 'af', 'af', 'nl', 'af', 'pl', 'id', 'id', 'id', 'id', 'id', 'de', 'cy', 'af', 'af', 'af', 'sv', 'ro', 'fr', 'nl', 'lt', 'nl', 'ro', 'da', 'de', 'no', 'fr', 'en', 'id', 'sv', 'pl', 'no', 'af', 'nl', 'af', 'fr', 'de', 'sv', 'nl', 'id', 'tr', 'sv', 'de', 'tl', 'de', 'lt', 'sv', 'so', 'lt', 'fr', 'tl', 'no', 'no', 'fi', 'en', 'nl', 'af', 'id', 'de', 'it', 'da', 'de', 'tl', 'no', 'de', 'fr', 'af', 'cy', 'so', 'so', 'en', 'tl', 'tr', 'nl', 'sv', 'de', 'en', 'id', 'sv', 'id', 'so', 'tl', 'id', 'es', 'id', 'af', 'nl', 'sv', 'sv', 'lt', 'et', 'lt', 'de', 'nl', 'id', 'id', 'id', 'en', 'lt', 'af', 'ro', 'tl', 'tl', 'tl', 'id', 'nl', 'nl', 'de', 'nl', 'sv', 'id', 'tl', 'nl', 'nl', 'sv', 'sv', 'nl', 'nl', 'de', 'en', 'af', 'nl', 'de', 'af', 'lt', 'et', 'et', 'cs', 'tl', 'fr', 'hr', 'de', 'de', 'de', 'de', 'tl', 'tl', 'sq', 'en', 'en', 'sv', 'sv', 'sv', 'tl', 'de', 'de', 'no', 'no', 'no', 'en', 'nl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'id', 'fr', 'et', 'es', 'es', 'tl', 'tl', 'lt', 'af', 'af', 'de', 'nl', 'es', 'fr', 'nl', 'de', 'sv', 'sw', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'et', 'nl', 'de', 'nl', 'fr', 'da', 'tl', 'no', 'af', 'tl', 'id', 'nl', 'nl', 'de', 'nl', 'nl', 'en', 'sv', 'de', 'de', 'fi', 'et', 'fi', 'lt', 'lt', 'pl', 'nl', 'sl', 'es', 'af', 'hr', 'it', 'es', 'cy', 'nl', 'da', 'pt', 'en', 'so', 'fr', 'tl', 'sv', 'tl', 'fr', 'de', 'fr', 'so', 'de', 'ca', 'vi', 'no', 'nl', 'de', 'en', 'sv', 'af', 'de', 'de', 'fr', 'lt', 'fr', 'fr', 'no', 'id', 'lt', 'lt', 'nl', 'lt', 'lt', 'et', 'et', 'af', 'cy', 'et', 'de', 'so', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'pt', 'pt', 'de', 'da', 'lt', 'cy', 'lt', 'nl', 'en', 'de', 'de', 'id', 'lt', 'sv', 'lt', 'sv', 'nl', 'nl', 'sk', 'nl', 'nl', 'af', 'pl', 'de', 'nl', 'sv', 'nl', 'lt', 'sv', 'de', 'de', 'af', 'lt', 'nl', 'sl', 'de', 'sv', 'nl', 'af', 'no', 'es', 'en', 'nl', 'de', 'de', 'nl', 'ca', 'af', 'de', 'nl', 'id', 'af', 'en', 'af', 'so', 'de', 'de', 'de', 'de', 'ro', 'af', 'en', 'id', 'sv', 'nl', 'af', 'de', 'de', 'de', 'id', 'id', 'id', 'id', 'de', 'nl', 'es', 'da', 'id', 'so', 'cy', 'de', 'en', 'id', 'sk', 'no', 'fi', 'it', 'de', 'en', 'lt', 'de', 'id', 'id', 'id', 'id', 'de', 'de', 'cy', 'de', 'de', 'es', 'da', 'es', 'so', 'en', 'vi', 'en', 'nl', 'en', 'nl', 'lt', 'fr', 'da', 'lt', 'so', 'lt', 'lt', 'nl', 'sq', 'sw', 'tl', 'no', 'de', 'da', 'nl', 'tr', 'id', 'id', 'id', 'id', 'id', 'de', 'es', 'de', 'de', 'de', 'nl', 'af', 'af', 'da', 'es', 'lt', 'af', 'af', 'it', 'no', 'fr', 'so', 'nl', 'de', 'en', 'en', 'af', 'vi', 'nl', 'nl', 'hu', 'de', 'pt', 'no', 'it', 'en', 'so', 'af', 'de', 'no', 'vi', 'de', 'so', 'fr', 'tl', 'lt', 'fr', 'et', 'id', 'tl', 'da', 'de', 'so', 'lt', 'pl', 'lt', 'lt', 'nl', 'de', 'nl', 'so', 'en', 'nl', 'hu', 'nl', 'nl', 'it', 'lt', 'en', 'nl', 'af', 'nl', 'de', 'nl', 'nl', 'af', 'id', 'en', 'af', 'en', 'af', 'de', 'nl', 'af', 'fr', 'lt', 'de', 'af', 'sv', 'af', 'sv', 'id', 'da', 'da', 'de', 'sv', 'no', 'de', 'no', 'tr', 'lt', 'en', 'nl', 'sv', 'sv', 'en', 'so', 'lt', 'af', 'en', 'sl', 'id', 'nl', 'so', 'it', 'lt', 'nl', 'fr', 'sv', 'en', 'sv', 'sv', 'sv', 'da', 'nl', 'sv', 'nl', 'nl', 'nl', 'af', 'nl', 'id', 'de', 'de', 'de', 'de', 'ro', 'en', 'sv', 'sv', 'sv', 'de', 'nl', 'et', 'et', 'nl', 'so', 'en', 'af', 'fr', 'af', 'da', 'sv', 'so', 'lt', 'de', 'fi', 'cy', 'no', 'en', 'nl', 'af', 'sq', 'id', 'en', 'ro', 'it', 'ca', 'de', 'lt', 'en', 'pl', 'lt', 'fr', 'tl', 'af', 'de', 'id', 'en', 'cy', 'sv', 'id', 'de', 'de', 'sv', 'de', 'nl', 'de', 'de', 'sv', 'sv', 'de', 'de', 'de', 'de', 'de', 'nl', 'de', 'en', 'tl', 'no', 'sv', 'de', 'lt', 'de', 'de', 'ca', 'id', 'id', 'lt', 'nl', 'sv', 'lt', 'sv', 'de', 'tl', 'af', 'so', 'sl', 'sv', 'sv', 'lt', 'sv', 'tl', 'sv', 'lt', 'sv', 'nl', 'lt', 'lt', 'de', 'en', 'ca', 'es', 'es', 'da', 'de', 'de', 'lt', 'cy', 'cy', 'nl', 'fi', 'de', 'sv', 'pl', 'de', 'sq', 'hr', 'sl', 'it', 'nl', 'nl', 'so', 'id', 'lt', 'af', 'nl', 'de', 'da', 'lt', 'de', 'de', 'nl', 'de', 'nl', 'de', 'de', 'nl', 'et', 'sv', 'de', 'lt', 'af', 'ca', 'sv', 'de', 'pl', 'af', 'lt', 'nl', 'de', 'lt', 'tr', 'en', 'sv', 'de', 'lt', 'lt', 'lt', 'nl', 'lt', 'ro', 'sv', 'ro', 'da', 'nl', 'es', 'de', 'de', 'de', 'de', 'de', 'id', 'id', 'id', 'pl', 'id', 'en', 'de', 'sl', 'nl', 'sv', 'nl', 'de', 'tl', 'lt', 'af', 'de', 'tl', 'es', 'et', 'pl', 'sw', 'id', 'nl', 'et', 'en', 'nl', 'id', 'nl', 'vi', 'af', 'nl', 'nl', 'no', 'cy', 'sl', 'so', 'da', 'da', 'lt', 'so', 'en', 'so', 'so', 'so', 'fi', 'lt', 'de', 'nl', 'sw', 'id', 'cy', 'de', 'en', 'pl', 'et', 'et', 'et', 'so', 'ro', 'de', 'es', 'en', 'tl', 'cy', 'af', 'vi', 'vi', 'de', 'so', 'pl', 'vi', 'so', 'nl', 'so', 'en', 'lt', 'af', 'sv', 'pl', 'de', 'de', 'tl', 'it', 'sv', 'de', 'nl', 'id', 'nl', 'de', 'nl', 'sv', 'sv', 'tr', 'de', 'sl', 'de', 'nl', 'lt', 'lt', 'de', 'de', 'en', 'af', 'de', 'de', 'de', 'af', 'en', 'no', 'de', 'ro', 'nl', 'af', 'af', 'de', 'af', 'lt', 'tl', 'lt', 'id', 'en', 'af', 'lt', 'af', 'so', 'da', 'nl', 'fr', 'tl', 'de', 'de', 'de', 'nl', 'de', 'de', 'no', 'af', 'de', 'de', 'sl', 'nl', 'sl', 'sv', 'sv', 'en', 'so', 'sv', 'nl', 'cs', 'sv', 'nl', 'nl', 'sv', 'af', 'nl', 'nl', 'ro', 'nl', 'nl', 'de', 'de', 'sv', 'id', 'id', 'id', 'id', 'pl', 'af', 'af', 'de', 'nl', 'ro', 'af', 'en', 'da', 'fi', 'id', 'id', 'de', 'da', 'nl', 'id', 'lt', 'ro', 'de', 'cy', 'tl', 'de', 'de', 'lt', 'fr', 'sv', 'tl', 'nl', 'nl', 'lt', 'af', 'de', 'sv', 'sv', 'sv', 'de', 'so', 'so', 'so', 'so', 'so', 'so', 'so', 'so', 'so', 'so', 'so', 'so', 'so', 'so', 'so', 'fi', 'hr', 'nl', 'tr', 'cy', 'pt', 'af', 'cy', 'tr', 'hr', 'pt', 'af', 'fr', 'cy', 'cy', 'tl', 'so', 'so', 'so', 'id', 'cy', 'fi', 'tl', 'cy', 'sw', 'en', 'vi', 'so', 'vi', 'af', 'cy', 'it', 'sw', 'so', 'sw', 'de', 'da', 'fr', 'so', 'sw', 'en', 'so', 'so', 'sv', 'nl', 'en', 'et', 'en', 'so', 'ca', 'so', 'tl', 'tl', 'et', 'it', 'de', 'vi', 'fi', 'lv', 'no', 'en', 'de', 'sw', 'nl', 'de', 'pl', 'de', 'de', 'de', 'de', 'pt', 'en', 'nl', 'de', 'da', 'no', 'nl', 'no', 'af', 'tl', 'fr', 'fr', 'fr', 'af', 'en', 'sl', 'lv', 'da', 'ro', 'da', 'da', 'sq', 'cy', 'id', 'de', 'de', 'en', 'en', 'de', 'lt', 'es', 'es', 'de', 'da', 'af', 'nl', 'sv', 'de', 'sq', 'de', 'af', 'de', 'no', 'de', 'de', 'de', 'so', 'de', 'nl', 'vi', 'nl', 'de', 'fr', 'so', 'af', 'de', 'sv', 'lt', 'nl', 'sw', 'it', 'de', 'cs', 'tl', 'de', 'vi', 'pt', 'de', 'lt', 'so', 'sv', 'nl', 'id', 'et', 'lt', 'nl', 'de', 'tr', 'tr', 'so', 'tr', 'de', 'de', 'de', 'es', 'ca', 'es', 'es', 'es', 'es', 'es', 'es', 'id', 'sw', 'en', 'de', 'sw', 'pl', 'sw', 'cs', 'it', 'ca', 'sq', 'de', 'ro', 'so', 'af', 'so', 'vi', 'so', 'no', 'es', 'lt', 'tl', 'nl', 'de', 'fr', 'nl', 'sv', 'de', 'de', 'af', 'de', 'ro', 'sv', 'de', 'nl', 'af', 'id', 'nl', 'lt', 'lt', 'af', 'fi', 'lt', 'nl', 'tl', 'hr', 'nl', 'de', 'nl', 'nl', 'sv', 'sq', 'sv', 'af', 'de', 'lt', 'lt', 'cy', 'af', 'af', 'so', 'de', 'af', 'id', 'af', 'no', 'de', 'de', 'ca', 'de', 'et', 'et', 'pl', 'cy', 'en', 'de', 'sv', 'de', 'nl', 'da', 'de', 'de', 'so', 'de', 'lt', 'ro', 'en', 'lt', 'nl', 'de', 'nl', 'nl', 'tl', 'et', 'cy', 'de', 'vi', 'no', 'de', 'de', 'sv', 'af', 'de', 'af', 'cy', 'de', 'de', 'af', 'de', 'de', 'en', 'cy', 'de', 'de', 'nl', 'nl', 'af', 'so', 'ca', 'fr', 'no', 'af', 'id', 'af', 'et', 'en', 'et', 'de', 'no', 'fi', 'de', 'tl', 'pl', 'so', 'nl', 'so', 'id', 'es', 'es', 'es', 'id', 'nl', 'id', 'en', 'en', 'lt', 'lt', 'lt', 'lt', 'lt', 'de', 'nl', 'sk', 'lt', 'en', 'lt', 'id', 'nl', 'id', 'id', 'id', 'cy', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'en', 'id', 'id', 'id', 'id', 'id', 'id', 'cy', 'de', 'tl', 'tl', 'en', 'tl', 'tl', 'tl', 'fr', 'lt', 'sl', 'so', 'ro', 'nl', 'en', 'so', 'af', 'tl', 'id', 'en', 'id', 'sv', 'da', 'nl', 'hu', 'sv', 'so', 'lt', 'nl', 'en', 'tl', 'nl', 'fr', 'da', 'cy', 'so', 'so', 'fr', 'et', 'it', 'cy', 'nl', 'af', 'lt', 'nl', 'de', 'lt', 'de', 'de', 'de', 'de', 'nl', 'de', 'sv', 'id', 'sv', 'nl', 'nl', 'de', 'tr', 'nl', 'nl', 'af', 'nl', 'id', 'nl', 'de', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'id', 'id', 'de', 'de', 'fr', 'de', 'fr', 'de', 'it', 'cy', 'sv', 'nl', 'lt', 'nl', 'af', 'en', 'de', 'nl', 'et', 'nl', 'lt', 'sv', 'de', 'de', 'nl', 'fr', 'vi', 'sq', 'id', 'pl', 'tl', 'cy', 'en', 'nl', 'tl', 'en', 'lt', 'it', 'af', 'af', 'af', 'de', 'de', 'sv', 'da', 'da', 'nl', 'nl', 'nl', 'da', 'af', 'nl', 'de', 'de', 'lt', 'lt', 'de', 'lt', 'sv', 'no', 'nl', 'hr', 'sq', 'fr', 'fr', 'fr', 'tr', 'ca', 'it', 'fr', 'en', 'vi', 'pl', 'de', 'sv', 'sv', 'sv', 'hr', 'vi', 'da', 'vi', 'da', 'cy', 'so', 'en', 'so', 'et', 'et', 'cy', 'af', 'da', 'so', 'so', 'nl', 'sv', 'nl', 'nl', 'de', 'nl', 'de', 'sv', 'nl', 'fi', 'da', 'fr', 'af', 'en', 'tl', 'pl', 'da', 'pt', 'de', 'so', 'id', 'en', 'it', 'so', 'id', 'fr', 'vi', 'de', 'en', 'cy', 'tl', 'es', 'nl', 'de', 'pl', 'id', 'id', 'af', 'en', 'de', 'pt', 'lt', 'lt', 'lt', 'fr', 'tl', 'it', 'lt', 'lt', 'lt', 'da', 'no', 'en', 'de', 'lt', 'da', 'lt', 'lt', 'it', 'lt', 'de', 'cy', 'ca', 'sw', 'sl', 'de', 'en', 'de', 'id', 'de', 'fr', 'lt', 'de', 'lt', 'lt', 'nl', 'pt', 'de', 'no', 'da', 'tl', 'tl', 'nl', 'so', 'fr', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'de', 'de', 'nl', 'nl', 'nl', 'sv', 'de', 'de', 'nl', 'sv', 'no', 'no', 'tr', 'de', 'nl', 'de', 'de', 'lt', 'sv', 'nl', 'nl', 'nl', 'lt', 'nl', 'sv', 'nl', 'lt', 'en', 'nl', 'no', 'ca', 'so', 'en', 'tl', 'tr', 'ro', 'nl', 'fr', 'cy', 'cy', 'so', 'de', 'de', 'sw', 'so', 'en', 'id', 'lt', 'so', 'vi', 'af', 'id', 'so', 'af', 'lt', 'sv', 'da', 'sv', 'no', 'lt', 'lt', 'sv', 'nl', 'sv', 'nl', 'nl', 'de', 'de', 'de', 'nl', 'sv', 'sv', 'de', 'sv', 'nl', 'nl', 'de', 'de', 'sv', 'nl', 'de', 'nl', 'nl', 'lt', 'de', 'de', 'de', 'sv', 'sv', 'sv', 'de', 'so', 'de', 'de', 'nl', 'nl', 'nl', 'nl', 'lt', 'sl', 'de', 'nl', 'nl', 'de', 'lt', 'sv', 'nl', 'sv', 'lt', 'lt', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'de', 'nl', 'af', 'de', 'nl', 'nl', 'da', 'nl', 'nl', 'sv', 'sv', 'nl', 'sv', 'sv', 'lt', 'nl', 'nl', 'sv', 'nl', 'sv', 'de', 'sl', 'lt', 'so', 'tl', 'tr', 'da', 'tl', 'af', 'de', 'nl', 'no', 'de', 'sw', 'en', 'tl', 'de', 'de', 'lt', 'de', 'de', 'lt', 'lt', 'de', 'lt', 'lt', 'lt', 'fr', 'de', 'nl', 'de', 'pl', 'af', 'nl', 'pt', 'so', 'cy', 'de', 'de', 'de', 'id', 'lt', 'de', 'pl', 'id', 'nl', 'lt', 'cy', 'cy', 'cy', 'cy', 'hr', 'cy', 'tr', 'ca', 'hr', 'nl', 'lt', 'sv', 'en', 'sk', 'de', 'de', 'lt', 'tr', 'no', 'nl', 'nl', 'en', 'pl', 'de', 'lt', 'sv', 'de', 'et', 'et', 'et', 'id', 'id', 'de', 'sw', 'lt', 'pl', 'lt', 'so', 'de', 'da', 'tl', 'da', 'af', 'nl', 'fr', 'fi', 'nl', 'af', 'nl', 'af', 'de', 'de', 'de', 'nl', 'nl', 'nl', 'sv', 'sv', 'sv', 'en', 'sv', 'nl', 'so', 'nl', 'nl', 'de', 'lt', 'it', 'nl', 'nl', 'de', 'nl', 'de', 'de', 'de', 'en', 'it', 'de', 'de', 'de', 'ro', 'so', 'id', 'lt', 'nl', 'de', 'pt', 'tl', 'pt', 'tl', 'so', 'en', 'tr', 'cy', 'sl', 'nl', 'nl', 'lt', 'de', 'fi', 'tr', 'nl', 'nl', 'de', 'id', 'en', 'nl', 'de', 'de', 'sl', 'sv', 'id', 'de', 'af', 'de', 'sv', 'af', 'de', 'en', 'id', 'sv', 'nl', 'de', 'sv', 'lt', 'nl', 'nl', 'nl', 'lt', 'sv', 'en', 'nl', 'en', 'de', 'lt', 'de', 'nl', 'nl', 'nl', 'nl', 'de', 'sv', 'sv', 'nl', 'de', 'lt', 'so', 'sv', 'af', 'lt', 'no', 'sv', 'de', 'sv', 'nl', 'pl', 'id', 'sv', 'id', 'pt', 'nl', 'da', 'nl', 'de', 'de', 'so', 'de', 'de', 'nl', 'lt', 'ro', 'sv', 'af', 'lt', 'af', 'no', 'da', 'de', 'de', 'nl', 'af', 'de', 'et', 'lt', 'de', 'de', 'et', 'de', 'de', 'tl', 'nl', 'de', 'nl', 'lt', 'sl', 'de', 'de', 'sv', 'af', 'de', 'cy', 'fr', 'da', 'de', 'ro', 'so', 'tl', 'lt', 'lt', 'sv', 'nl', 'nl', 'nl', 'sv', 'nl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'de', 'nl', 'pl', 'lt', 'de', 'et', 'de', 'it', 'de', 'de', 'sl', 'so', 'de', 'en', 'no', 'lt', 'nl', 'nl', 'sv', 'nl', 'ro', 'fr', 'en', 'en', 'no', 'lt', 'nl', 'nl', 'de', 'en', 'de', 'so', 'sw', 'da', 'de', 'it', 'de', 'en', 'ca', 'da', 'af', 'fi', 'nl', 'sv', 'nl', 'de', 'et', 'nl', 'de', 'af', 'tr', 'sv', 'sv', 'nl', 'ro', 'sv', 'sv', 'de', 'sv', 'sv', 'lt', 'en', 'lt', 'lt', 'nl', 'tl', 'fi', 'no', 'it', 'no', 'it', 'nl', 'it', 'sq', 'so', 'pt', 'et', 'af', 'sw', 'pl', 'af', 'fr', 'no', 'so', 'cy', 'sw', 'nl', 'en', 'so', 'en', 'so', 'so', 'so', 'de', 'nl', 'sw', 'vi', 'ro', 'no', 'af', 'cy', 'af', 'ca', 'so', 'ca', 'id', 'id', 'tr', 'da', 'nl', 'sw', 'ca', 'af', 'tr', 'tl', 'af', 'en', 'so', 'cy', 'nl', 'cy', 'nl', 'en', 'pt', 'nl', 'nl', 'sk', 'da', 'de', 'sv', 'af', 'sv', 'en', 'vi', 'sv', 'nl', 'nl', 'nl', 'sl', 'hr', 'sv', 'fr', 'ca', 'en', 'no', 'en', 'es', 'tr', 'fi', 'sw', 'af', 'af', 'sw', 'so', 'et', 'sv', 'id', 'so', 'id', 'et', 'id', 'tl', 'en', 'en', 'nl', 'de', 'de', 'af', 'sv', 'de', 'de', 'sw', 'id', 'id', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'de', 'es', 'fr', 'lt', 'en', 'lt', 'lt', 'et', 'et', 'no', 'fr', 'de', 'lt', 'id', 'da', 'de', 'nl', 'sw', 'it', 'da', 'nl', 'nl', 'de', 'sv', 'no', 'id', 'nl', 'nl', 'nl', 'de', 'nl', 'sv', 'nl', 'nl', 'tr', 'lt', 'lt', 'sv', 'fi', 'nl', 'lt', 'tr', 'sv', 'nl', 'pl', 'lt', 'lt', 'af', 'cy', 'lt', 'da', 'pt', 'da', 'da', 'de', 'da', 'nl', 'pt', 'so', 'en', 'sv', 'en', 'es', 'es', 'de', 'de', 'de', 'id', 'de', 'nl', 'de', 'de', 'id', 'so', 'so', 'nl', 'de', 'de', 'de', 'de', 'sv', 'nl', 'de', 'nl', 'de', 'tl', 'de', 'de', 'id', 'id', 'en', 'nl', 'en', 'sw', 'de', 'nl', 'nl', 'de', 'so', 'pl', 'de', 'nl', 'cy', 'sv', 'sw', 'de', 'af', 'nl', 'af', 'nl', 'en', 'af', 'ro', 'de', 'fr', 'id', 'id', 'nl', 'de', 'de', 'de', 'lt', 'lt', 'en', 'tr', 'sv', 'sv', 'en', 'ro', 'af', 'de', 'nl', 'de', 'nl', 'sv', 'nl', 'de', 'en', 'lt', 'sv', 'de', 'lt', 'so', 'lt', 'en', 'sv', 'lt', 'sv', 'en', 'nl', 'nl', 'id', 'lt', 'nl', 'lt', 'nl', 'fr', 'lt', 'sv', 'so', 'sv', 'sv', 'de', 'lt', 'af', 'de', 'id', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'nl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'lt', 'no', 'so', 'nl', 'de', 'de', 'nl', 'de', 'nl', 'sv', 'nl', 'sv', 'lt', 'lt', 'sv', 'sv', 'so', 'fr', 'en', 'hu', 'de', 'nl', 'so', 'de', 'tl', 'lt', 'af', 'de', 'da', 'nl', 'sl', 'de', 'en', 'nl', 'nl', 'fr', 'ro', 'ro', 'ro', 'nl', 'ca', 'cy', 'de', 'ca', 'de', 'nl', 'lt', 'de', 'nl', 'id', 'pl', 'nl', 'de', 'sv', 'fi', 'af', 'sv', 'af', 'pl', 'id', 'en', 'et', 'nl', 'de', 'sv', 'pl', 'ro', 'so', 'tl', 'sv', 'en', 'id', 'af', 'en', 'lt', 'nl', 'nl', 'af', 'cs', 'da', 'da', 'sv', 'da', 'pl', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'nl', 'de', 'de', 'de', 'de', 'de', 'de', 'lt', 'de', 'de', 'de', 'de', 'lt', 'de', 'de', 'nl', 'da', 'lt', 'de', 'id', 'de', 'nl', 'tl', 'da', 'nl', 'de', 'sq', 'it', 'id', 'fi', 'lt', 'fi', 'de', 'de', 'de', 'nl', 'sv', 'sv', 'nl', 'de', 'nl', 'sv', 'nl', 'sv', 'en', 'en', 'it', 'nl', 'de', 'et', 'tr', 'pl', 'sv', 'tl', 'no', 'so', 'en', 'nl', 'cy', 'lt', 'nl', 'af', 'sl', 'it', 'de', 'nl', 'en', 'lt', 'nl', 'de', 'de', 'sl', 'en', 'de', 'en', 'lt', 'nl', 'lt', 'lt', 'nl', 'nl', 'de', 'de', 'et', 'de', 'en', 'nl', 'lt', 'lt', 'lt', 'lt', 'ro', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'cy', 'so', 'sv', 'de', 'nl', 'nl', 'cy', 'de', 'so', 'tl', 'id', 'id', 'id', 'id', 'id', 'tl', 'id', 'id', 'de', 'fr', 'sv', 'en', 'no', 'it', 'no', 'de', 'fr', 'sl', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'de', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'en', 'lt', 'lt', 'de', 'de', 'so', 'de', 'vi', 'de', 'de', 'de', 'de', 'lt', 'nl', 'lt', 'lt', 'no', 'lt', 'et', 'cs', 'en', 'lt', 'de', 'lt', 'lt', 'de', 'de', 'no', 'lt', 'lt', 'lt', 'lt', 'lt', 'tl', 'af', 'tl', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'de', 'sv', 'nl', 'nl', 'sv', 'da', 'nl', 'sv', 'no', 'nl', 'da', 'nl', 'de', 'nl', 'nl', 'de', 'de', 'de', 'nl', 'sw', 'vi', 'de', 'de', 'de', 'de', 'af', 'de', 'ro', 'de', 'sw', 'cy', 'de', 'cy', 'so', 'so', 'so', 'id', 'cy', 'de', 'de', 'sw', 'de', 'so', 'so', 'tl', 'fi', 'cy', 'af', 'it', 'en', 'nl', 'so', 'so', 'nl', 'so', 'en', 'lt', 'en', 'cy', 'af', 'en', 'nl', 'de', 'af', 'lt', 'lt', 'sv', 'nl', 'nl', 'sv', 'lt', 'so', 'pl', 'af', 'nl', 'af', 'id', 'de', 'de', 'en', 'lt', 'de', 'lt', 'lt', 'de', 'tl', 'es', 'nl', 'lt', 'so', 'sv', 'so', 'so', 'tl', 'fi', 'so', 'id', 'af', 'sq', 'so', 'sv', 'af', 'sv', 'ca', 'sv', 'af', 'cy', 'en', 'so', 'no', 'tl', 'cy', 'tl', 'nl', 'fr', 'sv', 'nl', 'nl', 'cy', 'af', 'sv', 'af', 'so', 'da', 'af', 'vi', 'id', 'id', 'af', 'lt', 'nl', 'fi', 'sv', 'en', 'nl', 'sv', 'de', 'sv', 'sw', 'sv', 'ca', 'de', 'fr', 'de', 'de', 'de', 'da', 'tl', 'tl', 'de', 'tl', 'id', 'id', 'sk', 'en', 'en', 'et', 'fi', 'et', 'nl', 'nl', 'sv', 'de', 'de', 'de', 'sv', 'nl', 'id', 'lt', 'nl', 'lt', 'nl', 'nl', 'nl', 'de', 'nl', 'nl', 'de', 'de', 'lt', 'nl', 'nl', 'nl', 'de', 'lt', 'sv', 'sv', 'nl', 'lt', 'de', 'lt', 'lt', 'de', 'sv', 'sv', 'nl', 'so', 'nl', 'lt', 'de', 'lt', 'de', 'de', 'no', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'en', 'lt', 'lt', 'id', 'id', 'id', 'id', 'et', 'so', 'id', 'nl', 'id', 'sv', 'id', 'so', 'id', 'id', 'id', 'so', 'id', 'id', 'id', 'id', 'en', 'et', 'id', 'id', 'id', 'hr', 'de', 'so', 'sv', 'sv', 'de', 'tl', 'no', 'lt', 'sv', 'nl', 'sv', 'id', 'da', 'da', 'nl', 'sv', 'nl', 'nl', 'de', 'pt', 'pt', 'pt', 'pt', 'pt', 'sv', 'pt', 'es', 'pt', 'ca', 'fr', 'pt', 'pt', 'pt', 'lt', 'nl', 'tl', 'en', 'pl', 'en', 'lt', 'nl', 'sv', 'ro', 'lt', 'et', 'et', 'tl', 'lt', 'et', 'et', 'sw', 'de', 'sw', 'de', 'lt', 'fi', 'id', 'sw', 'id', 'id', 'tl', 'tl', 'af', 'en', 'so', 'pl', 'da', 'da', 'nl', 'af', 'en', 'id', 'de', 'sv', 'en', 'en', 'lt', 'sl', 'sv', 'en', 'lt', 'lt', 'de', 'pl', 'de', 'de', 'tl', 'af', 'so', 'pl', 'da', 'no', 'en', 'et', 'id', 'id', 'nl', 'de', 'de', 'de', 'nl', 'de', 'de', 'nl', 'nl', 'sv', 'nl', 'nl', 'nl', 'de', 'af', 'sv', 'sv', 'sv', 'nl', 'da', 'af', 'de', 'sv', 'nl', 'de', 'sv', 'nl', 'lt', 'sv', 'sv', 'de', 'nl', 'af', 'fr', 'id', 'en', 'cy', 'fr', 'af', 'no', 'so', 'es', 'tl', 'sk', 'af', 'cs', 'cy', 'cy', 'fi', 'nl', 'de', 'lt', 'de', 'et', 'de', 'de', 'af', 'de', 'af', 'de', 'af', 'id', 'so', 'sv', 'lt', 'af', 'vi', 'et', 'no', 'da', 'lt', 'so', 'it', 'it', 'lt', 'it', 'so', 'en', 'ca', 'id', 'de', 'lt', 'af', 'lt', 'it', 'en', 'fi', 'de', 'id', 'id', 'de', 'it', 'de', 'so', 'cy', 'da', 'no', 'vi', 'id', 'id', 'id', 'fi', 'sv', 'id', 'id', 'id', 'nl', 'nl', 'nl', 'nl', 'nl', 'sv', 'de', 'de', 'de', 'af', 'pt', 'tl', 'nl', 'en', 'de', 'tl', 'de', 'de', 'nl', 'de', 'da', 'de', 'sv', 'de', 'de', 'nl', 'en', 'sv', 'af', 'en', 'fr', 'id', 'id', 'id', 'id', 'id', 'id', 'et', 'et', 'et', 'et', 'et', 'et', 'et', 'et', 'et', 'sv', 'af', 'en', 'sv', 'sk', 'nl', 'no', 'no', 'so', 'af', 'lt', 'sv', 'hr', 'af', 'so', 'af', 'cy', 'it', 'da', 'cy', 'cy', 'tl', 'no', 'tl', 'tl', 'tl', 'tl', 'tl', 'nl', 'sv', 'so', 'nl', 'cy', 'lt', 'en', 'lt', 'sv', 'af', 'no', 'sv', 'af', 'fi', 'de', 'de', 'tl', 'tl', 'tl', 'en', 'de', 'fr', 'de', 'de', 'de', 'no', 'id', 'sw', 'so', 'ca', 'lt', 'id', 'sw', 'id', 'lt', 'en', 'de', 'id', 'id', 'nl', 'no', 'af', 'sw', 'de', 'so', 'de', 'ro', 'id', 'en', 'tl', 'hr', 'lt', 'de', 'de', 'de', 'de', 'nl', 'sv', 'nl', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'af', 'nl', 'de', 'de', 'de', 'de', 'de', 'de', 'nl', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'sv', 'de', 'nl', 'en', 'sv', 'de', 'nl', 'so', 'en', 'de', 'nl', 'sv', 'de', 'de', 'en', 'de', 'de', 'nl', 'de', 'de', 'de', 'de', 'de', 'fi', 'de', 'nl', 'so', 'so', 'de', 'de', 'de', 'de', 'en', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'lt', 'de', 'de', 'de', 'de', 'de', 'lt', 'de', 'en', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'fi', 'af', 'de', 'de', 'de', 'nl', 'nl', 'de', 'af', 'id', 'nl', 'sv', 'lt', 'nl', 'nl', 'en', 'nl', 'nl', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'de', 'en', 'nl', 'de', 'de', 'cy', 'so', 'nl', 'de', 'nl', 'en', 'sv', 'nl', 'nl', 'nl', 'nl', 'de', 'nl', 'lt', 'tl', 'nl', 'de', 'et', 'af', 'de', 'de', 'de', 'de', 'nl', 'de', 'de', 'nl', 'en', 'ro', 'de', 'nl', 'de', 'de', 'de', 'so', 'id', 'no', 'tr', 'tr', 'cy', 'et', 'pt', 'da', 'sw', 'so', 'sw', 'sq', 'lt', 'it', 'lt', 'sv', 'nl', 'af', 'nl', 'nl', 'da', 'et', 'id', 'en', 'de', 'sv', 'af', 'lt', 'de', 'nl', 'ro', 'fi', 'de', 'tl', 'nl', 'de', 'nl', 'sv', 'nl', 'sv', 'nl', 'ro', 'sv', 'nl', 'sv', 'so', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'nl', 'de', 'no', 'nl', 'lt', 'sv', 'de', 'sv', 'sv', 'nl', 'nl', 'en', 'nl', 'nl', 'nl', 'nl', 'af', 'nl', 'nl', 'nl', 'nl', 'sv', 'nl', 'nl', 'da', 'de', 'af', 'de', 'id', 'no', 'fi', 'lt', 'nl', 'es', 'nl', 'de', 'af', 'sv', 'en', 'de', 'sk', 'de', 'de', 'de', 'de', 'es', 'sv', 'de', 'fr', 'lt', 'no', 'en', 'de', 'lt', 'nl', 'af', 'en', 'en', 'af', 'de', 'lt', 'lt', 'nl', 'en', 'de', 'nl', 'de', 'sv', 'nl', 'af', 'de', 'en', 'nl', 'lt', 'nl', 'nl', 'de', 'de', 'et', 'et', 'et', 'af', 'lt', 'id', 'so', 'id', 'tl', 'so', 'id', 'id', 'id', 'id', 'tl', 'en', 'af', 'nl', 'so', 'de', 'de', 'de', 'da', 'et', 'et', 'de', 'sv', 'nl', 'lt', 'nl', 'id', 'so', 'da', 'pl', 'fr', 'tr', 'nl', 'lt', 'da', 'lt', 'de', 'nl', 'cy', 'nl', 'en', 'nl', 'no', 'ro', 'id', 'af', 'lt', 'nl', 'de', 'lt', 'so', 'de', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'en', 'tl', 'vi', 'fr', 'fi', 'it', 'en', 'de', 'fr', 'lt', 'lt', 'id', 'lt', 'lt', 'lt', 'so', 'de', 'lt', 'af', 'en', 'en', 'lt', 'lt', 'tl', 'af', 'da', 'de', 'nl', 'et', 'de', 'en', 'lt', 'sl', 'sl', 'sl', 'sl', 'sv', 'en', 'nl', 'sv', 'af', 'nl', 'nl', 'so', 'nl', 'en', 'nl', 'nl', 'so', 'nl', 'de', 'de', 'de', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'de', 'tl', 'so', 'so', 'tl', 'tl', 'tl', 'tl', 'so', 'et', 'id', 'tl', 'tl', 'tl', 'en', 'tl', 'tl', 'tl', 'en', 'tl', 'en', 'en', 'so', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'en', 'tl', 'tl', 'en', 'tl', 'tl', 'tl', 'tl', 'tl', 'en', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'en', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'nl', 'so', 'de', 'lt', 'de', 'fr', 'nl', 'id', 'de', 'nl', 'nl', 'pl', 'nl', 'so', 'en', 'id', 'id', 'id', 'id', 'id', 'de', 'de', 'ro', 'et', 'nl', 'da', 'no', 'nl', 'nl', 'fr', 'af', 'tl', 'nl', 'id', 'it', 'de', 'fi', 'de', 'en', 'en', 'sv', 'fi', 'fi', 'fi', 'af', 'de', 'fr', 'fr', 'de', 'de', 'sv', 'de', 'de', 'fr', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'af', 'de', 'en', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'nl', 'no', 'de', 'nl', 'en', 'af', 'nl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'de', 'af', 'sv', 'fr', 'sv', 'lt', 'de', 'de', 'de', 'id', 'id', 'de', 'sw', 'id', 'id', 'id', 'tl', 'nl', 'id', 'en', 'id', 'id', 'nl', 'nl', 'nl', 'de', 'de', 'da', 'da', 'nl', 'en', 'da', 'sv', 'no', 'it', 'nl', 'de', 'ro', 'fi', 'en', 'so', 'cs', 'sl', 'it', 'it', 'da', 'cy', 'tl', 'no', 'de', 'tl', 'so', 'et', 'tl', 'tl', 'tl', 'tl', 'so', 'tl', 'hr', 'tl', 'tl', 'it', 'tl', 'tl', 'tl', 'tl', 'tl', 'nl', 'de', 'af', 'sv', 'de', 'en', 'no', 'ca', 'en', 'en', 'da', 'de', 'so', 'af', 'no', 'tl', 'pt', 'cy', 'de', 'de', 'en', 'tl', 'sv', 'no', 'no', 'id', 'fi', 'de', 'nl', 'de', 'af', 'tl', 'da', 'sl', 'cy', 'vi', 'nl', 'es', 'es', 'sv', 'af', 'lt', 'nl', 'nl', 'nl', 'nl', 'nl', 'et', 'lt', 'nl', 'de', 'lt', 'en', 'it', 'sv', 'sv', 'lt', 'nl', 'vi', 'so', 'tr', 'lt', 'de', 'nl', 'de', 'de', 'nl', 'sv', 'nl', 'sv', 'de', 'no', 'lt', 'af', 'sv', 'lt', 'de', 'pl', 'nl', 'de', 'et', 'lt', 'nl', 'nl', 'nl', 'nl', 'nl', 'de', 'lt', 'sv', 'sv', 'nl', 'pl', 'nl', 'nl', 'nl', 'sv', 'nl', 'nl', 'nl', 'sv', 'sv', 'lt', 'sv', 'lt', 'de', 'sv', 'de', 'de', 'en', 'sv', 'lt', 'de', 'lt', 'de', 'nl', 'af', 'nl', 'sv', 'nl', 'lt', 'nl', 'nl', 'lt', 'sv', 'af', 'nl', 'en', 'nl', 'nl', 'lt', 'nl', 'nl', 'sv', 'sv', 'nl', 'nl', 'sv', 'de', 'sv', 'nl', 'sv', 'nl', 'sv', 'lt', 'fi', 'de', 'nl', 'sv', 'nl', 'nl', 'sv', 'nl', 'lt', 'nl', 'sv', 'nl', 'nl', 'nl', 'lt', 'nl', 'nl', 'ro', 'nl', 'nl', 'sv', 'nl', 'sv', 'sv', 'nl', 'nl', 'sv', 'nl', 'nl', 'nl', 'sv', 'sv', 'nl', 'de', 'lt', 'nl', 'de', 'nl', 'lt', 'nl', 'nl', 'nl', 'nl', 'nl', 'en', 'de', 'nl', 'nl', 'nl', 'lt', 'en', 'lt', 'lt', 'de', 'nl', 'nl', 'sv', 'sv', 'ro', 'lt', 'sv', 'sv', 'sv', 'de', 'de', 'lt', 'sv', 'de', 'nl', 'de', 'sv', 'nl', 'lt', 'nl', 'sv', 'en', 'lt', 'nl', 'af', 'nl', 'sv', 'sv', 'id', 'nl', 'lt', 'nl', 'de', 'af', 'nl', 'nl', 'nl', 'lt', 'lt', 'nl', 'nl', 'nl', 'sv', 'de', 'de', 'nl', 'lt', 'lt', 'nl', 'lt', 'de', 'en', 'de', 'nl', 'en', 'nl', 'nl', 'af', 'nl', 'sv', 'nl', 'nl', 'af', 'de', 'de', 'de', 'nl', 'nl', 'en', 'da', 'nl', 'nl', 'en', 'nl', 'nl', 'nl', 'nl', 'de', 'de', 'lt', 'nl', 'sv', 'nl', 'nl', 'sv', 'ro', 'lt', 'so', 'nl', 'nl', 'nl', 'en', 'en', 'nl', 'en', 'nl', 'af', 'lt', 'sv', 'ro', 'lt', 'nl', 'af', 'sv', 'nl', 'sv', 'nl', 'lt', 'nl', 'sv', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'id', 'id', 'id', 'id', 'id', 'id', 'so', 'lt', 'lt', 'so', 'no', 'en', 'lt', 'lt', 'nl', 'no', 'cy', 'nl', 'nl', 'so', 'de', 'nl', 'nl', 'lt', 'en', 'sv', 'sv', 'de', 'en', 'en', 'nl', 'nl', 'de', 'nl', 'nl', 'de', 'nl', 'nl', 'de', 'sv', 'so', 'de', 'nl', 'de', 'es', 'en', 'af', 'lt', 'de', 'so', 'lt', 'af', 'de', 'lt', 'ro', 'de', 'sv', 'nl', 'cy', 'de', 'fi', 'nl', 'nl', 'de', 'de', 'de', 'de', 'sv', 'nl', 'de', 'af', 'de', 'nl', 'et', 'de', 'es', 'nl', 'da', 'de', 'sw', 'lt', 'lt', 'af', 'fr', 'nl', 'so', 'lv', 'pt', 'da', 'et', 'lv', 'pt', 'lv', 'lv', 'lv', 'de', 'lt', 'en', 'id', 'id', 'id', 'id', 'no', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'nl', 'lt', 'de', 'no', 'de', 'lt', 'nl', 'de', 'sv', 'de', 'nl', 'sv', 'nl', 'nl', 'de', 'en', 'nl', 'de', 'de', 'de', 'af', 'sv', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'cy', 'hr', 'da', 'de', 'af', 'so', 'af', 'sk', 'ca', 'no', 'it', 'vi', 'pl', 'so', 'no', 'de', 'vi', 'so', 'id', 'id', 'no', 'so', 'da', 'nl', 'de', 'de', 'en', 'vi', 'it', 'vi', 'es', 'so', 'nl', 'tl', 'so', 'id', 'id', 'so', 'no', 'so', 'lt', 'no', 'nl', 'lt', 'id', 'id', 'nl', 'lt', 'id', 'id', 'vi', 'de', 'id', 'id', 'id', 'id', 'id', 'da', 'af', 'sv', 'sv', 'nl', 'lt', 'fr', 'sw', 'tl', 'id', 'id', 'tl', 'sv', 'de', 'sw', 'no', 'fi', 'af', 'nl', 'af', 'nl', 'sq', 'et', 'af', 'sv', 'nl', 'af', 'tl', 'it', 'lt', 'lt', 'fr', 'lt', 'lt', 'lt', 'lt', 'en', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'cy', 'so', 'lt', 'so', 'pl', 'de', 'nl', 'de', 'nl', 'lt', 'lt', 'lt', 'de', 'lt', 'lt', 'sl', 'nl', 'ro', 'de', 'nl', 'de', 'de', 'lt', 'en', 'sv', 'de', 'af', 'en', 'af', 'cy', 'tl', 'tl', 'tl', 'et', 'fr', 'fr', 'tl', 'af', 'da', 'so', 'lt', 'nl', 'sv', 'nl', 'sl', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'lt', 'tl', 'de', 'de', 'nl', 'sv', 'sv', 'id', 'af', 'fi', 'lt', 'af', 'en', 'af', 'de', 'de', 'fi', 'nl', 'de', 'nl', 'de', 'de', 'fi', 'sk', 'no', 'fr', 'sv', 'de', 'de', 'de', 'de', 'af', 'ro', 'hr', 'de', 'ro', 'lt', 'lt', 'et', 'sv', 'nl', 'de', 'af', 'de', 'lt', 'nl', 'id', 'et', 'lt', 'en', 'da', 'nl', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'en', 'en', 'de', 'de', 'de', 'de', 'vi', 'vi', 'de', 'vi', 'no', 'nl', 'de', 'sv', 'sl', 'so', 'lt', 'pt', 'pt', 'pt', 'pt', 'lt', 'ro', 'et', 'tr', 'nl', 'tl', 'nl', 'de', 'de', 'de', 'sv', 'af', 'sv', 'nl', 'nl', 'nl', 'sv', 'id', 'id', 'id', 'id', 'id', 'en', 'it', 'de', 'nl', 'nl', 'sl', 'en', 'lt', 'en', 'it', 'ca', 'tl', 'nl', 'so', 'de', 'en', 'nl', 'nl', 'de', 'en', 'nl', 'id', 'sv', 'fr', 'pt', 'lt', 'de', 'no', 'sl', 'et', 'de', 'af', 'no', 'en', 'lt', 'lt', 'af', 'pt', 'af', 'nl', 'it', 'tl', 'en', 'no', 'lt', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'de', 'de', 'sl', 'de', 'et', 'fr', 'hr', 'hr', 'sv', 'af', 'fr', 'id', 'hr', 'so', 'so', 'es', 'tr', 'pt', 'da', 'da', 'tr', 'en', 'so', 'tl', 'so', 'sk', 'tr', 'pt', 'so', 'af', 'es', 'af', 'af', 'ca', 'fr', 'cy', 'es', 'hr', 'cy', 'no', 'af', 'so', 'cy', 'af', 'af', 'it', 'cy', 'so', 'et', 'pt', 'en', 'so', 'pl', 'de', 'fr', 'it', 'en', 'so', 'id', 'cy', 'cy', 'vi', 'sl', 'cy', 'af', 'de', 'fr', 'so', 'so', 'pt', 'es', 'fr', 'sk', 'da', 'sv', 'fi', 'so', 'de', 'es', 'nl', 'ro', 'en', 'de', 'de', 'id', 'de', 'cs', 'tl', 'en', 'en', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'id', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'en', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'af', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'nl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'so', 'tl', 'tl', 'id', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'sw', 'sw', 'de', 'lt', 'en', 'de', 'nl', 'af', 'no', 'tl', 'it', 'fr', 'nl', 'es', 'fr', 'id', 'de', 'id', 'da', 'cs', 'en', 'tr', 'nl', 'fi', 'id', 'lt', 'nl', 'sv', 'so', 'sw', 'de', 'af', 'lt', 'af', 'so', 'da', 'fi', 'nl', 'so', 'en', 'en', 'et', 'id', 'nl', 'lt', 'so', 'de', 'en', 'it', 'it', 'fr', 'sv', 'sv', 'sv', 'fi', 'nl', 'lt', 'af', 'et', 'nl', 'sv', 'da', 'en', 'hu', 'tl', 'nl', 'nl', 'nl', 'de', 'en', 'lt', 'lt', 'lt', 'lt', 'de', 'en', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'de', 'nl', 'de', 'et', 'lt', 'lt', 'lt', 'lt', 'lt', 'de', 'de', 'de', 'de', 'nl', 'sv', 'lt', 'de', 'sv', 'sv', 'nl', 'sv', 'en', 'en', 'de', 'en', 'de', 'lt', 'de', 'de', 'de', 'nl', 'so', 'tl', 'tl', 'tl', 'tl', 'it', 'nl', 'lt', 'de', 'de', 'sv', 'sq', 'es', 'nl', 'sv', 'pl', 'tl', 'af', 'en', 'sv', 'lt', 'hu', 'de', 'lt', 'ro', 'lt', 'so', 'fr', 'sk', 'nl', 'nl', 'it', 'sv', 'et', 'et', 'et', 'et', 'et', 'et', 'et', 'et', 'et', 'et', 'et', 'et', 'et', 'et', 'et', 'et', 'et', 'et', 'et', 'et', 'et', 'et', 'et', 'sv', 'nl', 'sv', 'so', 'nl', 'so', 'pl', 'en', 'nl', 'tl', 'et', 'ro', 'nl', 'es', 'es', 'es', 'es', 'es', 'en', 'tl', 'tl', 'hu', 'da', 'lt', 'da', 'en', 'lt', 'et', 'fr', 'sv', 'de', 'fi', 'af', 'it', 'tl', 'ro', 'nl', 'af', 'so', 'en', 'it', 'af', 'so', 'ro', 'it', 'nl', 'fr', 'lt', 'so', 'nl', 'de', 'nl', 'tl', 'cy', 'pt', 'pt', 'de', 'lt', 'lt', 'lt', 'de', 'cy', 'sv', 'en', 'nl', 'de', 'en', 'nl', 'nl', 'lt', 'nl', 'af', 'nl', 'tr', 'sv', 'no', 'fr', 'de', 'de', 'lt', 'ro', 'id', 'lt', 'nl', 'lt', 'sv', 'lt', 'tl', 'de', 'so', 'et', 'de', 'fr', 'nl', 'so', 'nl', 'lt', 'de', 'en', 'no', 'it', 'no', 'nl', 'no', 'sv', 'de', 'de', 'tl', 'de', 'de', 'de', 'so', 'id', 'de', 'de', 'sw', 'sw', 'nl', 'nl', 'hr', 'af', 'hu', 'pl', 'pl', 'tr', 'de', 'it', 'id', 'so', 'id', 'hu', 'nl', 'nl', 'da', 'ro', 'tr', 'da', 'tr', 'hr', 'hr', 'hr', 'hr', 'tr', 'it', 'ca', 'it', 'so', 'it', 'de', 'pl', 'it', 'et', 'sv', 'de', 'en', 'de', 'de', 'lt', 'lt', 'so', 'cy', 'fi', 'en', 'fr', 'en', 'tl', 'pl', 'en', 'af', 'de', 'af', 'da', 'et', 'sv', 'en', 'es', 'fr', 'af', 'af', 'no', 'es', 'lt', 'af', 'fr', 'de', 'no', 'fr', 'so', 'nl', 'de', 'en', 'so', 'vi', 'es', 'nl', 'de', 'hu', 'de', 'pt', 'no', 'it', 'en', 'de', 'vi', 'de', 'tl', 'fr', 'tl', 'lt', 'de', 'lt', 'lt', 'sv', 'lt', 'tl', 'tl', 'tl', 'tl', 'en', 'tl', 'tl', 'ro', 'tl', 'es', 'et', 'nl', 'sl', 'sl', 'no', 'cy', 'en', 'da', 'pl', 'pl', 'so', 'so', 'sl', 'nl', 'nl', 'en', 'es', 'es', 'so', 'id', 'sv', 'ca', 'en', 'lt', 'sv', 'nl', 'nl', 'nl', 'sv', 'sv', 'de', 'nl', 'pt', 'af', 'nl', 'nl', 'it', 'lt', 'fi', 'de', 'nl', 'af', 'lt', 'sv', 'sv', 'tl', 'en', 'pl', 'fr', 'en', 'de', 'de', 'af', 'hr', 'sv', 'ro', 'cy', 'en', 'vi', 'cy', 'da', 'de', 'no', 'en', 'id', 'de', 'sk', 'fr', 'lt', 'nl', 'fi', 'nl', 'et', 'en', 'en', 'fr', 'tl', 'sl', 'tl', 'de', 'de', 'so', 'de', 'et', 'hr', 'en', 'sv', 'nl', 'en', 'de', 'id', 'id', 'id', 'nl', 'nl', 'ca', 'lt', 'sl', 'id', 'sw', 'sv', 'fi', 'fr', 'de', 'da', 'sk', 'nl', 'nl', 'da', 'no', 'sv', 'fi', 'de', 'pl', 'de', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'fi', 'da', 'no', 'nl', 'lt', 'no', 'et', 'sl', 'sl', 'sl', 'es', 'lt', 'en', 'sl', 'sv', 'da', 'cy', 'af', 'cy', 'tl', 'et', 'nl', 'es', 'en', 'nl', 'af', 'sw', 'lv', 'nl', 'de', 'tl', 'id', 'so', 'cy', 'cy', 'sv', 'it', 'da', 'pl', 'no', 'en', 'so', 'so', 'es', 'tl', 'nl', 'tl', 'fr', 'nl', 'tr', 'it', 'cy', 'no', 'so', 'no', 'tl', 'nl', 'it', 'fi', 'id', 'fr', 'fi', 'de', 'tr', 'af', 'da', 'da', 'cy', 'fr', 'en', 'sv', 'fr', 'af', 'af', 'et', 'af', 'en', 'it', 'sk', 'da', 'fr', 'cy', 'so', 'tl', 'tr', 'id', 'sv', 'en', 'sk', 'en', 'da', 'it', 'lt', 'nl', 'lt', 'de', 'nl', 'nl', 'en', 'es', 'cs', 'lt', 'no', 'id', 'nl', 'sl', 'tl', 'id', 'id', 'tl', 'tl', 'nl', 'fr', 'en', 'de', 'id', 'id', 'de', 'nl', 'de', 'so', 'sw', 'cy', 'lt', 'et', 'af', 'so', 'nl', 'cy', 'nl', 'af', 'pl', 'it', 'pt', 'tl', 'en', 'id', 'tr', 'de', 'so', 'tl', 'hr', 'id', 'af', 'no', 'sv', 'sw', 'nl', 'de', 'nl', 'lt', 'nl', 'de', 'en', 'de', 'tl', 'de', 'lt', 'id', 'en', 'de', 'de', 'cy', 'de', 'nl', 'lt', 'lt', 'lt', 'pl', 'lt', 'et', 'sv', 'sv', 'af', 'af', 'so', 'tl', 'fr', 'da', 'lt', 'lt', 'de', 'id', 'ro', 'af', 'de', 'sl', 'hr', 'de', 'nl', 'fr', 'nl', 'pt', 'nl', 'so', 'nl', 'et', 'lt', 'af', 'de', 'so', 'sv', 'de', 'nl', 'de', 'nl', 'de', 'id', 'nl', 'nl', 'en', 'id', 'id', 'id', 'de', 'nl', 'tl', 'de', 'de', 'so', 'tl', 'id', 'ro', 'de', 'tl', 'en', 'so', 'so', 'et', 'ca', 'et', 'en', 'et', 'nl', 'lt', 'de', 'fi', 'en', 'nl', 'lt', 'lt', 'af', 'de', 'af', 'nl', 'nl', 'sv', 'de', 'de', 'de', 'de', 'de', 'sv', 'nl', 'nl', 'da', 'de', 'nl', 'nl', 'de', 'en', 'af', 'en', 'de', 'nl', 'en', 'af', 'de', 'nl', 'nl', 'sv', 'en', 'pt', 'nl', 'id', 'it', 'sv', 'nl', 'en', 'it', 'en', 'nl', 'sv', 'nl', 'no', 'es', 'es', 'no', 'lt', 'nl', 'sv', 'de', 'en', 'pt', 'sw', 'nl', 'af', 'af', 'cy', 'de', 'de', 'so', 'et', 'de', 'de', 'sv', 'lt', 'en', 'sv', 'sv', 'so', 'pl', 'it', 'pt', 'nl', 'de', 'de', 'lt', 'lt', 'en', 'so', 'so', 'cy', 'id', 'so', 'id', 'id', 'af', 'id', 'et', 'de', 'nl', 'lt', 'nl', 'id', 'id', 'id', 'id', 'fi', 'lt', 'lt', 'lt', 'lt', 'lt', 'af', 'ca', 'pl', 'vi', 'es', 'lt', 'nl', 'de', 'ca', 'af', 'sv', 'de', 'sv', 'de', 'no', 'de', 'pt', 'et', 'et', 'de', 'nl', 'cy', 'cy', 'de', 'sv', 'cy', 'cy', 'no', 'tl', 'it', 'tl', 'af', 'pt', 'cy', 'sq', 'et', 'it', 'da', 'de', 'sv', 'lt', 'en', 'nl', 'nl', 'en', 'en', 'fr', 'nl', 'tl', 'no', 'sw', 'sw', 'lt', 'en', 'id', 'cs', 'lt', 'de', 'lt', 'de', 'nl', 'de', 'de', 'nl', 'en', 'nl', 'nl', 'lt', 'lt', 'en', 'nl', 'de', 'de', 'de', 'nl', 'de', 'en', 'de', 'nl', 'de', 'de', 'lt', 'lt', 'lt', 'lt', 'nl', 'de', 'nl', 'sv', 'no', 'id', 'so', 'so', 'fi', 'tr', 'cy', 'de', 'de', 'de', 'de', 'cy', 'fr', 'da', 'da', 'da', 'da', 'da', 'da', 'da', 'da', 'da', 'da', 'cy', 'nl', 'da', 'af', 'en', 'id', 'nl', 'de', 'nl', 'nl', 'sv', 'nl', 'sv', 'nl', 'de', 'sv', 'nl', 'nl', 'nl', 'id', 'en', 'tl', 'fr', 'de', 'nl', 'sv', 'ca', 'so', 'nl', 'sl', 'nl', 'lt', 'de', 'sk', 'tl', 'so', 'nl', 'de', 'nl', 'so', 'nl', 'lt', 'nl', 'nl', 'nl', 'de', 'de', 'nl', 'de', 'en', 'sv', 'de', 'ca', 'so', 'vi', 'id', 'pt', 'nl', 'fi', 'en', 'da', 'de', 'nl', 'id', 'id', 'id', 'de', 'tl', 'lt', 'id', 'so', 'nl', 'da', 'en', 'tl', 'et', 'de', 'en', 'cy', 'hr', 'cy', 'en', 'so', 'es', 'fr', 'es', 'cy', 'so', 'so', 'da', 'tl', 'pt', 'fr', 'pl', 'cy', 'cy', 'it', 'id', 'vi', 'en', 'so', 'es', 'en', 'af', 'id', 'sq', 'so', 'cy', 'nl', 'nl', 'so', 'fr', 'fi', 'so', 'af', 'cy', 'nl', 'et', 'af', 'de', 'sw', 'no', 'af', 'sv', 'fi', 'de', 'de', 'nl', 'cs', 'en', 'sl', 'en', 'lt', 'af', 'nl', 'de', 'nl', 'en', 'id', 'nl', 'nl', 'nl', 'de', 'nl', 'en', 'tl', 'tl', 'so', 'id', 'id', 'sw', 'id', 'de', 'en', 'nl', 'it', 'tl', 'fi', 'de', 'de', 'de', 'so', 'tl', 'de', 'de', 'de', 'so', 'de', 'vi', 'so', 'vi', 'vi', 'tr', 'de', 'nl', 'de', 'pt', 'pt', 'pt', 'fr', 'et', 'it', 'so', 'so', 'vi', 'pt', 'de', 'nl', 'nl', 'pt', 'de', 'sv', 'de', 'nl', 'et', 'de', 'pl', 'nl', 'lt', 'nl', 'de', 'nl', 'sv', 'de', 'nl', 'fi', 'lt', 'da', 'lt', 'da', 'lt', 'de', 'tl', 'so', 'tl', 'de', 'tl', 'lt', 'sv', 'sk', 'sv', 'sk', 'lt', 'nl', 'et', 'af', 'lt', 'cy', 'sl', 'sq', 'sq', 'sq', 'cy', 'cy', 'cy', 'cy', 'so', 'so', 'lv', 'so', 'pt', 'da', 'so', 'da', 'pt', 'so', 'pt', 'da', 'da', 'cy', 'sv', 'da', 'da', 'da', 'fi', 'sl', 'sq', 'sq', 'nl', 'af', 'so', 'da', 'sv', 'cy', 'no', 'cy', 'cs', 'cs', 'da', 'lt', 'pl', 'sk', 'de', 'da', 'sv', 'sk', 'da', 'af', 'af', 'pl', 'sv', 'sv', 'nl', 'nl', 'nl', 'nl', 'de', 'de', 'lt', 'id', 'lt', 'fr', 'de', 'sv', 'de', 'de', 'lt', 'nl', 'af', 'af', 'so', 'cy', 'nl', 'de', 'en', 'tl', 'so', 'de', 'it', 'cy', 'es', 'sl', 'id', 'id', 'so', 'de', 'lt', 'af', 'ca', 'de', 'id', 'et', 'nl', 'fr', 'tl', 'lt', 'de', 'lt', 'no', 'pt', 'et', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'tl', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'de', 'pl', 'lt', 'nl', 'en', 'de', 'tl', 'tl', 'tl', 'tl', 'nl', 'fr', 'da', 'en', 'nl', 'de', 'de', 'da', 'so', 'sv', 'no', 'sv', 'tl', 'sw', 'en', 'it', 'en', 'it', 'sw', 'vi', 'sq', 'sv', 'no', 'no', 'af', 'so', 'it', 'so', 'tl', 'cy', 'cy', 'nl', 'tr', 'cy', 'cy', 'da', 'fr', 'so', 'cy', 'lv', 'et', 'sl', 'da', 'so', 'so', 'so', 'fr', 'cy', 'no', 'es', 'id', 'lt', 'da', 'de', 'de', 'de', 'de', 'nl', 'nl', 'de', 'de', 'af', 'af', 'de', 'de', 'nl', 'nl', 'de', 'so', 'id', 'nl', 'nl', 'nl', 'lt', 'de', 'so', 'lt', 'de', 'lt', 'de', 'lt', 'de', 'pl', 'lt', 'sv', 'lt', 'nl', 'sv', 'sv', 'no', 'id', 'cy', 'af', 'en', 'en', 'et', 'pl', 'sv', 'pl', 'sv', 'no', 'sv', 'lt', 'nl', 'tl', 'sv', 'lt', 'en', 'lt', 'de', 'sv', 'nl', 'da', 'id', 'nl', 'de', 'de', 'de', 'nl', 'vi', 'id', 'id', 'id', 'sl', 'nl', 'sv', 'en', 'nl', 'af', 'tl', 'de', 'de', 'nl', 'af', 'et', 'no', 'no', 'hr', 'sv', 'sv', 'nl', 'nl', 'pl', 'en', 'nl', 'de', 'de', 'en', 'de', 'cy', 'id', 'id', 'nl', 'lt', 'da', 'et', 'no', 'ro', 'sv', 'nl', 'nl', 'nl', 'af', 'de', 'de', 'nl', 'id', 'ca', 'sv', 'sl', 'de', 'en', 'so', 'sw', 'da', 'et', 'es', 'pt', 'da', 'so', 'cy', 'tl', 'so', 'tl', 'so', 'so', 'pl', 'no', 'sw', 'de', 'lt', 'lt', 'lt', 'lt', 'nl', 'en', 'nl', 'vi', 'et', 'nl', 'no', 'lt', 'cy', 'nl', 'af', 'sw', 'de', 'so', 'tr', 'so', 'lt', 'sv', 'so', 'nl', 'lt', 'de', 'lt', 'lt', 'de', 'de', 'so', 'so', 'af', 'tl', 'no', 'de', 'hr', 'de', 'so', 'so', 'nl', 'lt', 'nl', 'nl', 'so', 'it', 'sw', 'et', 'da', 'sv', 'de', 'lt', 'nl', 'id', 'de', 'vi', 'pl', 'fr', 'af', 'de', 'de', 'de', 'de', 'de', 'lt', 'en', 'da', 'so', 'tl', 'tl', 'sv', 'cy', 'so', 'lt', 'lt', 'nl', 'sv', 'lt', 'no', 'sv', 'sv', 'en', 'lt', 'de', 'de', 'af', 'sv', 'hr', 'de', 'de', 'af', 'tl', 'id', 'nl', 'af', 'lt', 'lt', 'de', 'lt', 'lt', 'cy', 'de', 'hr', 'id', 'id', 'id', 'de', 'nl', 'lt', 'sv', 'af', 'de', 'nl', 'sk', 'sv', 'en', 'it', 'lt', 'sv', 'it', 'sv', 'sv', 'en', 'nl', 'no', 'nl', 'it', 'tl', 'tl', 'tl', 'tl', 'tl', 'es', 'so', 'nl', 'tl', 'de', 'lt', 'lt', 'lt', 'en', 'et', 'de', 'de', 'sl', 'pt', 'en', 'vi', 'cy', 'cy', 'cy', 'nl', 'sw', 'lt', 'en', 'nl', 'lt', 'tr', 'tr', 'tr', 'tr', 'tr', 'id', 'tr', 'de', 'so', 'sv', 'no', 'sv', 'sv', 'sv', 'sv', 'tl', 'sv', 'id', 'pl', 'fr', 'cy', 'sv', 'af', 'de', 'de', 'it', 'de', 'af', 'de', 'so', 'it', 'de', 'en', 'nl', 'so', 'de', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'de', 'no', 'de', 'nl', 'lt', 'de', 'nl', 'et', 'nl', 'nl', 'fi', 'en', 'sv', 'de', 'de', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'da', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'et', 'no', 'so', 'fr', 'sv', 'lt', 'lt', 'de', 'nl', 'it', 'id', 'ca', 'de', 'fr', 'af', 'de', 'de', 'nl', 'sv', 'sv', 'nl', 'en', 'fi', 'en', 'de', 'da', 'sv', 'sv', 'sv', 'sv', 'id', 'da', 'sv', 'sv', 'sv', 'sv', 'sv', 'sv', 'sv', 'sv', 'sv', 'sv', 'sv', 'sv', 'sw', 'ro', 'pt', 'pt', 'id', 'tl', 'pt', 'pt', 'pt', 'lt', 'pt', 'ro', 'it', 'it', 'it', 'es', 'ca', 'pt', 'pt', 'sv', 'ro', 'pt', 'ro', 'es', 'it', 'it', 'ro', 'fr', 'so', 'tl', 'no', 'no', 'de', 'pt', 'pt', 'de', 'en', 'da', 'nl', 'en', 'no', 'nl', 'de', 'es', 'lt', 'it', 'no', 'en', 'fr', 'ro', 'en', 'tl', 'da', 'tl', 'af', 'af', 'lt', 'nl', 'no', 'id', 'en', 'et', 'af', 'de', 'so', 'sq', 'de', 'da', 'af', 'et', 'vi', 'ca', 'nl', 'de', 'af', 'fi', 'sv', 'no', 'af', 'no', 'en', 'hu', 'no', 'es', 'fr', 'nl', 'de', 'lt', 'de', 'nl', 'nl', 'sv', 'id', 'id', 'af', 'lt', 'de', 'so', 'id', 'so', 'af', 'de', 'lt', 'de', 'ro', 'lt', 'id', 'id', 'lt', 'vi', 'tl', 'id', 'id', 'de', 'id', 'de', 'de', 'it', 'id', 'id', 'id', 'tl', 'pl', 'id', 'id', 'hr', 'id', 'id', 'id', 'sv', 'en', 'nl', 'de', 'it', 'nl', 'en', 'de', 'hu', 'so', 'nl', 'en', 'so', 'lt', 'af', 'ro', 'de', 'fr', 'de', 'nl', 'nl', 'de', 'de', 'de', 'de', 'nl', 'de', 'de', 'lt', 'sv', 'tl', 'tl', 'tl', 'tl', 'tl', 'cy', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'id', 'fi', 'et', 'no', 'fi', 'de', 'af', 'tl', 'vi', 'de', 'nl', 'pt', 'sk', 'et', 'tl', 'ro', 'it', 'sl', 'af', 'af', 'fi', 'sv', 'ro', 'nl', 'af', 'lt', 'nl', 'lt', 'lt', 'lt', 'sv', 'nl', 'sl', 'so', 'id', 'ro', 'nl', 'de', 'nl', 'es', 'cy', 'lt', 'et', 'lt', 'pl', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'id', 'pt', 'tl', 'id', 'fr', 'sl', 'pt', 'lv', 'pt', 'so', 'so', 'et', 'sv', 'vi', 'en', 'sv', 'id', 'fi', 'hr', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'nl', 'en', 'so', 'sv', 'de', 'so', 'de', 'id', 'fr', 'tl', 'cs', 'pl', 'nl', 'et', 'no', 'nl', 'tl', 'cy', 'fr', 'nl', 'et', 'de', 'af', 'af', 'en', 'tl', 'da', 'tr', 'lt', 'sw', 'sw', 'sw', 'lt', 'lt', 'sv', 'lt', 'nl', 'lt', 'lt', 'id', 'af', 'sv', 'lt', 'nl', 'tl', 'nl', 'de', 'de', 'sv', 'lt', 'de', 'af', 'de', 'nl', 'de', 'de', 'pl', 'sv', 'sq', 'sv', 'sl', 'de', 'fi', 'lt', 'tl', 'sk', 'sl', 'fi', 'sv', 'so', 'de', 'nl', 'id', 'da', 'lt', 'so', 'de', 'nl', 'nl', 'nl', 'de', 'nl', 'nl', 'de', 'af', 'lt', 'et', 'nl', 'sv', 'so', 'lt', 'sl', 'tl', 'et', 'lt', 'ro', 'de', 'de', 'af', 'sv', 'de', 'lt', 'af', 'fr', 'da', 'nl', 'et', 'af', 'nl', 'de', 'tr', 'nl', 'ro', 'id', 'af', 'nl', 'de', 'en', 'da', 'so', 'sv', 'nl', 'no', 'lt', 'no', 'en', 'nl', 'af', 'af', 'de', 'et', 'de', 'nl', 'de', 'id', 'fi', 'et', 'nl', 'en', 'nl', 'lt', 'es', 'da', 'lt', 'de', 'en', 'id', 'cy', 'no', 'it', 'de', 'de', 'nl', 'fr', 'en', 'de', 'sl', 'lt', 'lt', 'nl', 'lt', 'da', 'nl', 'nl', 'sv', 'no', 'sk', 'fr', 'so', 'so', 'so', 'lt', 'cy', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'nl', 'nl', 'nl', 'af', 'af', 'nl', 'es', 'sv', 'fr', 'af', 'no', 'fr', 'af', 'so', 'so', 'no', 'so', 'fr', 'so', 'it', 'sv', 'es', 'sv', 'pt', 'pt', 'ro', 'de', 'sv', 'af', 'es', 'nl', 'ro', 'sv', 'id', 'sv', 'nl', 'nl', 'sv', 'sv', 'nl', 'de', 'sv', 'sv', 'en', 'sv', 'de', 'sv', 'sv', 'sv', 'sv', 'nl', 'sv', 'fi', 'et', 'af', 'da', 'sl', 'sv', 'nl', 'so', 'no', 'sl', 'pl', 'af', 'tl', 'de', 'so', 'fr', 'so', 'da', 'fi', 'et', 'de', 'de', 'nl', 'de', 'lt', 'en', 'en', 'lt', 'en', 'lt', 'tr', 'de', 'da', 'de', 'de', 'fr', 'it', 'ro', 'nl', 'sw', 'vi', 'hr', 'tl', 'en', 'tl', 'lt', 'lt', 'lt', 'nl', 'lt', 'et', 'sv', 'sv', 'en', 'so', 'nl', 'lt', 'nl', 'nl', 'so', 'sv', 'sl', 'nl', 'pl', 'sv', 'so', 'so', 'id', 'nl', 'lt', 'lt', 'sv', 'sv', 'en', 'sl', 'af', 'da', 'lt', 'lt', 'nl', 'de', 'cy', 'en', 'so', 'de', 'es', 'tl', 'tl', 'tl', 'en', 'de', 'tl', 'tl', 'sv', 'lt', 'lt', 'lt', 'no', 'it', 'nl', 'ro', 'it', 'so', 'id', 'tl', 'nl', 'nl', 'sv', 'af', 'nl', 'nl', 'lt', 'lt', 'lt', 'lt', 'so', 'en', 'et', 'so', 'so', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'it', 'it', 'it', 'it', 'lt', 'lt', 'lt', 'lt', 'lt', 'so', 'tl', 'et', 'tl', 'so', 'nl', 'no', 'no', 'da', 'tl', 'nl', 'de', 'es', 'vi', 'fi', 'so', 'tr', 'ro', 'tl', 'cy', 'tl', 'sl', 'cy', 'nl', 'af', 'so', 'sv', 'nl', 'af', 'de', 'nl', 'nl', 'id', 'lt', 'no', 'id', 'sv', 'nl', 'et', 'sv', 'en', 'lt', 'id', 'af', 'de', 'nl', 'sv', 'sv', 'af', 'nl', 'en', 'de', 'nl', 'ca', 'nl', 'en', 'af', 'de', 'pt', 'tr', 'ro', 'nl', 'da', 'no', 'cy', 'sq', 'sl', 'af', 'pt', 'es', 'id', 'it', 'no', 'fr', 'cy', 'tl', 'it', 'ca', 'af', 'fi', 'en', 'no', 'so', 'lt', 'de', 'af', 'da', 'sv', 'et', 'af', 'nl', 'nl', 'pt', 'fr', 'de', 'de', 'af', 'af', 'af', 'af', 'nl', 'en', 'et', 'de', 'de', 'de', 'sv', 'de', 'de', 'ro', 'ro', 'nl', 'fi', 'nl', 'en', 'en', 'nl', 'no', 'no', 'hu', 'nl', 'nl', 'en', 'da', 'da', 'ro', 'af', 'tr', 'de', 'nl', 'tl', 'tl', 'tl', 'tl', 'sw', 'cs', 'af', 'id', 'sv', 'lt', 'de', 'et', 'nl', 'cs', 'cy', 'en', 'de', 'lt', 'lt', 'lt', 'de', 'de', 'no', 'de', 'de', 'lt', 'de', 'de', 'pl', 'pl', 'pl', 'pl', 'pl', 'pl', 'pl', 'pl', 'pl', 'pl', 'pl', 'pl', 'pl', 'en', 'pl', 'pl', 'pl', 'pl', 'pl', 'pl', 'nl', 'nl', 'tl', 'fr', 'tl', 'tl', 'tl', 'de', 'so', 'so', 'de', 'nl', 'nl', 'sv', 'sv', 'tl', 'tl', 'da', 'nl', 'sv', 'sv', 'en', 'nl', 'de', 'en', 'af', 'de', 'et', 'no', 'nl', 'af', 'nl', 'sk', 'ro', 'sl', 'sv', 'sv', 'af', 'fr', 'lt', 'nl', 'de', 'de', 'sv', 'de', 'lt', 'de', 'nl', 'sv', 'lt', 'lt', 'de', 'id', 'nl', 'nl', 'en', 'id', 'id', 'id', 'id', 'id', 'id', 'de', 'fr', 'nl', 'nl', 'so', 'de', 'de', 'en', 'cy', 'nl', 'nl', 'de', 'nl', 'de', 'sv', 'nl', 'af', 'af', 'id', 'lt', 'en', 'es', 'so', 'sv', 'tr', 'pl', 'sw', 'hu', 'af', 'ca', 'vi', 'de', 'af', 'af', 'cy', 'tl', 'ca', 'fr', 'fi', 'af', 'no', 'de', 'af', 'sw', 'vi', 'da', 'so', 'no', 'it', 'no', 'nl', 'nl', 'ca', 'nl', 'af', 'cy', 'en', 'it', 'sw', 'af', 'en', 'tr', 'nl', 'en', 'pl', 'so', 'no', 'so', 'no', 'sw', 'so', 'cy', 'no', 'af', 'sv', 'sv', 'cy', 'pl', 'it', 'pl', 'so', 'fr', 'af', 'hr', 'de', 'cy', 'no', 'tl', 'pl', 'vi', 'no', 'nl', 'ro', 'no', 'af', 'en', 'fr', 'sv', 'nl', 'pl', 'fr', 'af', 'da', 'sl', 'pt', 'en', 'cy', 'id', 'de', 'so', 'cy', 'nl', 'tl', 'tl', 'lt', 'nl', 'fr', 'it', 'fi', 'tl', 'id', 'nl', 'af', 'so', 'af', 'lt', 'hu', 'lt', 'da', 'tl', 'no', 'sl', 'no', 'de', 'nl', 'pl', 'vi', 'en', 'sv', 'fi', 'no', 'fr', 'sk', 'sk', 'af', 'it', 'cy', 'cs', 'af', 'da', 'hr', 'cy', 'cy', 'no', 'so', 'af', 'sv', 'sw', 'de', 'af', 'no', 'af', 'da', 'so', 'af', 'tr', 'no', 'en', 'no', 'it', 'nl', 'sw', 'da', 'so', 'tr', 'cy', 'da', 'tr', 'nl', 'cy', 'af', 'so', 'nl', 'en', 'no', 'id', 'hr', 'so', 'ca', 'hr', 'hr', 'en', 'af', 'so', 'sq', 'vi', 'cy', 'fr', 'nl', 'af', 'tr', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'en', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'nl', 'so', 'de', 'de', 'id', 'id', 'id', 'id', 'id', 'id', 'et', 'af', 'de', 'lt', 'lt', 'id', 'lt', 'lt', 'no', 'lt', 'sw', 'tl', 'ca', 'nl', 'hr', 'fr', 'tl', 'vi', 'so', 'fr', 'de', 'et', 'de', 'nl', 'lt', 'tl', 'tl', 'id', 'id', 'de', 'id', 'id', 'de', 'id', 'id', 'id', 'pl', 'de', 'de', 'vi', 'so', 'de', 'sl', 'so', 'pl', 'tr', 'de', 'cs', 'de', 'id', 'es', 'it', 'fr', 'vi', 'vi', 'so', 'no', 'nl', 'sv', 'tl', 'tl', 'tl', 'tl', 'tl', 'de', 'sv', 'da', 'de', 'sv', 'af', 'af', 'de', 'id', 'so', 'af', 'de', 'tl', 'id', 'tl', 'lt', 'fi', 'lt', 'fi', 'nl', 'de', 'nl', 'cy', 'lt', 'sv', 'nl', 'lt', 'sv', 'lt', 'de', 'sv', 'de', 'so', 'sv', 'nl', 'de', 'so', 'lt', 'lt', 'sv', 'lt', 'nl', 'de', 'sv', 'de', 'nl', 'nl', 'nl', 'sv', 'lt', 'nl', 'nl', 'de', 'af', 'de', 'de', 'tl', 'nl', 'nl', 'nl', 'nl', 'no', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'so', 'so', 'id', 'so', 'et', 'es', 'af', 'nl', 'lt', 'nl', 'sv', 'sv', 'sv', 'nl', 'de', 'fr', 'de', 'fr', 'de', 'de', 'fr', 'sv', 'nl', 'de', 'de', 'fr', 'sv', 'en', 'lt', 'af', 'sv', 'it', 'id', 'vi', 'sv', 'sv', 'ro', 'pl', 'en', 'nl', 'de', 'nl', 'nl', 'af', 'sv', 'nl', 'de', 'de', 'sq', 'af', 'pt', 'no', 'da', 'de', 'da', 'nl', 'cy', 'so', 'cy', 'sv', 'nl', 'es', 'es', 'de', 'de', 'af', 'de', 'af', 'no', 'da', 'da', 'da', 'no', 'da', 'da', 'cs', 'de', 'sv', 'sv', 'nl', 'de', 'nl', 'sv', 'lt', 'so', 'af', 'de', 'de', 'en', 'so', 'fr', 'so', 'vi', 'tl', 'lt', 'sv', 'de', 'lt', 'lt', 'da', 'lt', 'af', 'af', 'et', 'so', 'af', 'id', 'de', 'de', 'nl', 'no', 'nl', 'tl', 'fr', 'de', 'af', 'no', 'lt', 'de', 'nl', 'da', 'nl', 'no', 'fr', 'de', 'id', 'af', 'de', 'id', 'tl', 'lt', 'id', 'fr', 'id', 'lt', 'nl', 'id', 'so', 'nl', 'so', 'et', 'nl', 'so', 'de', 'nl', 'hr', 'nl', 'lt', 'sv', 'af', 'tl', 'so', 'en', 'da', 'af', 'nl', 'de', 'nl', 'da', 'fi', 'nl', 'pl', 'en', 'af', 'vi', 'tl', 'es', 'no', 'so', 'vi', 'et', 'fr', 'de', 'de', 'so', 'so', 'sv', 'no', 'nl', 'so', 'lt', 'lt', 'id', 'de', 'so', 'cy', 'sw', 'de', 'nl', 'nl', 'sv', 'nl', 'de', 'sv', 'en', 'de', 'de', 'nl', 'nl', 'lt', 'lt', 'en', 'sv', 'id', 'de', 'sv', 'no', 'af', 'de', 'pt', 'de', 'de', 'de', 'lt', 'lt', 'ro', 'sv', 'id', 'nl', 'de', 'pt', 'fr', 'es', 'id', 'nl', 'cy', 'en', 'ca', 'de', 'sv', 'nl', 'nl', 'en', 'so', 'sv', 'cy', 'sv', 'lt', 'so', 'de', 'de', 'sv', 'id', 'de', 'de', 'no', 'sv', 'en', 'sv', 'de', 'et', 'tl', 'de', 'de', 'sv', 'lt', 'lt', 'id', 'nl', 'lt', 'so', 'sl', 'vi', 'id', 'lt', 'nl', 'no', 'sv', 'no', 'so', 'en', 'et', 'lv', 'ca', 'et', 'no', 'nl', 'de', 'lt', 'de', 'nl', 'tl', 'sv', 'nl', 'no', 'nl', 'sl', 'nl', 'de', 'da', 'nl', 'sv', 'nl', 'af', 'en', 'de', 'de', 'fr', 'id', 'id', 'nl', 'lt', 'lt', 'af', 'de', 'sv', 'en', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'nl', 'nl', 'sv', 'de', 'it', 'de', 'en', 'de', 'nl', 'nl', 'en', 'nl', 'sv', 'de', 'de', 'nl', 'nl', 'nl', 'nl', 'de', 'sv', 'nl', 'id', 'nl', 'de', 'fi', 'de', 'nl', 'nl', 'lt', 'de', 'de', 'de', 'de', 'lt', 'sv', 'de', 'id', 'lt', 'lt', 'lt', 'da', 'lt', 'pl', 'sv', 'nl', 'lt', 'lt', 'fr', 'af', 'tl', 'tl', 'sv', 'nl', 'lt', 'de', 'id', 'lt', 'pl', 'de', 'sv', 'nl', 'et', 'en', 'de', 'nl', 'nl', 'it', 'en', 'de', 'en', 'nl', 'de', 'id', 'af', 'so', 'lt', 'sv', 'pl', 'de', 'sv', 'nl', 'sv', 'en', 'nl', 'sv', 'nl', 'so', 'so', 'sv', 'sv', 'nl', 'nl', 'id', 'id', 'da', 'de', 'so', 'af', 'sv', 'sv', 'ro', 'lt', 'no', 'af', 'fr', 'nl', 'af', 'it', 'it', 'nl', 'ca', 'lt', 'lt', 'en', 'sv', 'en', 'sv', 'tr', 'af', 'nl', 'id', 'id', 'id', 'id', 'lt', 'nl', 'de', 'sv', 'es', 'es', 'af', 'ca', 'en', 'tl', 'id', 'lt', 'lt', 'lt', 'sv', 'de', 'sv', 'sv', 'sv', 'de', 'de', 'nl', 'de', 'de', 'ro', 'de', 'en', 'nl', 'de', 'id', 'sw', 'af', 'de', 'nl', 'af', 'de', 'no', 'no', 'ro', 'en', 'lt', 'da', 'lt', 'af', 'de', 'nl', 'de', 'af', 'de', 'de', 'nl', 'de', 'lt', 'id', 'af', 'de', 'en', 'sv', 'en', 'af', 'de', 'en', 'de', 'de', 'nl', 'sv', 'de', 'nl', 'sv', 'de', 'et', 'nl', 'id', 'id', 'id', 'de', 'sv', 'nl', 'de', 'de', 'de', 'lt', 'so', 'de', 'da', 'tl', 'nl', 'et', 'lt', 'da', 'cy', 'en', 'sv', 'sv', 'so', 'tl', 'tl', 'nl', 'sv', 'nl', 'lt', 'da', 'tl', 'id', 'de', 'da', 'nl', 'en', 'it', 'lt', 'en', 'af', 'de', 'id', 'id', 'so', 'sq', 'de', 'no', 'nl', 'hr', 'lt', 'de', 'sv', 'no', 'tl', 'pt', 'so', 'sl', 'de', 'af', 'nl', 'lt', 'lt', 'af', 'lt', 'cy', 'da', 'lt', 'id', 'sv', 'nl', 'sv', 'nl', 'lt', 'de', 'it', 'nl', 'da', 'pt', 'de', 'af', 'cs', 'af', 'fi', 'no', 'cy', 'it', 'it', 'ca', 'lt', 'af', 'nl', 'lt', 'en', 'tl', 'tl', 'tl', 'fi', 'nl', 'nl', 'nl', 'nl', 'sv', 'de', 'tl', 'de', 'cy', 'hr', 'de', 'lt', 'tr', 'en', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'de', 'nl', 'en', 'sv', 'sv', 'id', 'id', 'sw', 'id', 'id', 'tl', 'id', 'sw', 'id', 'id', 'sv', 'lt', 'tl', 'so', 'tl', 'lt', 'en', 'lt', 'lt', 'lt', 'lt', 'lt', 'cy', 'sl', 'tl', 'en', 'af', 'pt', 'so', 'ca', 'tl', 'tl', 'nl', 'fr', 'af', 'de', 'so', 'it', 'so', 'en', 'en', 'so', 'hu', 'de', 'fr', 'sw', 'cy', 'id', 'cy', 'en', 'tl', 'cy', 'so', 'de', 'it', 'nl', 'fi', 'da', 'da', 'es', 'de', 'no', 'nl', 'af', 'no', 'es', 'lt', 'no', 'af', 'no', 'de', 'sv', 'sv', 'en', 'nl', 'lt', 'af', 'lt', 'de', 'ro', 'lt', 'sv', 'id', 'nl', 'de', 'af', 'de', 'es', 'sv', 'da', 'et', 'ro', 'sl', 'sv', 'de', 'nl', 'de', 'nl', 'lt', 'sl', 'tl', 'en', 'nl', 'nl', 'id', 'sv', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'de', 'no', 'af', 'fr', 'en', 'da', 'fr', 'id', 'id', 'id', 'af', 'lt', 'de', 'de', 'lt', 'lt', 'de', 'it', 'cy', 'de', 'de', 'ca', 'sw', 'es', 'no', 'de', 'id', 'hu', 'lt', 'lt', 'tl', 'sv', 'lt', 'fi', 'nl', 'nl', 'id', 'sw', 'so', 'so', 'fr', 'no', 'so', 'fr', 'fr', 'fr', 'lt', 'sv', 'de', 'de', 'cy', 'de', 'sv', 'en', 'tl', 'tl', 'sk', 'lt', 'id', 'da', 'sv', 'nl', 'de', 'de', 'de', 'de', 'de', 'de', 'tr', 'de', 'de', 'de', 'de', 'de', 'nl', 'de', 'de', 'de', 'de', 'nl', 'id', 'de', 'de', 'nl', 'lt', 'de', 'nl', 'de', 'de', 'de', 'de', 'lt', 'de', 'sv', 'de', 'sv', 'nl', 'sv', 'lt', 'sv', 'nl', 'de', 'nl', 'de', 'de', 'nl', 'lt', 'de', 'nl', 'lt', 'en', 'sv', 'de', 'de', 'af', 'en', 'de', 'lt', 'fr', 'fr', 'fr', 'tl', 'de', 'lt', 'ro', 'id', 'id', 'id', 'no', 'lt', 'lt', 'id', 'lt', 'id', 'de', 'nl', 'nl', 'de', 'en', 'nl', 'af', 'en', 'en', 'de', 'lt', 'nl', 'sv', 'hu', 'en', 'de', 'lv', 'lt', 'id', 'af', 'lt', 'lt', 'sl', 'de', 'en', 'de', 'ca', 'nl', 'af', 'nl', 'nl', 'lt', 'nl', 'so', 'nl', 'nl', 'so', 'nl', 'de', 'lt', 'nl', 'no', 'so', 'nl', 'en', 'en', 'da', 'af', 'no', 'lt', 'lt', 'nl', 'de', 'de', 'pl', 'cy', 'de', 'pl', 'sw', 'ca', 'pl', 'vi', 'cs', 'pt', 'af', 'so', 'tr', 'so', 'af', 'id', 'fr', 'et', 'da', 'ca', 'en', 'af', 'en', 'hu', 'en', 'de', 'sq', 'ro', 'es', 'it', 'it', 'sv', 'de', 'id', 'lt', 'cy', 'cy', 'sv', 'de', 'et', 'hr', 'id', 'id', 'id', 'vi', 'nl', 'et', 'et', 'et', 'sv', 'lt', 'de', 'nl', 'af', 'es', 'nl', 'nl', 'fr', 'lt', 'de', 'nl', 'de', 'nl', 'nl', 'lt', 'nl', 'de', 'ro', 'nl', 'af', 'nl', 'nl', 'de', 'cy', 'et', 'fr', 'fr', 'es', 'fr', 'ca', 'cy', 'so', 'en', 'lt', 'da', 'pl', 'af', 'ca', 'en', 'da', 'fi', 'id', 'nl', 'fr', 'sl', 'en', 'et', 'tl', 'cy', 'da', 'no', 'hr', 'fi', 'fi', 'cy', 'hu', 'et', 'sv', 'no', 'nl', 'nl', 'no', 'et', 'sw', 'af', 'ro', 'lt', 'pl', 'no', 'cy', 'so', 'no', 'de', 'fi', 'nl', 'nl', 'nl', 'de', 'de', 'de', 'nl', 'af', 'sv', 'en', 'de', 'nl', 'af', 'af', 'de', 'sl', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'es', 'fr', 'it', 'fr', 'fr', 'fr', 'pt', 'fr', 'so', 'fr', 'fr', 'fr', 'sv', 'sv', 'cy', 'de', 'ro', 'sv', 'nl', 'sv', 'en', 'nl', 'nl', 'nl', 'de', 'nl', 'af', 'tl', 'af', 'sv', 'es', 'es', 'es', 'es', 'es', 'es', 'it', 'ro', 'lt', 'sv', 'id', 'nl', 'de', 'tl', 'af', 'es', 'es', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'de', 'de', 'de', 'nl', 'sl', 'nl', 'nl', 'af', 'af', 'da', 'de', 'it', 'id', 'id', 'hu', 'id', 'id', 'id', 'id', 'id', 'en', 'nl', 'no', 'nl', 'et', 'de', 'et', 'lt', 'nl', 'lt', 'nl', 'sv', 'tl', 'fi', 'nl', 'de', 'lt', 'nl', 'lt', 'so', 'sw', 'en', 'en', 'en', 'sv', 'lt', 'nl', 'pl', 'sv', 'nl', 'it', 'nl', 'nl', 'en', 'sv', 'lt', 'sv', 'nl', 'nl', 'nl', 'nl', 'nl', 'et', 'lt', 'nl', 'de', 'nl', 'et', 'tl', 'tr', 'nl', 'nl', 'fi', 'af', 'nl', 'lt', 'nl', 'sv', 'de', 'de', 'no', 'en', 'de', 'sv', 'nl', 'sv', 'de', 'nl', 'nl', 'nl', 'de', 'nl', 'nl', 'de', 'lt', 'de', 'ro', 'sv', 'sv', 'sv', 'sv', 'nl', 'sv', 'nl', 'it', 'en', 'en', 'nl', 'af', 'lt', 'nl', 'nl', 'sv', 'sv', 'nl', 'lt', 'sv', 'sv', 'af', 'nl', 'lt', 'lt', 'sv', 'et', 'sv', 'lt', 'lt', 'nl', 'id', 'cy', 'et', 'nl', 'fi', 'de', 'et', 'nl', 'lt', 'lt', 'en', 'lt', 'af', 'tl', 'id', 'af', 'it', 'en', 'no', 'en', 'de', 'id', 'et', 'de', 'nl', 'de', 'en', 'de', 'de', 'nl', 'nl', 'sv', 'af', 'lt', 'af', 'de', 'fi', 'et', 'en', 'hu', 'de', 'lt', 'lt', 'lt', 'lt', 'de', 'vi', 'fi', 'en', 'tl', 'sw', 'nl', 'tr', 'nl', 'sv', 'sv', 'af', 'de', 'so', 'lt', 'af', 'tl', 'tl', 'tl', 'nl', 'lt', 'nl', 'en', 'da', 'cy', 'no', 'lt', 'lt', 'tr', 'de', 'it', 'sk', 'cy', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'sv', 'tl', 'tl', 'tl', 'af', 'so', 'id', 'hu', 'de', 'sw', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'nl', 'sv', 'sv', 'sv', 'sv', 'nl', 'nl', 'et', 'id', 'nl', 'lt', 'nl', 'de', 'nl', 'id', 'id', 'af', 'nl', 'de', 'nl', 'lt', 'sv', 'de', 'ro', 'nl', 'af', 'nl', 'de', 'de', 'tl', 'tl', 'sv', 'lt', 'lt', 'hr', 'af', 'af', 'da', 'vi', 'fr', 'en', 'id', 'nl', 'de', 'so', 'sv', 'de', 'af', 'sv', 'en', 'en', 'sl', 'sl', 'sv', 'sv', 'id', 'id', 'en', 'nl', 'id', 'no', 'es', 'it', 'af', 'de', 'de', 'sv', 'nl', 'tl', 'de', 'tl', 'de', 'en', 'lt', 'nl', 'de', 'de', 'de', 'tl', 'de', 'pl', 'de', 'ca', 'vi', 'so', 'sl', 'ca', 'es', 'tl', 'da', 'nl', 'lt', 'nl', 'de', 'sv', 'tl', 'en', 'en', 'so', 'no', 'nl', 'de', 'fr', 'lt', 'de', 'lt', 'lt', 'de', 'de', 'sv', 'lt', 'nl', 'id', 'id', 'id', 'id', 'id', 'sw', 'id', 'id', 'nl', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'tl', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'nl', 'id', 'id', 'vi', 'id', 'fr', 'nl', 'en', 'nl', 'nl', 'it', 'vi', 'de', 'vi', 'so', 'de', 'de', 'nl', 'af', 'de', 'de', 'es', 'af', 'de', 'de', 'de', 'de', 'vi', 'fi', 'vi', 'de', 'so', 'vi', 'so', 'de', 'cy', 'nl', 'ca', 'de', 'es', 'es', 'id', 'de', 'de', 'af', 'id', 'de', 'nl', 'es', 'ro', 'af', 'so', 'nl', 'de', 'da', 'nl', 'tr', 'fr', 'de', 'et', 'it', 'sw', 'de', 'de', 'de', 'de', 'tr', 'sw', 'sv', 'de', 'fr', 'en', 'de', 'sv', 'et', 'so', 'nl', 'de', 'de', 'da', 'no', 'sl', 'sv', 'nl', 'tl', 'de', 'tl', 'sq', 'lt', 'lt', 'lt', 'en', 'nl', 'nl', 'sv', 'lt', 'so', 'so', 'vi', 'it', 'it', 'cy', 'sw', 'fi', 'lt', 'de', 'de', 'de', 'nl', 'de', 'nl', 'de', 'nl', 'nl', 'no', 'cy', 'no', 'sq', 'pt', 'tl', 'hr', 'cy', 'so', 'sq', 'fr', 'de', 'fr', 'es', 'es', 'fr', 'af', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'et', 'da', 'lt', 'tl', 'lt', 'lt', 'nl', 'nl', 'nl', 'lt', 'de', 'en', 'af', 'de', 'af', 'de', 'de', 'de', 'nl', 'en', 'nl', 'nl', 'nl', 'so', 'so', 'de', 'de', 'nl', 'nl', 'sv', 'sv', 'de', 'nl', 'sv', 'lt', 'sv', 'nl', 'nl', 'lt', 'lt', 'lt', 'sv', 'lt', 'nl', 'nl', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'so', 'it', 'de', 'nl', 'en', 'en', 'en', 'nl', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'sq', 'da', 'sw', 'nl', 'tl', 'nl', 'af', 'sw', 'sw', 'id', 'sv', 'sv', 'de', 'sv', 'nl', 'nl', 'en', 'tl', 'fr', 'en', 'nl', 'no', 'de', 'so', 'so', 'sv', 'da', 'de', 'de', 'nl', 'so', 'es', 'da', 'sv', 'nl', 'sv', 'de', 'no', 'no', 'tl', 'ca', 'lt', 'cy', 'no', 'en', 'af', 'nl', 'en', 'so', 'de', 'so', 'hr', 'en', 'sv', 'cy', 'so', 'ro', 'nl', 'so', 'en', 'de', 'cy', 'so', 'nl', 'sv', 'ro', 'en', 'et', 'it', 'sq', 'et', 'tl', 'vi', 'pl', 'af', 'cy', 'lt', 'ca', 'id', 'af', 'lt', 'lt', 'lt', 'en', 'nl', 'nl', 'nl', 'lt', 'de', 'de', 'sv', 'de', 'et', 'id', 'so', 'id', 'so', 'lt', 'so', 'pl', 'no', 'id', 'cy', 'de', 'cy', 'sv', 'lt', 'de', 'lt', 'de', 'lt', 'nl', 'de', 'en', 'so', 'tl', 'lt', 'cy', 'nl', 'cy', 'lt', 'nl', 'nl', 'de', 'nl', 'tr', 'lt', 'hr', 'cy', 'af', 'lt', 'nl', 'so', 'cy', 'it', 'no', 'de', 'nl', 'nl', 'nl', 'sv', 'de', 'lt', 'lt', 'de', 'lt', 'nl', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'en', 'sv', 'nl', 'sv', 'nl', 'nl', 'de', 'nl', 'nl', 'fr', 'hr', 'no', 'so', 'nl', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'tr', 'es', 'lt', 'fi', 'nl', 'de', 'cy', 'so', 'de', 'af', 'fi', 'sw', 'de', 'af', 'de', 'et', 'nl', 'de', 'id', 'lt', 'lt', 'et', 'lt', 'de', 'so', 'fr', 'de', 'no', 'lt', 'de', 'lt', 'af', 'lt', 'tl', 'tl', 'en', 'it', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'en', 'tl', 'tl', 'de', 'tl', 'tl', 'cy', 'id', 'tl', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'de', 'da', 'hr', 'pl', 'no', 'fr', 'af', 'af', 'sv', 'en', 'sv', 'et', 'sv', 'nl', 'de', 'sv', 'sv', 'sv', 'sv', 'sv', 'sv', 'de', 'af', 'sv', 'ro', 'nl', 'nl', 'id', 'sv', 'de', 'nl', 'de', 'nl', 'de', 'lt', 'af', 'de', 'de', 'nl', 'id', 'sv', 'de', 'sv', 'sv', 'sv', 'nl', 'de', 'id', 'sv', 'de', 'sv', 'nl', 'it', 'de', 'cy', 'id', 'sw', 'en', 'de', 'de', 'nl', 'nl', 'nl', 'en', 'de', 'sv', 'nl', 'id', 'id', 'sv', 'vi', 'tr', 'sl', 'nl', 'lt', 'lt', 'lt', 'de', 'sv', 'nl', 'tl', 'af', 'id', 'no', 'nl', 'de', 'cy', 'pl', 'so', 'nl', 'af', 'lt', 'sv', 'sv', 'nl', 'en', 'af', 'nl', 'de', 'tl', 'en', 'af', 'no', 'pl', 'lt', 'lt', 'tl', 'sv', 'en', 'af', 'af', 'de', 'en', 'de', 'af', 'af', 'af', 'de', 'de', 'de', 'cy', 'id', 'de', 'de', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'tl', 'id', 'id', 'tl', 'id', 'id', 'id', 'id', 'de', 'id', 'fr', 'af', 'nl', 'de', 'pl', 'it', 'tl', 'so', 'de', 'fr', 'da', 'en', 'nl', 'lt', 'lt', 'nl', 'lt', 'lt', 'lt', 'fi', 'da', 'de', 'da', 'nl', 'nl', 'fr', 'no', 'lt', 'lt', 'lt', 'et', 'de', 'en', 'nl', 'pt', 'en', 'fr', 'de', 'en', 'lt', 'et', 'lt', 'lt', 'id', 'sv', 'de', 'nl', 'lt', 'lt', 'nl', 'tl', 'lt', 'de', 'no', 'id', 'en', 'nl', 'de', 'de', 'de', 'en', 'nl', 'de', 'lt', 'it', 'so', 'de', 'tl', 'tl', 'tl', 'fi', 'so', 'pl', 'no', 'pl', 'lt', 'sl', 'lt', 'so', 'sw', 'af', 'de', 'so', 'da', 'cy', 'es', 'en', 'de', 'sv', 'cy', 'sv', 'sw', 'de', 'nl', 'af', 'de', 'cy', 'nl', 'fi', 'lt', 'sv', 'lt', 'lt', 'fi', 'de', 'de', 'de', 'af', 'it', 'de', 'en', 'de', 'de', 'lt', 'sw', 'nl', 'af', 'de', 'de', 'de', 'lt', 'de', 'de', 'it', 'sv', 'de', 'en', 'lt', 'lt', 'lt', 'sv', 'so', 'sw', 'en', 'hr', 'af', 'en', 'de', 'af', 'cy', 'nl', 'en', 'et', 'nl', 'de', 'de', 'nl', 'no', 'de', 'tl', 'tl', 'tl', 'tl', 'af', 'tl', 'tl', 'sl', 'de', 'pt', 'en', 'cy', 'tl', 'de', 'sl', 'et', 'hr', 'ro', 'no', 'et', 'no', 'tl', 'nl', 'nl', 'nl', 'da', 'da', 'af', 'nl', 'af', 'cy', 'af', 'no', 'it', 'hr', 'no', 'tl', 'id', 'sw', 'id', 'vi', 'lt', 'es', 'fr', 'de', 'de', 'et', 'nl', 'fi', 'sv', 'vi', 'de', 'sv', 'nl', 'nl', 'sv', 'sv', 'pl', 'sv', 'sv', 'cs', 'en', 'cy', 'en', 'af', 'de', 'tl', 'de', 'de', 'fi', 'sv', 'de', 'de', 'de', 'sq', 'sq', 'tl', 'sv', 'af', 'vi', 'nl', 'nl', 'no', 'fr', 'de', 'en', 'sv', 'nl', 'sk', 'de', 'de', 'nl', 'de', 'nl', 'nl', 'lt', 'lt', 'lt', 'da', 'ro', 'lt', 'lt', 'lt', 'lt', 'pt', 'af', 'de', 'de', 'nl', 'de', 'nl', 'nl', 'sv', 'de', 'sv', 'nl', 'nl', 'nl', 'sv', 'nl', 'nl', 'nl', 'sv', 'lt', 'nl', 'sv', 'cs', 'hu', 'lt', 'nl', 'tl', 'af', 'ro', 'fr', 'af', 'lt', 'de', 'nl', 'sv', 'sv', 'sv', 'da', 'es', 'es', 'es', 'ca', 'nl', 'vi', 'ca', 'no', 'sl', 'lt', 'so', 'sl', 'sv', 'fr', 'af', 'vi', 'sv', 'nl', 'pt', 'pt', 'pt', 'nl', 'nl', 'nl', 'id', 'nl', 'et', 'lt', 'so', 'en', 'en', 'af', 'en', 'en', 'af', 'en', 'no', 'lt', 'af', 'de', 'tl', 'en', 'nl', 'id', 'id', 'id', 'id', 'id', 'id', 'da', 'no', 'lt', 'so', 'so', 'da', 'de', 'lt', 'lt', 'et', 'en', 'fr', 'id', 'id', 'cs', 'de', 'fi', 'de', 'de', 'es', 'es', 'es', 'da', 'lt', 'nl', 'lt', 'en', 'nl', 'de', 'lt', 'so', 'tl', 'af', 'fi', 'lt', 'de', 'sv', 'de', 'nl', 'de', 'lt', 'es', 'et', 'af', 'af', 'lt', 'en', 'en', 'de', 'sv', 'nl', 'en', 'cy', 'nl', 'en', 'de', 'af', 'et', 'fi', 'so', 'pl', 'de', 'de', 'lt', 'nl', 'nl', 'nl', 'nl', 'fr', 'sv', 'de', 'en', 'da', 'da', 'so', 'fr', 'vi', 'tr', 'et', 'id', 'it', 'sv', 'vi', 'et', 'no', 'sv', 'lt', 'en', 'af', 'nl', 'et', 'ro', 'de', 'ca', 'de', 'de', 'es', 'nl', 'fi', 'pt', 'so', 'nl', 'lt', 'de', 'de', 'sv', 'nl', 'de', 'et', 'id', 'id', 'id', 'so', 'id', 'fi', 'de', 'hu', 'nl', 'nl', 'nl', 'nl', 'sv', 'da', 'en', 'hu', 'so', 'lt', 'hu', 'af', 'id', 'sv', 'de', 'de', 'sl', 'de', 'nl', 'sl', 'sv', 'tl', 'af', 'sv', 'de', 'lt', 'de', 'nl', 'fr', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'nl', 'sv', 'tl', 'tl', 'fr', 'da', 'no', 'de', 'nl', 'nl', 'en', 'ro', 'af', 'af', 'it', 'en', 'de', 'da', 'en', 'so', 'en', 'en', 'sl', 'sv', 'lt', 'tl', 'de', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'tl', 'nl', 'lt', 'nl', 'nl', 'it', 'et', 'sl', 'sk', 'sv', 'de', 'de', 'de', 'sv', 'sv', 'da', 'en', 'nl', 'sv', 'de', 'lt', 'de', 'nl', 'de', 'af', 'de', 'de', 'nl', 'sv', 'nl', 'nl', 'de', 'de', 'de', 'nl', 'sv', 'de', 'sv', 'de', 'de', 'sv', 'de', 'de', 'af', 'de', 'lt', 'en', 'en', 'sv', 'lt', 'nl', 'en', 'nl', 'da', 'da', 'lt', 'hr', 'no', 'nl', 'nl', 'en', 'lt', 'sv', 'en', 'it', 'de', 'de', 'en', 'nl', 'sv', 'nl', 'de', 'ro', 'sv', 'de', 'tl', 'nl', 'nl', 'de', 'en', 'cy', 'de', 'af', 'de', 'lt', 'so', 'nl', 'sv', 'de', 'nl', 'nl', 'sv', 'nl', 'en', 'nl', 'sv', 'fr', 'sv', 'en', 'de', 'de', 'nl', 'nl', 'sv', 'no', 'de', 'so', 'tr', 'so', 'nl', 'da', 'de', 'en', 'sv', 'nl', 'af', 'tl', 'da', 'no', 'lt', 'lt', 'de', 'so', 'id', 'de', 'de', 'nl', 'so', 'id', 'af', 'so', 'vi', 'pl', 'vi', 'nl', 'nl', 'af', 'so', 'ro', 'ca', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'af', 'es', 'es', 'so', 'es', 'es', 'ca', 'es', 'es', 'de', 'nl', 'sv', 'en', 'cy', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'es', 'nl', 'da', 'sl', 'fi', 'en', 'de', 'lt', 'nl', 'af', 'de', 'de', 'id', 'nl', 'id', 'id', 'lt', 'lt', 'lt', 'lt', 'lt', 'cy', 'de', 'lv', 'so', 'af', 'cs', 'de', 'lt', 'lt', 'lt', 'en', 'sv', 'cy', 'so', 'sv', 'id', 'en', 'so', 'nl', 'pt', 'fr', 'da', 'da', 'tl', 'sv', 'vi', 'af', 'nl', 'af', 'hu', 'so', 'hr', 'cy', 'so', 'so', 'af', 'it', 'sv', 'nl', 'de', 'de', 'cy', 'da', 'en', 'pl', 'cy', 'ca', 'af', 'da', 'af', 'sv', 'da', 'cy', 'sq', 'hr', 'id', 'no', 'et', 'it', 'fr', 'sk', 'tl', 'de', 'sl', 'so', 'en', 'id', 'fi', 'ro', 'hr', 'fr', 'cy', 'so', 'af', 'et', 'id', 'so', 'nl', 'de', 'pl', 'no', 'et', 'hr', 'af', 'it', 'af', 'fr', 'de', 'sv', 'cs', 'ca', 'pl', 'en', 'es', 'id', 'es', 'so', 'de', 'fr', 'en', 'sw', 'en', 'fr', 'fr', 'de', 'de', 'fi', 'sl', 'ca', 'no', 'de', 'nl', 'sv', 'da', 'so', 'so', 'de', 'tl', 'so', 'it', 'tl', 'sw', 'pl', 'so', 'cy', 'sv', 'so', 'it', 'af', 'af', 'pt', 'da', 'fr', 'da', 'et', 'en', 'so', 'hr', 'af', 'no', 'fr', 'it', 'lt', 'es', 'cy', 'no', 'no', 'cy', 'fi', 'cs', 'nl', 'cy', 'en', 'da', 'cy', 'en', 'fr', 'cy', 'no', 'no', 'it', 'sw', 'et', 'tl', 'cy', 'nl', 'ca', 'cs', 'id', 'fr', 'fr', 'de', 'so', 'af', 'es', 'tl', 'af', 'de', 'de', 'lt', 'cy', 'tl', 'tl', 'tl', 'tl', 'af', 'af', 'tl', 'en', 'tl', 'lt', 'id', 'en', 'de', 'so', 'tl', 'et', 'et', 'de', 'lt', 'lt', 'sv', 'de', 'de', 'id', 'de', 'de', 'af', 'nl', 'nl', 'de', 'de', 'so', 'de', 'sv', 'pl', 'de', 'nl', 'nl', 'da', 'et', 'tr', 'so', 'en', 'da', 'sv', 'fr', 'so', 'tl', 'sv', 'id', 'sw', 'tl', 'tl', 'tl', 'nl', 'it', 'da', 'sv', 'fi', 'sv', 'id', 'id', 'de', 'no', 'en', 'de', 'de', 'ro', 'fi', 'id', 'lt', 'no', 'lt', 'nl', 'sv', 'lt', 'lt', 'lt', 'af', 'af', 'so', 'et', 'nl', 'et', 'ro', 'lt', 'de', 'af', 'fr', 'fr', 'sv', 'da', 'et', 'de', 'en', 'so', 'sv', 'no', 'ro', 'lt', 'no', 'en', 'nl', 'af', 'af', 'de', 'sv', 'et', 'de', 'nl', 'de', 'id', 'fi', 'et', 'lt', 'en', 'nl', 'lt', 'es', 'da', 'lt', 'de', 'de', 'en', 'et', 'de', 'af', 'af', 'en', 'tl', 'en', 'tr', 'it', 'sw', 'sw', 'sw', 'sv', 'nl', 'lt', 'lt', 'nl', 'lt', 'lt', 'nl', 'sv', 'lt', 'en', 'nl', 'de', 'de', 'sv', 'lt', 'nl', 'de', 'nl', 'de', 'de', 'pl', 'sv', 'de', 'sv', 'sl', 'lt', 'fi', 'lt', 'tl', 'sk', 'hr', 'fi', 'sv', 'so', 'de', 'nl', 'id', 'da', 'lt', 'so', 'de', 'nl', 'nl', 'nl', 'nl', 'de', 'nl', 'lt', 'nl', 'af', 'lt', 'et', 'nl', 'sv', 'so', 'lt', 'sl', 'so', 'et', 'lt', 'ro', 'de', 'de', 'af', 'no', 'de', 'lt', 'de', 'fr', 'da', 'fi', 'af', 'en', 'de', 'tr', 'nl', 'tl', 'af', 'af', 'sw', 'nl', 'pl', 'so', 'nl', 'tr', 'de', 'de', 'de', 'fi', 'da', 'en', 'de', 'nl', 'id', 'id', 'so', 'id', 'da', 'no', 'en', 'sq', 'vi', 'lt', 'sq', 'de', 'id', 'de', 'no', 'nl', 'af', 'en', 'nl', 'ca', 'lt', 'sk', 'af', 'de', 'cy', 'da', 'nl', 'sv', 'nl', 'de', 'de', 'de', 'de', 'no', 'de', 'tl', 'so', 'de', 'sv', 'sl', 'so', 'sv', 'sv', 'pt', 'af', 'af', 'en', 'de', 'de', 'af', 'pl', 'sv', 'af', 'fr', 'lt', 'pl', 'de', 'de', 'vi', 'nl', 'no', 'de', 'nl', 'nl', 'et', 'vi', 'nl', 'it', 'so', 'pl', 'lt', 'en', 'vi', 'da', 'ca', 'sv', 'hr', 'sl', 'de', 'hr', 'vi', 'so', 'sl', 'so', 'en', 'pt', 'so', 'de', 'lt', 'de', 'sv', 'lt', 'lt', 'af', 'de', 'de', 'no', 'so', 'fr', 'et', 'fr', 'pl', 'lt', 'de', 'sv', 'lt', 'lt', 'lt', 'lt', 'lt', 'no', 'en', 'en', 'nl', 'en', 'nl', 'nl', 'nl', 'nl', 'en', 'de', 'sv', 'fi', 'en', 'nl', 'sv', 'en', 'lt', 'de', 'en', 'en', 'de', 'de', 'de', 'cs', 'sl', 'sw', 'pl', 'sv', 'de', 'de', 'vi', 'de', 'hr', 'de', 'tl', 'no', 'de', 'hr', 'de', 'nl', 'hu', 'id', 'cy', 'fi', 'hr', 'hu', 'id', 'de', 'vi', 'de', 'de', 'de', 'hu', 'pl', 'sl', 'en', 'de', 'de', 'nl', 'nl', 'de', 'nl', 'de', 'nl', 'nl', 'no', 'fr', 'id', 'id', 'id', 'sl', 'tl', 'tl', 'es', 'fi', 'it', 'tl', 'tl', 'cy', 'tl', 'af', 'en', 'nl', 'lt', 'sv', 'da', 'sv', 'sv', 'de', 'de', 'de', 'sv', 'sv', 'et', 'vi', 'tl', 'tl', 'nl', 'et', 'de', 'de', 'nl', 'fr', 'id', 'fi', 'pt', 'da', 'lt', 'nl', 'de', 'lt', 'en', 'en', 'nl', 'nl', 'de', 'de', 'ca', 'nl', 'sv', 'ca', 'en', 'nl', 'sv', 'fr', 'ro', 'sv', 'fr', 'de', 'de', 'nl', 'en', 'lt', 'it', 'nl', 'et', 'de', 'de', 'sv', 'es', 'en', 'nl', 'nl', 'de', 'nl', 'sl', 'sv', 'nl', 'sv', 'lt', 'lt', 'id', 'de', 'nl', 'fr', 'de', 'no', 'de', 'nl', 'nl', 'de', 'nl', 'lt', 'de', 'es', 'es', 'ca', 'es', 'nl', 'nl', 'de', 'de', 'fi', 'de', 'id', 'it', 'id', 'de', 'lt', 'de', 'lt', 'sw', 'es', 'id', 'id', 'no', 'de', 'en', 'de', 'tl', 'tl', 'tl', 'tl', 'da', 'et', 'sv', 'lt', 'de', 'lt', 'lt', 'da', 'no', 'sq', 'vi', 'de', 'id', 'de', 'nl', 'nl', 'nl', 'nl', 'id', 'so', 'en', 'en', 'id', 'de', 'af', 'af', 'de', 'lt', 'lt', 'da', 'en', 'nl', 'es', 'de', 'de', 'sv', 'da', 'af', 'de', 'lt', 'de', 'da', 'tl', 'es', 'tl', 'tl', 'tl', 'tl', 'so', 'tl', 'tl', 'tl', 'tl', 'tl', 'af', 'tr', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'sw', 'tl', 'no', 'tl', 'af', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'cy', 'tl', 'tl', 'hr', 'tl', 'tl', 'tl', 'tl', 'tl', 'so', 'tl', 'tl', 'tl', 'tl', 'pl', 'tl', 'cy', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'id', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'hr', 'tl', 'so', 'tl', 'tl', 'sv', 'tl', 'tl', 'id', 'tl', 'tl', 'fr', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'en', 'tl', 'tl', 'tl', 'en', 'tl', 'de', 'de', 'tl', 'tl', 'tl', 'no', 'tl', 'so', 'tl', 'tl', 'tl', 'tl', 'de', 'tl', 'tl', 'cy', 'tl', 'tl', 'fi', 'sw', 'de', 'tl', 'tl', 'tl', 'tl', 'hr', 'tl', 'en', 'tl', 'tl', 'tl', 'tl', 'sv', 'nl', 'pl', 'pl', 'tr', 'de', 'de', 'tl', 'sw', 'tl', 'tl', 'af', 'cy', 'tl', 'tl', 'de', 'sk', 'sv', 'de', 'no', 'hu', 'nl', 'tl', 'ro', 'hr', 'nl', 'nl', 'nl', 'id', 'en', 'en', 'fr', 'no', 'de', 'de', 'sv', 'sv', 'sv', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'nl', 'sv', 'nl', 'de', 'sv', 'en', 'de', 'de', 'de', 'de', 'de', 'vi', 'de', 'it', 'en', 'nl', 'sv', 'nl', 'de', 'de', 'nl', 'de', 'af', 'de', 'de', 'lt', 'de', 'de', 'sv', 'nl', 'af', 'de', 'sv', 'sv', 'de', 'nl', 'lt', 'lt', 'lt', 'nl', 'lt', 'lt', 'sv', 'de', 'de', 'nl', 'de', 'de', 'nl', 'sv', 'sv', 'de', 'de', 'sv', 'de', 'de', 'de', 'sv', 'lt', 'lt', 'af', 'lt', 'lt', 'nl', 'lt', 'af', 'so', 'hu', 'so', 'nl', 'lt', 'lt', 'lt', 'nl', 'sv', 'nl', 'sw', 'fr', 'lt', 'da', 'en', 'so', 'lt', 'es', 'so', 'lt', 'sv', 'sv', 'nl', 'ro', 'id', 'en', 'pt', 'so', 'id', 'de', 'sk', 'da', 'lt', 'lt', 'et', 'lt', 'nl', 'nl', 'de', 'nl', 'lt', 'id', 'sv', 'lt', 'tr', 'it', 'nl', 'ro', 'ro', 'so', 'en', 'nl', 'en', 'nl', 'lt', 'lt', 'lt', 'nl', 'nl', 'lt', 'de', 'de', 'hr', 'da', 'sv', 'it', 'so', 'af', 'nl', 'af', 'af', 'tr', 'nl', 'pl', 'nl', 'de', 'de', 'de', 'nl', 'cy', 'en', 'pt', 'pt', 'af', 'sk', 'af', 'cs', 'sw', 'it', 'pt', 'cy', 'cs', 'vi', 'so', 'es', 'so', 'fi', 'pt', 'so', 'so', 'vi', 'et', 'lt', 'cy', 'id', 'de', 'cy', 'en', 'id', 'id', 'no', 'id', 'tl', 'id', 'en', 'tl', 'tl', 'fr', 'af', 'it', 'nl', 'nl', 'af', 'da', 'nl', 'nl', 'pt', 'pt', 'pt', 'nl', 'af', 'nl', 'so', 'af', 'sv', 'sv', 'af', 'af', 'lt', 'sl', 'de', 'so', 'lt', 'ro', 'de', 'de', 'nl', 'tr', 'nl', 'fr', 'lt', 'id', 'so', 'tl', 'fi', 'id', 'id', 'nl', 'af', 'sl', 'cy', 'da', 'sv', 'sv', 'pt', 'nl', 'lt', 'pt', 'pt', 'af', 'tl', 'lt', 'tl', 'tl', 'en', 'sq', 'de', 'sv', 'nl', 'tr', 'tr', 'lt', 'de', 'de', 'sv', 'nl', 'de', 'de', 'nl', 'sv', 'lt', 'af', 'nl', 'nl', 'nl', 'sv', 'de', 'sv', 'nl', 'de', 'id', 'lt', 'tl', 'tl', 'tl', 'de', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'de', 'tr', 'et', 'et', 'de', 'vi', 'cy', 'cy', 'lt', 'nl', 'lt', 'lt', 'de', 'lt', 'lt', 'sl', 'lt', 'so', 'sv', 'de', 'sv', 'sv', 'de', 'pl', 'nl', 'nl', 'sv', 'de', 'de', 'de', 'de', 'de', 'nl', 'de', 'lt', 'nl', 'de', 'af', 'sv', 'id', 'lt', 'sv', 'sv', 'sv', 'ca', 'tl', 'de', 'nl', 'nl', 'lt', 'de', 'sv', 'nl', 'lt', 'nl', 'nl', 'lt', 'af', 'id', 'tr', 'pl', 'sl', 'af', 'fi', 'sv', 'nl', 'lt', 'lt', 'lt', 'nl', 'af', 'lt', 'nl', 'nl', 'ca', 'af', 'lt', 'de', 'sv', 'fi', 'nl', 'sv', 'nl', 'fi', 'tl', 'id', 'es', 'so', 'lt', 'af', 'en', 'de', 'de', 'en', 'lt', 'de', 'af', 'sv', 'lt', 'sv', 'sv', 'ro', 'nl', 'de', 'en', 'af', 'de', 'af', 'nl', 'sv', 'af', 'lt', 'en', 'lt', 'sl', 'lt', 'af', 'af', 'sv', 'sv', 'af', 'nl', 'lt', 'sv', 'no', 'lt', 'nl', 'lt', 'lt', 'lt', 'lt', 'nl', 'de', 'nl', 'pt', 'pt', 'lt', 'af', 'ro', 'sq', 'ro', 'it', 'da', 'de', 'nl', 'de', 'et', 'sv', 'it', 'en', 'en', 'no', 'pl', 'so', 'pt', 'ro', 'de', 'af', 'de', 'sv', 'vi', 'id', 'id', 'id', 'es', 'es', 'es', 'ca', 'af', 'tr', 'nl', 'ca', 'lt', 'et', 'sv', 'af', 'af', 'af', 'de', 'de', 'sv', 'lt', 'fi', 'nl', 'de', 'de', 'de', 'nl', 'nl', 'sv', 'sv', 'de', 'fr', 'id', 'id', 'ro', 'nl', 'nl', 'af', 'nl', 'en', 'de', 'de', 'lt', 'lt', 'de', 'lt', 'sv', 'id', 'fi', 'de', 'nl', 'de', 'so', 'nl', 'cy', 'da', 'sk', 'so', 'so', 'so', 'lt', 'da', 'en', 'so', 'sl', 'nl', 'de', 'af', 'id', 'id', 'no', 'so', 'ro', 'nl', 'so', 'sv', 'de', 'et', 'pt', 'id', 'da', 'so', 'af', 'ca', 'sl', 'en', 'it', 'so', 'de', 'cy', 'en', 'af', 'id', 'ca', 'sq', 'it', 'de', 'de', 'de', 'sk', 'so', 'cy', 'hr', 'da', 'no', 'hr', 'no', 'af', 'en', 'et', 'sk', 'fr', 'cy', 'da', 'so', 'en', 'it', 'de', 'sw', 'vi', 'ca', 'so', 'da', 'ca', 'nl', 'fi', 'af', 'cy', 'en', 'id', 'it', 'tl', 'pl', 'sv', 'sl', 'hu', 'en', 'cy', 'es', 'tl', 'so', 'so', 'no', 'es', 'so', 'no', 'de', 'lt', 'tl', 'en', 'es', 'de', 'sv', 'nl', 'nl', 'lt', 'de', 'ro', 'de', 'sv', 'nl', 'nl', 'id', 'da', 'en', 'so', 'af', 'af', 'en', 'af', 'af', 'af', 'en', 'nl', 'en', 'it', 'es', 'af', 'de', 'nl', 'cy', 'cy', 'nl', 'en', 'fr', 'pt', 'et', 'id', 'lt', 'so', 'de', 'tl', 'id', 'tr', 'de', 'en', 'no', 'tl', 'tl', 'vi', 'no', 'sk', 'af', 'de', 'nl', 'id', 'sk', 'en', 'it', 'ca', 'so', 'et', 'af', 'nl', 'fi', 'lt', 'fi', 'nl', 'de', 'es', 'lt', 'lt', 'id', 'id', 'id', 'en', 'da', 'de', 'de', 'lt', 'de', 'en', 'de', 'de', 'de', 'de', 'tl', 'sv', 'da', 'sw', 'af', 'da', 'lt', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'sv', 'af', 'de', 'de', 'so', 'cy', 'so', 'sv', 'de', 'ro', 'nl', 'de', 'de', 'lt', 'no', 'af', 'lt', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'id', 'de', 'pl', 'fr', 'pl', 'pl', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'pl', 'pl', 'pl', 'pl', 'de', 'pl', 'tl', 'de', 'it', 'tl', 'no', 'da', 'de', 'so', 'so', 'id', 'de', 'af', 'sv', 'nl', 'lt', 'nl', 'de', 'en', 'nl', 'de', 'nl', 'so', 'id', 'cy', 'cy', 'no', 'pl', 'nl', 'de', 'so', 'nl', 'sv', 'sv', 'de', 'nl', 'de', 'da', 'lt', 'lt', 'no', 'af', 'da', 'lt', 'nl', 'so', 'nl', 'hr', 'sv', 'vi', 'nl', 'en', 'af', 'sw', 'so', 'nl', 'en', 'so', 'sv', 'en', 'de', 'it', 'da', 'fi', 'so', 'id', 'nl', 'tr', 'cy', 'af', 'de', 'lt', 'no', 'cy', 'so', 'so', 'it', 'so', 'fr', 'de', 'sv', 'sv', 'de', 'fr', 'sl', 'hr', 'it', 'lt', 'af', 'cy', 'lt', 'so', 'fi', 'tl', 'nl', 'lt', 'lt', 'et', 'tl', 'cy', 'so', 'so', 'es', 'af', 'tl', 'nl', 'tl', 'nl', 'tr', 'it', 'cy', 'en', 'no', 'so', 'no', 'tl', 'nl', 'it', 'fi', 'id', 'fr', 'fi', 'de', 'tr', 'af', 'da', 'da', 'cy', 'fr', 'en', 'sv', 'fr', 'af', 'af', 'nl', 'af', 'it', 'it', 'sk', 'da', 'fr', 'cy', 'so', 'tl', 'tr', 'id', 'sv', 'cy', 'sk', 'en', 'da', 'it', 'pt', 'de', 'lt', 'de', 'id', 'nl', 'de', 'af', 'af', 'de', 'sq', 'sv', 'lt', 'ro', 'nl', 'de', 'es', 'de', 'nl', 'de', 'da', 'fr', 'nl', 'da', 'id', 'da', 'so', 'fr', 'nl', 'da', 'de', 'no', 'lt', 'ro', 'pl', 'tl', 'nl', 'de', 'et', 'fr', 'lt', 'lt', 'de', 'lt', 'de', 'lt', 'lt', 'lt', 'lt', 'de', 'nl', 'lt', 'et', 'lt', 'lt', 'nl', 'tl', 'tl', 'lt', 'es', 'es', 'cy', 'es', 'es', 'es', 'es', 'de', 'tr', 'de', 'id', 'id', 'de', 'id', 'de', 'id', 'id', 'id', 'id', 'id', 'de', 'de', 'id', 'de', 'de', 'de', 'id', 'lt', 'tl', 'id', 'de', 'et', 'lt', 'de', 'tl', 'lt', 'lt', 'nl', 'de', 'lt', 'nl', 'pt', 'nl', 'de', 'de', 'af', 'lt', 'lt', 'lt', 'de', 'af', 'et', 'sv', 'lt', 'nl', 'nl', 'so', 'it', 'en', 'sv', 'af', 'de', 'lt', 'lt', 'lt', 'lt', 'af', 'de', 'hu', 'de', 'hu', 'so', 'fi', 'sv', 'de', 'af', 'af', 'nl', 'nl', 'nl', 'af', 'so', 'it', 'de', 'sv', 'sv', 'de', 'de', 'id', 'so', 'so', 'sv', 'en', 'lt', 'sv', 'sv', 'nl', 'nl', 'pl', 'de', 'de', 'hr', 'de', 'it', 'lt', 'lt', 'nl', 'id', 'id', 'id', 'id', 'nl', 'lt', 'it', 'nl', 'af', 'lt', 'es', 'de', 'nl', 'nl', 'de', 'da', 'lt', 'da', 'lt', 'tl', 'de', 'lt', 'lt', 'lt', 'nl', 'af', 'lt', 'lt', 'sv', 'no', 'lt', 'sv', 'da', 'nl', 'id', 'id', 'sv', 'id', 'nl', 'et', 'id', 'tr', 'id', 'nl', 'ro', 'id', 'de', 'cy', 'tl', 'es', 'nl', 'lt', 'pl', 'af', 'sl', 'es', 'es', 'de', 'sv', 'de', 'de', 'de', 'es', 'es', 'de', 'nl', 'da', 'ro', 'pt', 'no', 'lt', 'tl', 'id', 'es', 'de', 'nl', 'da', 'pt', 'es', 'es', 'nl', 'sl', 'ro', 'de', 'ca', 'nl', 'de', 'sq', 'de', 'no', 'en', 'nl', 'id', 'id', 'af', 'hu', 'no', 'ca', 'nl', 'tl', 'ro', 'en', 'sw', 'lt', 'vi', 'it', 'so', 'id', 'af', 'fi', 'da', 'it', 'nl', 'de', 'nl', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'fr', 'en', 'tr', 'fi', 'af', 'de', 'sl', 'en', 'pt', 'da', 'nl', 'en', 'de', 'de', 'de', 'nl', 'sv', 'de', 'lt', 'so', 'nl', 'en', 'af', 'sl', 'tr', 'lt', 'lt', 'lt', 'ro', 'lt', 'lt', 'lt', 'lt', 'nl', 'de', 'de', 'ca', 'nl', 'so', 'so', 'de', 'da', 'cy', 'so', 'cy', 'en', 'no', 'en', 'no', 'nl', 'sv', 'lt', 'lt', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'cy', 'de', 'de', 'lt', 'no', 'de', 'nl', 'en', 'sv', 'nl', 'cy', 'nl', 'de', 'en', 'nl', 'sv', 'nl', 'fi', 'de', 'sv', 'nl', 'nl', 'lt', 'no', 'en', 'pl', 'hu', 'de', 'nl', 'no', 'et', 'de', 'lt', 'lt', 'nl', 'lt', 'lt', 'lt', 'lt', 'de', 'lt', 'id', 'en', 'so', 'cy', 'cy', 'lt', 'da', 'nl', 'so', 'de', 'af', 'sv', 'cy', 'af', 'it', 'lt', 'af', 'sv', 'so', 'so', 'so', 'fr', 'cs', 'af', 'so', 'lt', 'nl', 'hr', 'tl', 'so', 'et', 'it', 'sw', 'fi', 'it', 'de', 'so', 'so', 'tl', 'it', 'so', 'so', 'so', 'so', 'en', 'no', 'nl', 'pt', 'tr', 'cy', 'cy', 'en', 'en', 'so', 'so', 'af', 'sw', 'en', 'id', 'tl', 'nl', 'so', 'no', 'de', 'tl', 'en', 'so', 'sv', 'vi', 'de', 'en', 'cy', 'ca', 'af', 'fr', 'cy', 'sl', 'sl', 'sl', 'de', 'nl', 'it', 'sq', 'de', 'ca', 'vi', 'af', 'so', 'sq', 'af', 'id', 'tl', 'de', 'so', 'lt', 'en', 'de', 'da', 'sw', 'de', 'es', 'et', 'tr', 'it', 'en', 'lt', 'sq', 'sw', 'sl', 'af', 'et', 'et', 'lt', 'de', 'tl', 'nl', 'sv', 'pl', 'nl', 'en', 'nl', 'nl', 'tl', 'sl', 'sl', 'de', 'nl', 'nl', 'nl', 'en', 'de', 'tr', 'nl', 'de', 'it', 'tl', 'sw', 'id', 'sw', 'sw', 'sw', 'id', 'sw', 'id', 'id', 'id', 'de', 'et', 'lt', 'af', 'so', 'so', 'lt', 'en', 'fr', 'sv', 'en', 'nl', 'de', 'en', 'sv', 'de', 'af', 'de', 'de', 'fi', 'da', 'da', 'no', 'nl', 'lt', 'et', 'af', 'nl', 'de', 'af', 'de', 'et', 'nl', 'sv', 'en', 'fi', 'lt', 'so', 'da', 'en', 'nl', 'de', 'de', 'pl', 'lt', 'de', 'lt', 'lt', 'tl', 'sv', 'lt', 'ro', 'nl', 'de', 'de', 'nl', 'nl', 'de', 'en', 'nl', 'id', 'lt', 'fr', 'fr', 'fr', 'lt', 'so', 'no', 'lt', 'fi', 'sv', 'nl', 'tl', 'nl', 'lt', 'sv', 'tl', 'lt', 'et', 'en', 'sv', 'it', 'so', 'so', 'de', 'de', 'sv', 'so', 'de', 'da', 'fi', 'et', 'nl', 'id', 'so', 'af', 'sw', 'sw', 'en', 'no', 'de', 'de', 'nl', 'ro', 'af', 'sv', 'lt', 'af', 'fi', 'nl', 'sv', 'da', 'af', 'no', 'nl', 'pt', 'nl', 'sv', 'id', 'id', 'sv', 'tl', 'af', 'lt', 'fi', 'it', 'et', 'nl', 'ro', 'af', 'fi', 'en', 'fr', 'nl', 'en', 'de', 'id', 'de', 'en', 'nl', 'lt', 'lt', 'lt', 'lt', 'hu', 'de', 'de', 'so', 'en', 'so', 'da', 'de', 'en', 'no', 'so', 'ca', 'sl', 'de', 'so', 'tl', 'sv', 'lt', 'tl', 'es', 'so', 'fi', 'af', 'sv', 'fi', 'sv', 'sv', 'nl', 'es', 'so', 'et', 'sl', 'da', 'sv', 'es', 'nl', 'no', 'sv', 'nl', 'nl', 'lt', 'nl', 'sv', 'sv', 'de', 'fi', 'nl', 'ro', 'nl', 'no', 'hr', 'hr', 'nl', 'nl', 'sk', 'lt', 'de', 'en', 'nl', 'nl', 'de', 'de', 'id', 'it', 'af', 'lt', 'de', 'sv', 'no', 'af', 'de', 'nl', 'de', 'so', 'de', 'no', 'en', 'de', 'vi', 'sl', 'pl', 'tl', 'pt', 'fi', 'de', 'hu', 'et', 'af', 'lt', 'tr', 'nl', 'id', 'hu', 'sw', 'da', 'so', 'cy', 'so', 'it', 'no', 'pt', 'pl', 'en', 'so', 'pt', 'so', 'cy', 'fr', 'sl', 'cy', 'en', 'nl', 'it', 'cy', 'no', 'sw', 'nl', 'so', 'hr', 'so', 'fr', 'sq', 'tl', 'de', 'cy', 'en', 'cs', 'it', 'en', 'nl', 'en', 'da', 'so', 'tr', 'ca', 'en', 'af', 'no', 'sw', 'tl', 'af', 'it', 'so', 'de', 'da', 'af', 'en', 'af', 'af', 'fi', 'pl', 'af', 'so', 'sk', 'pl', 'so', 'af', 'so', 'en', 'af', 'so', 'so', 'da', 'en', 'no', 'lt', 'es', 'es', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'en', 'tl', 'tl', 'id', 'en', 'id', 'id', 'sw', 'no', 'sv', 'nl', 'tr', 'nl', 'de', 'sv', 'nl', 'nl', 'af', 'nl', 'so', 'tl', 'af', 'de', 'nl', 'nl', 'nl', 'de', 'en', 'cy', 'id', 'en', 'no', 'no', 'no', 'no', 'no', 'no', 'no', 'no', 'no', 'no', 'no', 'no', 'no', 'no', 'no', 'no', 'no', 'no', 'no', 'ro', 'no', 'no', 'no', 'no', 'no', 'no', 'no', 'no', 'no', 'sv', 'no', 'sv', 'no', 'no', 'no', 'sv', 'no', 'no', 'no', 'no', 'no', 'no', 'no', 'no', 'et', 'no', 'no', 'no', 'af', 'de', 'sv', 'no', 'de', 'no', 'fr', 'no', 'no', 'no', 'no', 'no', 'no', 'no', 'no', 'no', 'sv', 'no', 'no', 'no', 'sv', 'no', 'no', 'no', 'no', 'no', 'no', 'no', 'no', 'no', 'no', 'no', 'no', 'no', 'no', 'no', 'da', 'no', 'no', 'no', 'sv', 'no', 'no', 'no', 'no', 'no', 'so', 'no', 'no', 'et', 'no', 'no', 'no', 'no', 'no', 'no', 'lt', 'nl', 'en', 'sv', 'sv', 'de', 'sv', 'de', 'lt', 'de', 'lt', 'nl', 'id', 'so', 'af', 'lt', 'en', 'sv', 'nl', 'id', 'id', 'nl', 'en', 'sv', 'et', 'sv', 'af', 'nl', 'de', 'en', 'nl', 'nl', 'fi', 'nl', 'lt', 'lt', 'so', 'en', 'id', 'id', 'id', 'de', 'de', 'en', 'de', 'de', 'sv', 'sv', 'de', 'lt', 'en', 'id', 'id', 'id', 'de', 'id', 'de', 'id', 'en', 'id', 'id', 'sw', 'id', 'nl', 'id', 'da', 'de', 'de', 'sv', 'de', 'sv', 'af', 'id', 'en', 'nl', 'lt', 'lt', 'no', 'de', 'sv', 'sw', 'nl', 'lt', 'lt', 'id', 'id', 'id', 'lt', 'lt', 'id', 'nl', 'de', 'da', 'de', 'de', 'so', 'et', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'nl', 'lt', 'ro', 'af', 'af', 'en', 'pl', 'tl', 'sl', 'id', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'en', 'nl', 'ca', 'tl', 'tl', 'sv', 'de', 'tl', 'fr', 'nl', 'af', 'de', 'hr', 'id', 'so', 'da', 'tl', 'et', 'sv', 'cs', 'cy', 'sk', 'id', 'es', 'cy', 'vi', 'cs', 'cs', 'id', 'id', 'id', 'id', 'nl', 'nl', 'sv', 'nl', 'nl', 'de', 'fi', 'de', 'sv', 'en', 'lt', 'lt', 'sv', 'en', 'nl', 'sv', 'pl', 'af', 'de', 'sv', 'nl', 'lt', 'de', 'nl', 'de', 'sq', 'fi', 'nl', 'sv', 'so', 'id', 'pl', 'lt', 'sv', 'nl', 'tl', 'de', 'nl', 'de', 'de', 'de', 'lt', 'nl', 'en', 'lt', 'de', 'no', 'id', 'id', 'id', 'id', 'id', 'de', 'de', 'so', 'so', 'tl', 'id', 'so', 'et', 'so', 'sv', 'fi', 'da', 'id', 'tl', 'so', 'en', 'en', 'pl', 'de', 'da', 'en', 'nl', 'de', 'en', 'no', 'ca', 'nl', 'nl', 'lt', 'id', 'lt', 'lt', 'lt', 'lt', 'tr', 'de', 'en', 'sv', 'sv', 'sv', 'en', 'de', 'sv', 'nl', 'lt', 'en', 'sv', 'da', 'nl', 'nl', 'nl', 'nl', 'de', 'de', 'lt', 'sv', 'de', 'id', 'id', 'tl', 'so', 'fr', 'ro', 'nl', 'da', 'sv', 'sv', 'sv', 'sw', 'no', 'it', 'ro', 'af', 'af', 'en', 'de', 'ca', 'lt', 'so', 'so', 'cy', 'so', 'so', 'it', 'so', 'sv', 'tl', 'sw', 'sw', 'id', 'id', 'id', 'id', 'ca', 'en', 'da', 'ca', 'es', 'en', 'de', 'nl', 'tl', 'tl', 'tl', 'et', 'tl', 'tl', 'tl', 'nl', 'nl', 'no', 'fr', 'nl', 'de', 'sv', 'nl', 'cy', 'de', 'de', 'vi', 'de', 'lt', 'nl', 'de', 'ro', 'lt', 'sv', 'id', 'nl', 'en', 'cs', 'lt', 'lt', 'lt', 'de', 'lt', 'so', 'sv', 'no', 'id', 'pl', 'id', 'af', 'af', 'id', 'no', 'id', 'so', 'so', 'fi', 'tl', 'nl', 'tl', 'nl', 'tr', 'it', 'cy', 'no', 'so', 'no', 'tl', 'nl', 'it', 'fi', 'id', 'fr', 'fi', 'de', 'tr', 'af', 'da', 'da', 'cy', 'fr', 'no', 'sv', 'fr', 'af', 'af', 'nl', 'af', 'it', 'it', 'sk', 'da', 'fr', 'cy', 'so', 'tl', 'tr', 'id', 'sv', 'cy', 'tl', 'en', 'no', 'it', 'nl', 'ca', 'nl', 'it', 'sq', 'so', 'hr', 'tr', 'af', 'sw', 'pl', 'af', 'fr', 'no', 'en', 'so', 'cy', 'sw', 'no', 'en', 'so', 'so', 'so', 'so', 'de', 'nl', 'sw', 'vi', 'en', 'ro', 'no', 'en', 'af', 'cy', 'af', 'ca', 'so', 'ca', 'id', 'id', 'tr', 'da', 'nl', 'fr', 'cs', 'sw', 'ca', 'af', 'tr', 'tl', 'af', 'af', 'so', 'cy', 'nl', 'nl', 'cy', 'nl', 'pt', 'no', 'nl', 'sk', 'da', 'de', 'sv', 'sv', 'vi', 'sv', 'nl', 'nl', 'nl', 'nl', 'hr', 'sv', 'fr', 'ca', 'en', 'no', 'nl', 'so', 'en', 'hr', 'en', 'nl', 'sv', 'nl', 'nl', 'lt', 'tl', 'nl', 'de', 'nl', 'lt', 'af', 'sv', 'de', 'nl', 'lt', 'no', 'nl', 'so', 'hr', 'no', 'nl', 'de', 'nl', 'lt', 'en', 'lt', 'lt', 'nl', 'sv', 'sv', 'nl', 'sv', 'sv', 'nl', 'de', 'en', 'de', 'de', 'af', 'nl', 'lt', 'lt', 'de', 'de', 'sv', 'lt', 'de', 'nl', 'sv', 'sv', 'lt', 'de', 'nl', 'lt', 'de', 'de', 'sv', 'sv', 'nl', 'de', 'lt', 'nl', 'tl', 'tl', 'sv', 'nl', 'da', 'de', 'nl', 'nl', 'nl', 'de', 'sv', 'lt', 'id', 'nl', 'nl', 'af', 'sv', 'nl', 'pl', 'fr', 'nl', 'so', 'es', 'en', 'nl', 'nl', 'lt', 'sv', 'tl', 'tl', 'so', 'nl', 'tl', 'de', 'en', 'de', 'en', 'no', 'de', 'sv', 'ro', 'tr', 'af', 'so', 'so', 'tl', 'tl', 'tl', 'tl', 'id', 'af', 'tl', 'tl', 'tr', 'de', 'en', 'nl', 'de', 'nl', 'nl', 'de', 'nl', 'es', 'es', 'tl', 'so', 'da', 'de', 'lt', 'lt', 'lt', 'af', 'lt', 'et', 'es', 'es', 'es', 'de', 'de', 'lt', 'id', 'id', 'id', 'id', 'nl', 'nl', 'sv', 'tl', 'de', 'sv', 'nl', 'lt', 'de', 'nl', 'id', 'de', 'lt', 'fr', 'no', 'fr', 'fr', 'tr', 'no', 'nl', 'nl', 'id', 'no', 'lt', 'sv', 'sq', 'et', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'it', 'tl', 'es', 'es', 'ro', 'es', 'lt', 'de', 'es', 'nl', 'es', 'tl', 'nl', 'tl', 'et', 'de', 'so', 'nl', 'it', 'de', 'fi', 'fi', 'fi', 'fi', 'fi', 'fi', 'fi', 'fi', 'fi', 'fi', 'fi', 'fi', 'fi', 'fi', 'sv', 'de', 'nl', 'sl', 'cy', 'pl', 'tr', 'so', 'et', 'af', 'sv', 'af', 'en', 'lt', 'lt', 'nl', 'sv', 'nl', 'sv', 'af', 'nl', 'nl', 'nl', 'en', 'fi', 'lt', 'nl', 'sv', 'nl', 'ro', 'sv', 'sv', 'sv', 'it', 'en', 'lt', 'nl', 'no', 'tl', 'so', 'nl', 'pl', 'no', 'da', 'fr', 'id', 'so', 'fr', 'ca', 'pl', 'af', 'sw', 'id', 'fr', 'hr', 'nl', 'nl', 'en', 'fr', 'tr', 'id', 'so', 'no', 'de', 'fr', 'af', 'sl', 'de', 'it', 'lt', 'lt', 'lt', 'da', 'de', 'sv', 'de', 'sv', 'it', 'it', 'so', 'de', 'de', 'de', 'lt', 'fr', 'de', 'de', 'pt', 'es', 'en', 'da', 'da', 'fr', 'en', 'af', 'fi', 'hr', 'cy', 'de', 'fr', 'sv', 'it', 'vi', 'pl', 'de', 'da', 'no', 'sv', 'no', 'nl', 'sv', 'sv', 'de', 'nl', 'de', 'de', 'es', 'de', 'lt', 'en', 'lt', 'en', 'de', 'nl', 'nl', 'nl', 'de', 'lt', 'sv', 'de', 'de', 'de', 'en', 'id', 'fr', 'da', 'hu', 'de', 'cy', 'en', 'ca', 'lt', 'fr', 'nl', 'fr', 'et', 'so', 'so', 'da', 'nl', 'af', 'af', 'af', 'no', 'cy', 'tl', 'so', 'nl', 'pl', 'de', 'de', 'af', 'de', 'de', 'nl', 'id', 'tl', 'ro', 'af', 'af', 'lt', 'nl', 'en', 'nl', 'nl', 'de', 'de', 'de', 'en', 'fi', 'sv', 'et', 'de', 'sv', 'de', 'de', 'sv', 'nl', 'tl', 'ro', 'de', 'nl', 'nl', 'so', 'tr', 'de', 'de', 'fr', 'no', 'sw', 'en', 'tl', 'de', 'es', 'en', 'da', 'af', 'ca', 'af', 'lt', 'lt', 'lt', 'so', 'da', 'ro', 'ca', 'sl', 'tl', 'af', 'nl', 'it', 'da', 'id', 'id', 'nl', 'nl', 'id', 'id', 'id', 'it', 'fr', 'de', 'et', 'pl', 'de', 'id', 'en', 'pt', 'so', 'af', 'lt', 'nl', 'de', 'de', 'de', 'de', 'no', 'en', 'es', 'no', 'lt', 'so', 'no', 'en', 'tl', 'af', 'et', 'en', 'lt', 'en', 'sw', 'sw', 'da', 'cy', 'cy', 'cy', 'fr', 'sv', 'tr', 'af', 'tr', 'es', 'en', 'de', 'af', 'id', 'nl', 'tr', 'vi', 'en', 'so', 'nl', 'sv', 'lt', 'nl', 'de', 'id', 'id', 'id', 'id', 'de', 'de', 'en', 'lt', 'tl', 'tl', 'tl', 'so', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'af', 'fr', 'sv', 'sv', 'sv', 'de', 'tl', 'de', 'pl', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'et', 'nl', 'de', 'cs', 'de', 'lt', 'lt', 'so', 'lt', 'lt', 'et', 'nl', 'sv', 'nl', 'de', 'lt', 'de', 'de', 'de', 'lt', 'lt', 'de', 'de', 'de', 'sv', 'nl', 'de', 'nl', 'af', 'sv', 'lt', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'sv', 'sv', 'de', 'de', 'de', 'de', 'so', 'sl', 'da', 'sv', 'sv', 'et', 'da', 'af', 'et', 'id', 'da', 'af', 'nl', 'de', 'en', 'af', 'af', 'de', 'lt', 'nl', 'en', 'it', 'ro', 'nl', 'de', 'de', 'it', 'et', 'et', 'et', 'et', 'de', 'sw', 'sv', 'et', 'lt', 'lt', 'lt', 'lt', 'de', 'lt', 'nl', 'tl', 'af', 'ca', 'nl', 'pt', 'de', 'af', 'sv', 'fi', 'en', 'pt', 'da', 'da', 'de', 'da', 'nl', 'pt', 'so', 'af', 'nl', 'es', 'es', 'de', 'cy', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'id', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'nl', 'tl', 'tl', 'tl', 'tl', 'ca', 'tl', 'en', 'de', 'nl', 'id', 'de', 'de', 'lt', 'de', 'nl', 'nl', 'nl', 'sv', 'de', 'de', 'nl', 'de', 'id', 'de', 'nl', 'sv', 'lt', 'nl', 'de', 'de', 'de', 'de', 'it', 'no', 'fr', 'tl', 'sv', 'tl', 'sv', 'sv', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'da', 'de', 'de', 'lt', 'et', 'lt', 'de', 'nl', 'sv', 'de', 'nl', 'de', 'de', 'af', 'nl', 'af', 'vi', 'sv', 'fi', 'de', 'fr', 'nl', 'sl', 'nl', 'so', 'pt', 'de', 'de', 'sq', 'id', 'nl', 'lt', 'tl', 'de', 'lt', 'et', 'et', 'nl', 'es', 'es', 'es', 'lt', 'lt', 'de', 'sv', 'sv', 'sl', 'de', 'de', 'de', 'af', 'fr', 'de', 'sv', 'sv', 'no', 'cy', 'id', 'it', 'de', 'nl', 'de', 'nl', 'lt', 'et', 'pt', 'nl', 'nl', 'af', 'nl', 'nl', 'sv', 'sv', 'da', 'da', 'et', 'de', 'sv', 'id', 'nl', 'de', 'lt', 'nl', 'lt', 'de', 'de', 'af', 'no', 'sv', 'de', 'tl', 'tl', 'tl', 'so', 'nl', 'tl', 'id', 'id', 'id', 'id', 'id', 'nl', 'id', 'de', 'tl', 'id', 'sl', 'de', 'af', 'id', 'da', 'id', 'id', 'tl', 'tl', 'cs', 'de', 'de', 'sq', 'nl', 'de', 'nl', 'lt', 'af', 'da', 'id', 'sl', 'no', 'cy', 'so', 'de', 'en', 'de', 'tl', 'lt', 'nl', 'de', 'nl', 'sv', 'nl', 'de', 'de', 'nl', 'no', 'id', 'tl', 'so', 'sv', 'da', 'de', 'af', 'nl', 'tr', 'sv', 'da', 'pl', 'id', 'id', 'so', 'so', 'id', 'id', 'af', 'id', 'tl', 'id', 'en', 'en', 'af', 'en', 'nl', 'et', 'nl', 'de', 'en', 'no', 'no', 'no', 'no', 'hr', 'de', 'nl', 'nl', 'nl', 'en', 'de', 'sv', 'sl', 'it', 'lt', 'id', 'de', 'en', 'ro', 'id', 'cy', 'vi', 'tl', 'fi', 'sl', 'cy', 'de', 'pl', 'et', 'sl', 'et', 'lt', 'vi', 'sv', 'de', 'id', 'cy', 'de', 'vi', 'tl', 'id', 'sl', 'en', 'cy', 'no', 'fi', 'tl', 'so', 'so', 'so', 'it', 'de', 'so', 'so', 'es', 'nl', 'de', 'sk', 'sq', 'lt', 'cy', 'sv', 'en', 'sv', 'en', 'de', 'de', 'fr', 'da', 'so', 'no', 'lt', 'et', 'it', 'da', 'sw', 'de', 'de', 'nl', 'sv', 'sv', 'fr', 'sv', 'de', 'fr', 'lt', 'de', 'nl', 'lt', 'nl', 'nl', 'de', 'lt', 'lt', 'sv', 'nl', 'af', 'nl', 'lt', 'nl', 'sv', 'sv', 'lt', 'sv', 'de', 'af', 'sv', 'nl', 'de', 'nl', 'nl', 'en', 'nl', 'nl', 'en', 'nl', 'lt', 'lt', 'cy', 'fi', 'nl', 'nl', 'ro', 'sv', 'nl', 'id', 'lt', 'id', 'lt', 'sl', 'sv', 'nl', 'tl', 'id', 'tl', 'tl', 'vi', 'nl', 'en', 'no', 'nl', 'so', 'lt', 'de', 'de', 'lt', 'lt', 'fi', 'de', 'nl', 'da', 'it', 'ca', 'sv', 'sv', 'de', 'sl', 'id', 'id', 'id', 'id', 'id', 'sv', 'ro', 'nl', 'id', 'tl', 'sv', 'en', 'de', 'sv', 'pt', 'af', 'da', 'lt', 'nl', 'sv', 'no', 'af', 'sv', 'de', 'nl', 'de', 'de', 'de', 'de', 'de', 'vi', 'ro', 'de', 'lt', 'hu', 'vi', 'de', 'de', 'pt', 'hu', 'de', 'de', 'de', 'hr', 'de', 'vi', 'de', 'de', 'de', 'vi', 'de', 'so', 'so', 'de', 'so', 'vi', 'pt', 'so', 'vi', 'de', 'de', 'hu', 'de', 'de', 'hu', 'de', 'pt', 'de', 'de', 'de', 'de', 'de', 'fr', 'de', 'de', 'en', 'de', 'ca', 'de', 'de', 'de', 'de', 'de', 'de', 'vi', 'vi', 'vi', 'de', 'de', 'de', 'de', 'cy', 'de', 'nl', 'de', 'de', 'de', 'so', 'cy', 'da', 'sv', 'tl', 'nl', 'es', 'et', 'af', 'fi', 'lt', 'lt', 'so', 'it', 'af', 'af', 'fr', 'es', 'tl', 'tl', 'tl', 'de', 'de', 'lt', 'en', 'nl', 'lt', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'nl', 'cy', 'cy', 'fr', 'sl', 'so', 'so', 'cy', 'lt', 'ro', 'fi', 'no', 'id', 'it', 'cy', 'et', 'et', 'id', 'tl', 'so', 'fr', 'et', 'it', 'fr', 'cs', 'fr', 'sv', 'nl', 'it', 'hr', 'ro', 'nl', 'es', 'fr', 'sv', 'sv', 'it', 'en', 'hr', 'lt', 'lt', 'lt', 'es', 'es', 'fr', 'da', 'af', 'sw', 'cs', 'id', 'cy', 'no', 'de', 'ro', 'no', 'pl', 'nl', 'ro', 'en', 'id', 'id', 'id', 'af', 'nl', 'af', 'de', 'en', 'nl', 'et', 'nl', 'de', 'lt', 'en', 'de', 'af', 'nl', 'de', 'nl', 'de', 'af', 'nl', 'no', 'de', 'so', 'sv', 'so', 'fi', 'sw', 'sw', 'id', 'lt', 'nl', 'nl', 'sv', 'de', 'af', 'nl', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'pt', 'sv', 'de', 'so', 'de', 'et', 'da', 'id', 'id', 'nl', 'da', 'sv', 'sv', 'hu', 'sv', 'sv', 'de', 'sv', 'lv', 'id', 'no', 'sv', 'de', 'af', 'ro', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'en', 'nl', 'de', 'de', 'nl', 'de', 'de', 'de', 'sq', 'id', 'sq', 'id', 'lt', 'lt', 'af', 'ro', 'sv', 'sv', 'et', 'ro', 'ro', 'ro', 'sl', 'fr', 'tr', 'ro', 'et', 'sv', 'de', 'sv', 'sw', 'fr', 'id', 'fi', 'so', 'id', 'id', 'so', 'en', 'tl', 'tl', 'tl', 'nl', 'tl', 'tl', 'tl', 'so', 'tl', 'fr', 'sq', 'nl', 'nl', 'fr', 'af', 'tl', 'da', 'so', 'lt', 'en', 'af', 'sv', 'nl', 'lt', 'nl', 'nl', 'de', 'de', 'de', 'de', 'id', 'id', 'af', 'en', 'cs', 'ca', 'af', 'nl', 'ro', 'de', 'de', 'af', 'et', 'it', 'tl', 'en', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'lt', 'tl', 'lt', 'no', 'so', 'fi', 'fi', 'so', 'sv', 'de', 'tl', 'de', 'sw', 'sw', 'tl', 'hr', 'so', 'cy', 'sw', 'de', 'et', 'it', 'nl', 'nl', 'de', 'nl', 'ca', 'tl', 'tl', 'it', 'en', 'fr', 'tl', 'de', 'sv', 'nl', 'de', 'de', 'nl', 'af', 'so', 'nl', 'sv', 'af', 'nl', 'lt', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'tl', 'sv', 'so', 'tr', 'pl', 'sw', 'hu', 'af', 'ca', 'vi', 'de', 'af', 'af', 'cy', 'tl', 'ca', 'sq', 'fi', 'af', 'no', 'de', 'et', 'pl', 'vi', 'da', 'so', 'nl', 'it', 'it', 'nl', 'nl', 'en', 'en', 'ca', 'nl', 'af', 'cy', 'it', 'en', 'so', 'af', 'tr', 'nl', 'pl', 'nl', 'so', 'no', 'so', 'no', 'sw', 'en', 'so', 'cy', 'no', 'af', 'sv', 'et', 'pl', 'it', 'pl', 'es', 'fr', 'en', 'sl', 'de', 'cy', 'no', 'tl', 'pl', 'vi', 'no', 'nl', 'ro', 'no', 'af', 'fr', 'sv', 'pl', 'fr', 'af', 'da', 'sl', 'pt', 'cy', 'cy', 'tr', 'de', 'so', 'cy', 'nl', 'tl', 'tl', 'id', 'lt', 'nl', 'fr', 'it', 'en', 'tl', 'id', 'nl', 'af', 'so', 'af', 'lt', 'hu', 'lt', 'da', 'tl', 'no', 'no', 'so', 'no', 'de', 'de', 'en', 'pl', 'vi', 'en', 'fi', 'no', 'fr', 'sk', 'sk', 'af', 'en', 'it', 'cy', 'cs', 'af', 'da', 'sl', 'cy', 'cy', 'no', 'so', 'af', 'sv', 'en', 'hr', 'af', 'no', 'af', 'da', 'da', 'so', 'af', 'tr', 'sv', 'no', 'no', 'nl', 'sw', 'tl', 'so', 'tr', 'cy', 'da', 'tr', 'nl', 'cy', 'af', 'so', 'af', 'cy', 'no', 'id', 'hr', 'so', 'fr', 'hr', 'hr', 'en', 'af', 'so', 'sq', 'vi', 'fr', 'nl', 'af', 'tr', 'tl', 'nl', 'de', 'de', 'sv', 'nl', 'en', 'nl', 'de', 'fr', 'id', 'sv', 'de', 'nl', 'tl', 'id', 'et', 'nl', 'sv', 'lt', 'fi', 'nl', 'de', 'af', 'nl', 'af', 'id', 'en', 'sv', 'ro', 'ro', 'nl', 'sv', 'so', 'tl', 'sv', 'af', 'et', 'tl', 'sv', 'nl', 'en', 'sv', 'af', 'et', 'sw', 'et', 'af', 'af', 'sk', 'ro', 'sq', 'id', 'af', 'et', 'cy', 'no', 'so', 'pl', 'pl', 'nl', 'sv', 'it', 'sw', 'tr', 'et', 'sl', 'so', 'sv', 'de', 'de', 'de', 'sw', 'ro', 'fr', 'fr', 'da', 'so', 'nl', 'tl', 'no', 'it', 'af', 'tl', 'pl', 'ro', 'nl', 'cy', 'en', 'es', 'en', 'hr', 'pl', 'sw', 'fr', 'tr', 'ro', 'hr', 'da', 'et', 'vi', 'af', 'nl', 'af', 'fr', 'fr', 'so', 'fr', 'fr', 'fr', 'cy', 'sq', 'sv', 'fr', 'fr', 'pl', 'tr', 'so', 'hr', 'fr', 'tl', 'et', 'es', 'de', 'et', 'af', 'vi', 'nl', 'vi', 'so', 'so', 'cy', 'fr', 'sl', 'ca', 'fr', 'en', 'af', 'fi', 'so', 'it', 'it', 'et', 'tr', 'es', 'tr', 'fr', 'fr', 'tl', 'es', 'de', 'af', 'sk', 'so', 'it', 'pt', 'es', 'es', 'de', 'fr', 'fr', 'de', 'de', 'pl', 'af', 'nl', 'es', 'en', 'lt', 'sv', 'nl', 'de', 'tl', 'tl', 'sv', 'lt', 'lt', 'af', 'so', 'de', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'es', 'nl', 'id', 'lt', 'da', 'nl', 'fr', 'hu', 'fr', 'pt', 'fi', 'hr', 'lt', 'fr', 'nl', 'de', 'ca', 'da', 'tr', 'lt', 'nl', 'ca', 'lt', 'de', 'lt', 'lt', 'so', 'fr', 'lt', 'sk', 'lt', 'nl', 'tl', 'fr', 'en', 'fr', 'tr', 'en', 'lt', 'es', 'sv', 'no', 'de', 'af', 'af', 'de', 'it', 'af', 'de', 'sv', 'id', 'lt', 'de', 'nl', 'en', 'nl', 'no', 'lt', 'it', 'en', 'vi', 'es', 'id', 'id', 'id', 'id', 'id', 'id', 'vi', 'de', 'lt', 'lt', 'lt', 'lt', 'en', 'de', 'fi', 'de', 'nl', 'lt', 'fr', 'nl', 'fr', 'nl', 'nl', 'et', 'en', 'lt', 'id', 'ro', 'lt', 'so', 'cy', 'id', 'no', 'pt', 'sk', 'da', 'pl', 'da', 'en', 'en', 'hr', 'en', 'nl', 'nl', 'nl', 'fr', 'fr', 'nl', 'en', 'lt', 'nl', 'de', 'de', 'lt', 'de', 'nl', 'fi', 'tl', 'nl', 'cy', 'de', 'de', 'cy', 'da', 'et', 'no', 'et', 'tl', 'de', 'fr', 'de', 'ro', 'de', 'af', 'af', 'af', 'af', 'en', 'no', 'sv', 'en', 'lt', 'lt', 'de', 'sv', 'nl', 'sv', 'lt', 'nl', 'de', 'nl', 'de', 'de', 'sv', 'nl', 'de', 'lt', 'es', 'af', 'es', 'de', 'es', 'de', 'de', 'tl', 'sv', 'lt', 'it', 'lt', 'en', 'lt', 'tl', 'it', 'lt', 'en', 'ca', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'lt', 'nl', 'fr', 'so', 'de', 'nl', 'so', 'tl', 'nl', 'sl', 'tl', 'tl', 'sv', 'lt', 'lt', 'pl', 'lt', 'sl', 'nl', 'sv', 'et', 'nl', 'af', 'fr', 'fr', 'de', 'it', 'af', 'de', 'de', 'de', 'de', 'nl', 'de', 'de', 'id', 'id', 'id', 'id', 'sv', 'so', 'cy', 'tl', 'fr', 'it', 'en', 'sw', 'nl', 'id', 'id', 'id', 'id', 'tl', 'lt', 'fi', 'lt', 'no', 'it', 'nl', 'ro', 'it', 'so', 'sk', 'lt', 'et', 'en', 'nl', 'nl', 'nl', 'de', 'lt', 'nl', 'vi', 'sw', 'tl', 'de', 'de', 'lt', 'nl', 'sv', 'nl', 'nl', 'af', 'ro', 'fr', 'en', 'tl', 'en', 'nl', 'en', 'no', 'pt', 'sv', 'pt', 'af', 'nl', 'tl', 'sv', 'sv', 'lt', 'af', 'lt', 'pl', 'af', 'af', 'af', 'nl', 'de', 'de', 'nl', 'no', 'de', 'lt', 'nl', 'en', 'da', 'tl', 'hu', 'nl', 'af', 'so', 'lt', 'nl', 'de', 'de', 'lt', 'lt', 'da', 'lt', 'ro', 'es', 'nl', 'fr', 'lt', 'de', 'af', 'de', 'tl', 'lt', 'lt', 'lt', 'et', 'id', 'de', 'de', 'de', 'sv', 'de', 'de', 'de', 'fr', 'lt', 'de', 'nl', 'de', 'sv', 'so', 'id', 'ro', 'lt', 'sv', 'id', 'nl', 'id', 'id', 'so', 'af', 'hr', 'id', 'ro', 'tr', 'it', 'et', 'sl', 'tl', 'no', 'so', 'tl', 'sv', 'nl', 'nl', 'nl', 'sv', 'nl', 'de', 'sv', 'nl', 'nl', 'de', 'de', 'so', 'nl', 'sv', 'nl', 'de', 'de', 'fi', 'lt', 'de', 'en', 'nl', 'fi', 'tl', 'de', 'fi', 'en', 'sv', 'de', 'sv', 'de', 'et', 'so', 'en', 'nl', 'nl', 'sw', 'id', 'fi', 'sv', 'af', 'af', 'nl', 'de', 'de', 'en', 'lt', 'de', 'fr', 'it', 'fr', 'fi', 'fr', 'fr', 'ca', 'es', 'fr', 'lv', 'et', 'so', 'hr', 'en', 'sq', 'tr', 'so', 'fr', 'af', 'no', 'no', 'nl', 'de', 'cs', 'et', 'da', 'de', 'de', 'lt', 'sv', 'lt', 'sv', 'sv', 'sv', 'de', 'sv', 'lt', 'hr', 'fr', 'de', 'lt', 'tl', 'sq', 'nl', 'it', 'no', 'da', 'so', 'lt', 'nl', 'nl', 'en', 'id', 'no', 'vi', 'tl', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'af', 'nl', 'id', 'nl', 'nl', 'lt', 'de', 'lt', 'af', 'de', 'de', 'de', 'de', 'de', 'nl', 'de', 'so', 'nl', 'id', 'tl', 'de', 'de', 'de', 'en', 'de', 'de', 'en', 'tl', 'tl', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'de', 'id', 'de', 'de', 'de', 'de', 'de', 'id', 'de', 'de', 'en', 'de', 'id', 'de', 'de', 'de', 'de', 'nl', 'de', 'nl', 'id', 'tl', 'id', 'de', 'de', 'fi', 'ro', 'af', 'af']\n"
     ]
    }
   ],
   "source": [
    "for i in indexes,non_eng:\n",
    "  print(\"the index number {}\".format(i))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "9z3ZqRh-ML15",
    "outputId": "3ea766ad-4b63-4af6-90d0-b6f92de255b1"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 25199/25199 [59:49<00:00,  7.02it/s]\n"
     ]
    }
   ],
   "source": [
    "# dropping these non-eng datapoints\n",
    "for i in tqdm(indexes):\n",
    "  df1.drop(i,axis=0,inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "uuhB66icffif"
   },
   "outputs": [],
   "source": [
    "df1.reset_index(drop= True,inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 548
    },
    "id": "cBYKMjUBr2RD",
    "outputId": "c723e75e-8990-40fb-9d41-c57acbe5ea7a"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-381249a4-52f6-4152-9780-a615087fd5a0\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>topic</th>\n",
       "      <th>sign</th>\n",
       "      <th>date</th>\n",
       "      <th>text</th>\n",
       "      <th>cleaned_text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>651394</th>\n",
       "      <td>1713845</td>\n",
       "      <td>male</td>\n",
       "      <td>20s</td>\n",
       "      <td>Student</td>\n",
       "      <td>Taurus</td>\n",
       "      <td>01,July,2004</td>\n",
       "      <td>Dear Susan,  I could write some really ...</td>\n",
       "      <td>Dear Susan I could write some really bitter di...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>651395</th>\n",
       "      <td>1713845</td>\n",
       "      <td>male</td>\n",
       "      <td>20s</td>\n",
       "      <td>Student</td>\n",
       "      <td>Taurus</td>\n",
       "      <td>01,July,2004</td>\n",
       "      <td>Dear Susan,  'I have the second yeast i...</td>\n",
       "      <td>Dear Susan I have the second yeast infection i...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>651396</th>\n",
       "      <td>1713845</td>\n",
       "      <td>male</td>\n",
       "      <td>20s</td>\n",
       "      <td>Student</td>\n",
       "      <td>Taurus</td>\n",
       "      <td>01,July,2004</td>\n",
       "      <td>Dear Susan,  Your 'boyfriend' is fuckin...</td>\n",
       "      <td>Dear Susan Your boyfriend is fucking BALD Good...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>651397</th>\n",
       "      <td>1713845</td>\n",
       "      <td>male</td>\n",
       "      <td>20s</td>\n",
       "      <td>Student</td>\n",
       "      <td>Taurus</td>\n",
       "      <td>01,July,2004</td>\n",
       "      <td>Dear Susan:    Just to clarify, I am as...</td>\n",
       "      <td>Dear Susan Just to clarify I am asking you to ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>651398</th>\n",
       "      <td>1713845</td>\n",
       "      <td>male</td>\n",
       "      <td>20s</td>\n",
       "      <td>Student</td>\n",
       "      <td>Taurus</td>\n",
       "      <td>01,July,2004</td>\n",
       "      <td>Hey everybody...and Susan,  You might a...</td>\n",
       "      <td>Hey everybodyand Susan You might already know ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-381249a4-52f6-4152-9780-a615087fd5a0')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-381249a4-52f6-4152-9780-a615087fd5a0 button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-381249a4-52f6-4152-9780-a615087fd5a0');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "             id gender  age    topic    sign          date  \\\n",
       "651394  1713845   male  20s  Student  Taurus  01,July,2004   \n",
       "651395  1713845   male  20s  Student  Taurus  01,July,2004   \n",
       "651396  1713845   male  20s  Student  Taurus  01,July,2004   \n",
       "651397  1713845   male  20s  Student  Taurus  01,July,2004   \n",
       "651398  1713845   male  20s  Student  Taurus  01,July,2004   \n",
       "\n",
       "                                                     text  \\\n",
       "651394         Dear Susan,  I could write some really ...   \n",
       "651395         Dear Susan,  'I have the second yeast i...   \n",
       "651396         Dear Susan,  Your 'boyfriend' is fuckin...   \n",
       "651397         Dear Susan:    Just to clarify, I am as...   \n",
       "651398         Hey everybody...and Susan,  You might a...   \n",
       "\n",
       "                                             cleaned_text  \n",
       "651394  Dear Susan I could write some really bitter di...  \n",
       "651395  Dear Susan I have the second yeast infection i...  \n",
       "651396  Dear Susan Your boyfriend is fucking BALD Good...  \n",
       "651397  Dear Susan Just to clarify I am asking you to ...  \n",
       "651398  Hey everybodyand Susan You might already know ...  "
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "sOdlrKcC8V6K"
   },
   "outputs": [],
   "source": [
    "#saving the dataframe for future use and computational complexity\n",
    "df1.to_csv(\"en-df.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "GyoPR4p8hHa3",
    "outputId": "2dfb026c-41be-4ae8-bc46-4e8cd98764e9"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mounted at /content/drive\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from google.colab import drive\n",
    "drive.mount('/content/drive')\n",
    "import os\n",
    "os.chdir('/content/drive/My Drive/NLP/')\n",
    "df1 = pd.read_csv('en-df.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "dsJQHuFkfr9r"
   },
   "outputs": [],
   "source": [
    "df1.drop(['id','gender','date'],axis=1,inplace = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "I2-auig5i5YT"
   },
   "source": [
    "## 2. Preprocess unstructured data to make it consumable for model training.\n",
    "\n",
    "## Part A - Q2 A - Eliminate All special Characters and Numbers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "MLwevI0Hiuup"
   },
   "outputs": [],
   "source": [
    "from tqdm import tqdm\n",
    "import re"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "Wyf4sRE_Hp_l",
    "outputId": "16cbf442-bf37-48c9-adf8-1fd97bb76e7e"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Unnamed: 0         0\n",
       "age                0\n",
       "topic              0\n",
       "sign               0\n",
       "text               0\n",
       "cleaned_text    2578\n",
       "dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "z0ild4CoHyCw"
   },
   "outputs": [],
   "source": [
    "df1.dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "C5S46lF3H_bI"
   },
   "outputs": [],
   "source": [
    "df1.reset_index(drop= True,inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "mBJERYBai_5t"
   },
   "outputs": [],
   "source": [
    "df1['cleaned_text'] = df1['cleaned_text'].astype('str')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "FOttI7i8sir8",
    "outputId": "a1640201-68bd-458a-c14c-dbf868130423"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 648821/648821 [01:19<00:00, 8136.26it/s]\n"
     ]
    }
   ],
   "source": [
    "# defining an empty list\n",
    "text = []\n",
    "\n",
    "# Specifying the pattern for regex to match a string of characters that are not a letters or numbers \n",
    "# regex will look for alphabets A to Z, a to z\n",
    "pattern = '[^A-Za-z]'\n",
    "\n",
    "# looping over each message in the data\n",
    "for i in tqdm(range(df1.shape[0])):\n",
    "\n",
    "    words = df1['cleaned_text'][i].split() # splitting text into separate words\n",
    "    new_text = ''.join(re.sub(pattern, ' ', df1['cleaned_text'][i])) # finding the pattern and using the join() function to retrive the original text\n",
    "    text.append(new_text) # append the new_text to empty list text\n",
    "    \n",
    "df1['cleaned_text'] = text"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "4vNxwG-8JB8D"
   },
   "source": [
    "## Part A - Q2 B - Lowercase all textual data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "iucB7KElI6CH",
    "outputId": "7d8b4e9e-4268-47f0-ba77-84f1cec28f8e"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 648821/648821 [00:04<00:00, 156159.58it/s]\n"
     ]
    }
   ],
   "source": [
    "# defining an empty list\n",
    "text = []\n",
    "\n",
    "# looping over each message in the data\n",
    "for i in tqdm(range(df1.shape[0])):\n",
    "    # lowecasing the text using the lower() function\n",
    "    new_text = df1['cleaned_text'][i].lower()\n",
    "    text.append(new_text) # append the new_text to empty list text\n",
    "\n",
    "df1['cleaned_text'] = text"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "OLM3ck6-Jb-5"
   },
   "source": [
    "## Part A - Q2 C - Remove all Stopwords"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "qH4MTOhEJrvg",
    "outputId": "a0238a9d-66e9-4961-87c6-7aa7e567dea1"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
      "[nltk_data]   Unzipping corpora/stopwords.zip.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import nltk\n",
    "nltk.download('stopwords')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "o9_hIihRJVfS",
    "outputId": "350ff857-12e2-4da4-8459-81808886dd16"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 648821/648821 [3:30:53<00:00, 51.27it/s] \n"
     ]
    }
   ],
   "source": [
    "# defining an empty list\n",
    "text = []\n",
    "\n",
    "for i in tqdm(range(df1.shape[0])):\n",
    "    \n",
    "    word = df1['cleaned_text'][i].split() # splitting text into separate words \n",
    "    # removing the english language stopwords from the messages\n",
    "    new_text = [w for w in word if not w in stopwords.words('english')] \n",
    "    new_text = ' '.join(new_text) #retriving the original text\n",
    "    text.append(new_text) # \n",
    "    \n",
    "df1['cleaned_text'] = text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "ejdMvnlR8m_9"
   },
   "outputs": [],
   "source": [
    "# saving these dataframe \n",
    "df1.to_csv('stop_w_df.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "AZNZ8daofmb_"
   },
   "outputs": [],
   "source": [
    "df1 = pd.read_csv('stop_w_df.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "xCn8PSXyLiDm"
   },
   "source": [
    "## Part A - Q2 D - Remove all extra white spaces"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "Y0JHNK8ugA5r"
   },
   "outputs": [],
   "source": [
    "df1['cleaned_text'] = df1['cleaned_text'].astype('str')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "WLphuckYLghH",
    "outputId": "a3c479ae-7537-4cba-dd05-32972dda70af"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 648821/648821 [00:04<00:00, 151047.62it/s]\n"
     ]
    }
   ],
   "source": [
    "# defining an empty list\n",
    "text = []\n",
    "\n",
    "# looping over each message in the data\n",
    "for i in tqdm(range(df1.shape[0])):\n",
    "    # removing extra spaces from the text using strip() function\n",
    "    new_text = df1['cleaned_text'][i].strip() \n",
    "    text.append(new_text)  # append the new_text to empty list text\n",
    "    \n",
    "df1['cleaned_text'] = text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 365
    },
    "id": "0GsVyDVVMtBo",
    "outputId": "686e1fc0-da57-49c3-c15b-6dea73f9285a"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.google.colaboratory.intrinsic+json": {
       "type": "string"
      },
      "text/plain": [
       "\"             Why did I remember that I had a Blogger account from  2 or 3 years ago all of a sudden? Not really sure...but might as well use it since I'm bored right now.  For anyone that's reading this and doesn't know who I am, I'm not entirely sure why you're here, but feel free to keep reading. My name is Jeff Guebert (my last name is where the title of my blog comes from, courtesy of one of my friends about 10 years ago), I'm 17, and I live in Dallas. There, you know me now.  I'll probably get around to writing a more interesting (and longer) post tomorrow. For now, though, it's time to go to sleep...         \""
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1['text'][800]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 209
    },
    "id": "ykxdl2xhOCV3",
    "outputId": "4f7447f0-a6b7-4ad5-8b5e-66764c280a60"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.google.colaboratory.intrinsic+json": {
       "type": "string"
      },
      "text/plain": [
       "'remember blogger account years ago sudden really surebut might well use since bored right anyone reading know entirely sure feel free keep reading name jeff guebert last name title blog comes courtesy one friends years ago live dallas know probably get around writing interesting longer post tomorrow though time go sleep'"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1['cleaned_text'][800]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 365
    },
    "id": "ru6Ata4gO185",
    "outputId": "882285f2-9157-440a-820b-104a204cee1d"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.google.colaboratory.intrinsic+json": {
       "type": "string"
      },
      "text/plain": [
       "\"       I have ceased to care and I'm adopting an casually-indifferent attitude to this shit. For some reason, I figured that it's worse than being annoyed or pissed off. At least if I was frustrated, it'd show I still cared about it. Sure it's a step down from being happy but hey, better some care than don't care right?  I guess I still DO care. Even that tiny teensy little wee bit. Or enough for me to bother asking 'Why the fuck do I bother anymore'  And to those of you who are going to ask me 'What happened?', nothing did. Nothing in particular happened. I just can't be fucked anymore.         \""
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1['text'][10001]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 209
    },
    "id": "4KXCdPP7RAvy",
    "outputId": "74a55923-deca-43a4-aa5a-0cddc5527156"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.google.colaboratory.intrinsic+json": {
       "type": "string"
      },
      "text/plain": [
       "'ceased care adopting casuallyindifferent attitude shit reason figured worse annoyed pissed least frustrated would show still cared sure step happy hey better care care right guess still care even tiny teensy little wee bit enough bother asking fuck bother anymore going ask happened nothing nothing particular happened cannot fucked anymore'"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1['cleaned_text'][10001]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "7Ymbt5JZi9s0",
    "outputId": "64bd81c2-6b6d-4a36-9481-03a6c229a04f"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
      "[nltk_data]   Unzipping corpora/stopwords.zip.\n",
      "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
      "[nltk_data]   Unzipping tokenizers/punkt.zip.\n",
      "[nltk_data] Downloading package omw-1.4 to /root/nltk_data...\n",
      "[nltk_data] Downloading package wordnet to /root/nltk_data...\n"
     ]
    }
   ],
   "source": [
    "# Importing the NLTK library\n",
    "import nltk\n",
    "\n",
    "nltk.download('stopwords')    # Loading the stopwords\n",
    "nltk.download('punkt')        # Loading the punkt module, used in Tokenization\n",
    "nltk.download('omw-1.4')      # Dependency for Tokenization\n",
    "nltk.download('wordnet')      # Loading the wordnet module, used in stemming and lemmatization\n",
    "\n",
    "from nltk.corpus import stopwords\n",
    "\n",
    "# Helps to visualize the wordcloud\n",
    "from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n",
    "\n",
    "# Used in Stemming\n",
    "from nltk.stem.porter import PorterStemmer\n",
    "from nltk.stem import SnowballStemmer\n",
    "\n",
    "# Used in Lemmatization\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "\n",
    "# Used in Tokenization\n",
    "from nltk.tokenize import word_tokenize, sent_tokenize"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "_cPGR8Kx3Zl6",
    "outputId": "859370b2-bb57-460e-dd19-52a6bc714391"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 648821/648821 [22:50<00:00, 473.47it/s]\n"
     ]
    }
   ],
   "source": [
    "# Initializing the Porter Stemmer\n",
    "ps = PorterStemmer()\n",
    "\n",
    "# defining empty list for porter stemmer output\n",
    "porter_stems = []\n",
    "\n",
    "# looping over each message in the data\n",
    "for i in tqdm(range(df1.shape[0])):\n",
    "  text = df1['cleaned_text'][i].split() # splitting text into separate words \n",
    "  new_text = [ps.stem(word) for word in text] # applying the porter stemmer on every word of a mesaage\n",
    "  new_text = ' '.join(new_text)#retriving the original text\n",
    "  porter_stems.append(new_text) # append the text with base form of words in a message to empty list text\n",
    "    \n",
    "df1['port_cleaned_text'] = porter_stems"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 663
    },
    "id": "rZNtg0c34gls",
    "outputId": "49646476-f4df-4a0f-8b8d-621a3bb30b8d"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-e5e2d2a9-b619-417c-8858-28ca8c1fc5f4\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cleaned_text</th>\n",
       "      <th>port_cleaned_text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>info found pages mb pdf files wait untill team...</td>\n",
       "      <td>info found page mb pdf file wait until team le...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>het kader van kernfusie op aarde maak je eigen...</td>\n",
       "      <td>het kader van kernfusi op aard maak je eigen w...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>testing testing</td>\n",
       "      <td>test test</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>thanks yahoos toolbar capture urls popupswhich...</td>\n",
       "      <td>thank yahoo toolbar captur url popupswhich mea...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>interesting conversation dad morning talking k...</td>\n",
       "      <td>interest convers dad morn talk korean put mone...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>somehow cocacola way summing things well early...</td>\n",
       "      <td>somehow cocacola way sum thing well earli flag...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>anything korea country extremes everything see...</td>\n",
       "      <td>anyth korea countri extrem everyth seem fadbas...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e5e2d2a9-b619-417c-8858-28ca8c1fc5f4')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-e5e2d2a9-b619-417c-8858-28ca8c1fc5f4 button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-e5e2d2a9-b619-417c-8858-28ca8c1fc5f4');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "                                        cleaned_text  \\\n",
       "0  info found pages mb pdf files wait untill team...   \n",
       "1  het kader van kernfusie op aarde maak je eigen...   \n",
       "2                                    testing testing   \n",
       "3  thanks yahoos toolbar capture urls popupswhich...   \n",
       "4  interesting conversation dad morning talking k...   \n",
       "5  somehow cocacola way summing things well early...   \n",
       "6  anything korea country extremes everything see...   \n",
       "\n",
       "                                   port_cleaned_text  \n",
       "0  info found page mb pdf file wait until team le...  \n",
       "1  het kader van kernfusi op aard maak je eigen w...  \n",
       "2                                          test test  \n",
       "3  thank yahoo toolbar captur url popupswhich mea...  \n",
       "4  interest convers dad morn talk korean put mone...  \n",
       "5  somehow cocacola way sum thing well earli flag...  \n",
       "6  anyth korea countri extrem everyth seem fadbas...  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.loc[:6,['cleaned_text','port_cleaned_text']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "iMH3NYXulYpH",
    "outputId": "e87b7bbb-4458-406e-e5f5-42cf8f61d02e"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 648821/648821 [14:09<00:00, 764.04it/s]\n"
     ]
    }
   ],
   "source": [
    "# Initializing the snowball Stemmer\n",
    "snowball = SnowballStemmer(language='english')\n",
    "\n",
    "# defining empty list for porter stemmer output\n",
    "snow_stems = []\n",
    "\n",
    "# looping over each message in the data\n",
    "for i in tqdm(range(df1.shape[0])):\n",
    "  text = df1['cleaned_text'][i].split() # splitting text into separate words \n",
    "  new_text = [snowball.stem(word) for word in text] # applying the porter stemmer on every word of a mesaage\n",
    "  new_text = ' '.join(new_text)#retriving the original text\n",
    "  snow_stems.append(new_text) # append the text with base form of words in a message to empty list text\n",
    "    \n",
    "df1['snow_cleaned_text'] = snow_stems"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 663
    },
    "id": "Jo9_62u8mHzD",
    "outputId": "11c497bc-7a61-453a-8975-7308ab2d27af"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-7eb920fd-54b7-40fb-a0b9-a866728cf61d\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cleaned_text</th>\n",
       "      <th>snow_cleaned_text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>info found pages mb pdf files wait untill team...</td>\n",
       "      <td>info found page mb pdf file wait until team le...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>het kader van kernfusie op aarde maak je eigen...</td>\n",
       "      <td>het kader van kernfusi op aard maak je eigen w...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>testing testing</td>\n",
       "      <td>test test</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>thanks yahoos toolbar capture urls popupswhich...</td>\n",
       "      <td>thank yahoo toolbar captur url popupswhich mea...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>interesting conversation dad morning talking k...</td>\n",
       "      <td>interest convers dad morn talk korean put mone...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>somehow cocacola way summing things well early...</td>\n",
       "      <td>somehow cocacola way sum thing well earli flag...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>anything korea country extremes everything see...</td>\n",
       "      <td>anyth korea countri extrem everyth seem fadbas...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7eb920fd-54b7-40fb-a0b9-a866728cf61d')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-7eb920fd-54b7-40fb-a0b9-a866728cf61d button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-7eb920fd-54b7-40fb-a0b9-a866728cf61d');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "                                        cleaned_text  \\\n",
       "0  info found pages mb pdf files wait untill team...   \n",
       "1  het kader van kernfusie op aarde maak je eigen...   \n",
       "2                                    testing testing   \n",
       "3  thanks yahoos toolbar capture urls popupswhich...   \n",
       "4  interesting conversation dad morning talking k...   \n",
       "5  somehow cocacola way summing things well early...   \n",
       "6  anything korea country extremes everything see...   \n",
       "\n",
       "                                   snow_cleaned_text  \n",
       "0  info found page mb pdf file wait until team le...  \n",
       "1  het kader van kernfusi op aard maak je eigen w...  \n",
       "2                                          test test  \n",
       "3  thank yahoo toolbar captur url popupswhich mea...  \n",
       "4  interest convers dad morn talk korean put mone...  \n",
       "5  somehow cocacola way sum thing well earli flag...  \n",
       "6  anyth korea countri extrem everyth seem fadbas...  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.loc[:6,['cleaned_text','snow_cleaned_text']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "iieB9EEu3ZWF",
    "outputId": "82193136-fbeb-44c5-b374-d422928c140e"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 648821/648821 [04:06<00:00, 2635.14it/s]\n"
     ]
    }
   ],
   "source": [
    "# initiating Lemmatizer available in NLTK library\n",
    "lemmatizer = WordNetLemmatizer()\n",
    "\n",
    "# defining empty list for lemmatizer output\n",
    "lemma = []\n",
    "\n",
    "# looping over each message in the data\n",
    "for i in tqdm(range(df1.shape[0])):\n",
    "  text = df1['cleaned_text'][i].split()  # splitting text into separate words \n",
    "  new_text = [lemmatizer.lemmatize(word) for word in text] # perfoming lemmatization on every word of a mesaage\n",
    "  new_text = ' '.join(new_text) #retriving the original text\n",
    "  lemma.append(new_text) # append the text with base form of words in a message to empty list text\n",
    "\n",
    "df1['lem_cleaned_text'] = lemma"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 663
    },
    "id": "d-H-NtIL4oes",
    "outputId": "5d1f9610-462d-4f52-ed2f-9f4e9404c2cf"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-9545da0b-0cb0-413d-a7a7-518ec3f10f09\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cleaned_text</th>\n",
       "      <th>lem_cleaned_text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>info found pages mb pdf files wait untill team...</td>\n",
       "      <td>info found page mb pdf file wait untill team l...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>het kader van kernfusie op aarde maak je eigen...</td>\n",
       "      <td>het kader van kernfusie op aarde maak je eigen...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>testing testing</td>\n",
       "      <td>testing testing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>thanks yahoos toolbar capture urls popupswhich...</td>\n",
       "      <td>thanks yahoo toolbar capture url popupswhich m...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>interesting conversation dad morning talking k...</td>\n",
       "      <td>interesting conversation dad morning talking k...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>somehow cocacola way summing things well early...</td>\n",
       "      <td>somehow cocacola way summing thing well early ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>anything korea country extremes everything see...</td>\n",
       "      <td>anything korea country extreme everything seem...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9545da0b-0cb0-413d-a7a7-518ec3f10f09')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-9545da0b-0cb0-413d-a7a7-518ec3f10f09 button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-9545da0b-0cb0-413d-a7a7-518ec3f10f09');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "                                        cleaned_text  \\\n",
       "0  info found pages mb pdf files wait untill team...   \n",
       "1  het kader van kernfusie op aarde maak je eigen...   \n",
       "2                                    testing testing   \n",
       "3  thanks yahoos toolbar capture urls popupswhich...   \n",
       "4  interesting conversation dad morning talking k...   \n",
       "5  somehow cocacola way summing things well early...   \n",
       "6  anything korea country extremes everything see...   \n",
       "\n",
       "                                    lem_cleaned_text  \n",
       "0  info found page mb pdf file wait untill team l...  \n",
       "1  het kader van kernfusie op aarde maak je eigen...  \n",
       "2                                    testing testing  \n",
       "3  thanks yahoo toolbar capture url popupswhich m...  \n",
       "4  interesting conversation dad morning talking k...  \n",
       "5  somehow cocacola way summing thing well early ...  \n",
       "6  anything korea country extreme everything seem...  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.loc[:6,['cleaned_text','lem_cleaned_text']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "hI7DM3XX_Ybc"
   },
   "source": [
    "- In all these stemming and lemmatization techniques, lemmatization gives more accurate rootwords than compared with others"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "56PyqrLDfRSz",
    "outputId": "d57c0612-88cf-40a6-c10b-34612ea4709a"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 648821/648821 [04:27<00:00, 2428.59it/s]\n"
     ]
    }
   ],
   "source": [
    "words_list =[]\n",
    "\n",
    "for word in tqdm(df1['lem_cleaned_text']):\n",
    "    \n",
    "    #tokenize data\n",
    "    string = word_tokenize(word)\n",
    "    \n",
    "    words_list.append(string)\n",
    "\n",
    "df1['word_cleaned_text'] = words_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "fjjlmTODI183"
   },
   "outputs": [],
   "source": [
    "#saving the dataframe\n",
    "df1.to_csv('final_blog_csvfile.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "SRIomotzgOKz"
   },
   "source": [
    "# 3. Build a base Classification model\n",
    "## Part A - Q3 A - Create dependent and independent variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "e91lDuLIG_da",
    "outputId": "67229fd0-ebcb-4d72-ae96-d6ad3a87349f"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mounted at /content/drive/\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from google.colab import drive\n",
    "drive.mount('/content/drive/')\n",
    "import os\n",
    "os.chdir('/content/drive/ My Drive/NLP/')\n",
    "from tqdm import tqdm\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import LabelEncoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "LUJSZWlU_mcN"
   },
   "outputs": [],
   "source": [
    "final_df = pd.read_csv('final_blog_csvfile.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "IstPmLUvwhqX"
   },
   "outputs": [],
   "source": [
    "final_df.dropna(inplace=True)\n",
    "final_df.reset_index(drop=True,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "-0v0SAxmwwf1",
    "outputId": "ae301a96-f3c2-4ac0-95df-569757194a5f"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Unknown                    239125\n",
       "Student                    146370\n",
       "Technology                  40043\n",
       "Arts                        31001\n",
       "Education                   28443\n",
       "Communications-Media        19239\n",
       "Internet                    15146\n",
       "Non-Profit                  14067\n",
       "Engineering                 10997\n",
       "Law                          8724\n",
       "Publishing                   7460\n",
       "Science                      6866\n",
       "Government                   6561\n",
       "Consulting                   5574\n",
       "Religion                     5057\n",
       "Fashion                      4561\n",
       "Marketing                    4542\n",
       "Advertising                  4461\n",
       "BusinessServices             4236\n",
       "Banking                      3804\n",
       "Chemicals                    3675\n",
       "Telecommunications           3595\n",
       "Accounting                   3574\n",
       "Museums-Libraries            3031\n",
       "Military                     3009\n",
       "Sports-Recreation            2910\n",
       "HumanResources               2856\n",
       "RealEstate                   2801\n",
       "Manufacturing                2160\n",
       "Biotech                      2137\n",
       "Transportation               2089\n",
       "Tourism                      1872\n",
       "LawEnforcement-Security      1794\n",
       "Architecture                 1444\n",
       "InvestmentBanking            1209\n",
       "Agriculture                  1177\n",
       "Automotive                   1147\n",
       "Construction                  995\n",
       "Environment                   562\n",
       "Maritime                      271\n",
       "Name: topic, dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df['topic'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "LXpPMBoD4YlH"
   },
   "outputs": [],
   "source": [
    "df_A = final_df.sample(20000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "M1po2x_6esb3"
   },
   "outputs": [],
   "source": [
    "df_A = pd.read_csv(\"sample_df.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "e7axnWHnOXCm"
   },
   "outputs": [],
   "source": [
    "X = df_A['word_cleaned_text']\n",
    "Y = df_A['topic']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "Zadqi_337BW5",
    "outputId": "b8175344-785d-4d24-fba9-dbb1d2d60b72"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Unknown                    0.37145\n",
       "Student                    0.22525\n",
       "Technology                 0.06055\n",
       "Arts                       0.04825\n",
       "Education                  0.04245\n",
       "Communications-Media       0.03040\n",
       "Internet                   0.02330\n",
       "Non-Profit                 0.02130\n",
       "Engineering                0.01625\n",
       "Law                        0.01480\n",
       "Science                    0.01050\n",
       "Government                 0.01045\n",
       "Publishing                 0.01000\n",
       "Consulting                 0.01000\n",
       "Religion                   0.00790\n",
       "Marketing                  0.00675\n",
       "BusinessServices           0.00655\n",
       "Banking                    0.00640\n",
       "Advertising                0.00625\n",
       "Telecommunications         0.00605\n",
       "Fashion                    0.00590\n",
       "Chemicals                  0.00580\n",
       "Accounting                 0.00525\n",
       "Museums-Libraries          0.00510\n",
       "HumanResources             0.00495\n",
       "Military                   0.00480\n",
       "RealEstate                 0.00465\n",
       "Sports-Recreation          0.00440\n",
       "Biotech                    0.00335\n",
       "Manufacturing              0.00315\n",
       "Transportation             0.00280\n",
       "Tourism                    0.00275\n",
       "LawEnforcement-Security    0.00260\n",
       "Architecture               0.00215\n",
       "InvestmentBanking          0.00200\n",
       "Agriculture                0.00170\n",
       "Automotive                 0.00130\n",
       "Construction               0.00130\n",
       "Environment                0.00100\n",
       "Maritime                   0.00020\n",
       "Name: topic, dtype: float64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y.value_counts(normalize=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "bVwTcBo4DSBQ"
   },
   "source": [
    "- Its highly imbalance dataset\n",
    "- Accuracy is not a good measure ,hence we need to consider \n",
    "  - Precision score\n",
    "  - recall score\n",
    "  - f1 score\n",
    "  - hamming loss\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "zftQVIw3iK9A"
   },
   "source": [
    "## Part A - Q3 B - Split data into train and test."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "cY9acCiaOan4",
    "outputId": "9094f1c3-54d9-4e97-8c62-c9a1d23523c9"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(16000,)\n",
      "(16000,)\n",
      "(4000,)\n",
      "(4000,)\n"
     ]
    }
   ],
   "source": [
    "x_train,x_test,y_train,y_test = train_test_split(X,Y,test_size=0.2,random_state=42,stratify=Y)\n",
    "print(x_train.shape)\n",
    "print(y_train.shape)\n",
    "print(x_test.shape)\n",
    "print(y_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "_cJZkl_4Tumo"
   },
   "source": [
    "## Part A - Q3 C - Vectorize data using any one vectorizer.\n",
    "\n",
    "## Bag of Vectors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "aWs-WGlbUB3k"
   },
   "outputs": [],
   "source": [
    "# Vectorization (Convert text data to numbers).\n",
    "from sklearn.feature_extraction.text import CountVectorizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "RrnDbAUyK-JY"
   },
   "outputs": [],
   "source": [
    "bow_vec = CountVectorizer(max_features=2500,ngram_range=(1,1))     # Keep only 2500 features as number of features will increase the processing time.\n",
    "bow_vec.fit(x_train)\n",
    "x_train_bow = bow_vec.transform(x_train)\n",
    "x_test_bow = bow_vec.transform(x_test)\n",
    "x_train_bow = x_train_bow.toarray()                      # Convert the data features to array.\n",
    "x_test_bow = x_test_bow.toarray()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "fyU6MkHZT40g"
   },
   "source": [
    "## Part A - Q3 D - Build a base model for Supervised Learning - Classification."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "zWjkMLshRXln"
   },
   "outputs": [],
   "source": [
    "# Using Random Forest to build model for the classification of reviews.\n",
    "from sklearn.ensemble import RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "0VWXp76KMiL7"
   },
   "outputs": [],
   "source": [
    "rf = RandomForestClassifier(n_jobs=-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "3qI8W3FT0XwH"
   },
   "outputs": [],
   "source": [
    "from sklearn.metrics import accuracy_score,precision_score,recall_score,roc_auc_score,classification_report,confusion_matrix,f1_score\n",
    "from sklearn.metrics import hamming_loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "gs1ridxmzym2"
   },
   "outputs": [],
   "source": [
    "def mod_metrics(model,x_train,y_train,x_test,y_test):   \n",
    "    y_pred_tr = model.predict(x_train)\n",
    "    y_pred = model.predict(x_test)\n",
    "    print(\"--\"*30)\n",
    "    print(\"The Training accuracy score  is {} \".format(accuracy_score(y_train,y_pred_tr),))\n",
    "    print(\"The Testing accuracy score is {} \".format(accuracy_score(y_test,y_pred)))\n",
    "    print(\"The precision score is {}\".format(precision_score(y_test,y_pred,average='weighted'))) \n",
    "    print(\"The recall score is {}  \".format(recall_score(y_test,y_pred,average = 'weighted')))\n",
    "    print('The Hamming loss is ', hamming_loss(y_test,y_pred))\n",
    "    print(\"The classification report is \\n :\" , classification_report(y_test,y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "x62ndG8wYl16"
   },
   "outputs": [],
   "source": [
    "import time\n",
    "def models_metrics(model,x_tr,y_tr,x_ts,y_ts):\n",
    "  print(\"*-*\"*50)\n",
    "  print(model)\n",
    "  #start the timer\n",
    "  start_time = time.time()\n",
    "  #train the model\n",
    "  model.fit(x_tr,y_tr)\n",
    "  #caluculating the traning time\n",
    "  training_time = time.time()-start_time\n",
    "\n",
    "  print(\"training time :\",training_time,\"seconds\")\n",
    "  print(\"*-*\"*50)\n",
    "  mod_metrics(model,x_tr,y_tr,x_ts,y_ts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "i3HYKUY8aDct"
   },
   "outputs": [],
   "source": [
    "# function for caluculating ROC-AUC Score\n",
    "def roc_aucscore(model,x_ts,y_ts):\n",
    "  y_pred = model.predict_proba(x_ts)\n",
    "  print(\"The ROC-AUC score is {}\".format(roc_auc_score(y_ts,y_pred,multi_class='ovr')))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "p6u0LMUnoKav",
    "outputId": "b1eecf1f-5832-41fc-eb06-8894c6116894"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-*\n",
      "RandomForestClassifier(n_jobs=-1)\n",
      "training time : 66.11140847206116 seconds\n",
      "*-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-*\n",
      "------------------------------------------------------------\n",
      "The Training accuracy score  is 0.9926875 \n",
      "The Testing accuracy score is 0.38025 \n",
      "The precision score is 0.27939862054071113\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The recall score is 0.38025  \n",
      "The Hamming loss is  0.61975\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The classification report is \n",
      " :                          precision    recall  f1-score   support\n",
      "\n",
      "             Accounting       0.00      0.00      0.00        21\n",
      "            Advertising       0.00      0.00      0.00        25\n",
      "            Agriculture       0.00      0.00      0.00         7\n",
      "           Architecture       0.00      0.00      0.00         9\n",
      "                   Arts       0.00      0.00      0.00       193\n",
      "             Automotive       0.00      0.00      0.00         5\n",
      "                Banking       0.00      0.00      0.00        26\n",
      "                Biotech       0.00      0.00      0.00        13\n",
      "       BusinessServices       0.00      0.00      0.00        26\n",
      "              Chemicals       0.00      0.00      0.00        23\n",
      "   Communications-Media       0.17      0.01      0.02       122\n",
      "           Construction       0.00      0.00      0.00         5\n",
      "             Consulting       0.00      0.00      0.00        40\n",
      "              Education       0.33      0.02      0.03       170\n",
      "            Engineering       0.00      0.00      0.00        65\n",
      "            Environment       0.00      0.00      0.00         4\n",
      "                Fashion       0.00      0.00      0.00        24\n",
      "             Government       0.00      0.00      0.00        42\n",
      "         HumanResources       0.00      0.00      0.00        20\n",
      "               Internet       0.80      0.04      0.08        93\n",
      "      InvestmentBanking       0.00      0.00      0.00         8\n",
      "                    Law       0.00      0.00      0.00        59\n",
      "LawEnforcement-Security       0.00      0.00      0.00        10\n",
      "          Manufacturing       0.00      0.00      0.00        13\n",
      "               Maritime       0.00      0.00      0.00         1\n",
      "              Marketing       0.00      0.00      0.00        27\n",
      "               Military       0.00      0.00      0.00        19\n",
      "      Museums-Libraries       0.00      0.00      0.00        20\n",
      "             Non-Profit       0.00      0.00      0.00        85\n",
      "             Publishing       0.00      0.00      0.00        40\n",
      "             RealEstate       0.00      0.00      0.00        19\n",
      "               Religion       0.00      0.00      0.00        32\n",
      "                Science       0.00      0.00      0.00        42\n",
      "      Sports-Recreation       0.00      0.00      0.00        17\n",
      "                Student       0.40      0.30      0.34       901\n",
      "             Technology       0.16      0.02      0.04       242\n",
      "     Telecommunications       0.00      0.00      0.00        24\n",
      "                Tourism       0.00      0.00      0.00        11\n",
      "         Transportation       0.00      0.00      0.00        11\n",
      "                Unknown       0.38      0.83      0.52      1486\n",
      "\n",
      "               accuracy                           0.38      4000\n",
      "              macro avg       0.06      0.03      0.03      4000\n",
      "           weighted avg       0.28      0.38      0.28      4000\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "models_metrics(rf,x_train_bow,y_train,x_test_bow,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "UFib8pBBIr45",
    "outputId": "29fc89ab-c943-46ca-c3b8-6210b0076e8b"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The ROC-AUC score is 0.558162987210993\n"
     ]
    }
   ],
   "source": [
    "roc_aucscore(rf,x_test_bow,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "F8s0CP6igjdF"
   },
   "outputs": [],
   "source": [
    "bow_vect1 = CountVectorizer(max_features=3000,ngram_range=(1,1))     # Keep only 3000 features as number of features will increase the processing time.\n",
    "bow_vect1.fit(x_train)\n",
    "x_train_bow2 = bow_vect1.transform(x_train)\n",
    "x_test_bow2 = bow_vect1.transform(x_test)\n",
    "x_train_bow2 = x_train_bow2.toarray()                      # Convert the data features to array.\n",
    "x_test_bow2 = x_test_bow2.toarray()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "_dkUShrkg5VY"
   },
   "outputs": [],
   "source": [
    "rf_bow2 = RandomForestClassifier(n_jobs=-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "i3irxHlAg5Fg",
    "outputId": "dc274f89-8a3d-4300-9a9a-9e2d7103642c"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-*\n",
      "RandomForestClassifier(n_jobs=-1)\n",
      "training time : 62.44477844238281 seconds\n",
      "*-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-*\n",
      "------------------------------------------------------------\n",
      "The Training accuracy score  is 0.993 \n",
      "The Testing accuracy score is 0.373 \n",
      "The precision score is 0.2684965626069693\n",
      "The recall score is 0.373  \n",
      "The Hamming loss is  0.627\n",
      "The classification report is \n",
      " :                          precision    recall  f1-score   support\n",
      "\n",
      "             Accounting       0.00      0.00      0.00        21\n",
      "            Advertising       0.00      0.00      0.00        25\n",
      "            Agriculture       0.00      0.00      0.00         7\n",
      "           Architecture       0.00      0.00      0.00         9\n",
      "                   Arts       0.00      0.00      0.00       193\n",
      "             Automotive       0.00      0.00      0.00         5\n",
      "                Banking       0.00      0.00      0.00        26\n",
      "                Biotech       1.00      0.08      0.14        13\n",
      "       BusinessServices       0.00      0.00      0.00        26\n",
      "              Chemicals       0.00      0.00      0.00        23\n",
      "   Communications-Media       0.12      0.01      0.02       122\n",
      "           Construction       0.00      0.00      0.00         5\n",
      "             Consulting       0.00      0.00      0.00        40\n",
      "              Education       0.30      0.02      0.03       170\n",
      "            Engineering       0.00      0.00      0.00        65\n",
      "            Environment       0.00      0.00      0.00         4\n",
      "                Fashion       0.00      0.00      0.00        24\n",
      "             Government       0.00      0.00      0.00        42\n",
      "         HumanResources       0.00      0.00      0.00        20\n",
      "               Internet       0.75      0.03      0.06        93\n",
      "      InvestmentBanking       0.00      0.00      0.00         8\n",
      "                    Law       0.00      0.00      0.00        59\n",
      "LawEnforcement-Security       0.00      0.00      0.00        10\n",
      "          Manufacturing       0.00      0.00      0.00        13\n",
      "               Maritime       0.00      0.00      0.00         1\n",
      "              Marketing       0.00      0.00      0.00        27\n",
      "               Military       0.00      0.00      0.00        19\n",
      "      Museums-Libraries       0.00      0.00      0.00        20\n",
      "             Non-Profit       0.00      0.00      0.00        85\n",
      "             Publishing       0.00      0.00      0.00        40\n",
      "             RealEstate       0.00      0.00      0.00        19\n",
      "               Religion       0.00      0.00      0.00        32\n",
      "                Science       0.00      0.00      0.00        42\n",
      "      Sports-Recreation       0.00      0.00      0.00        17\n",
      "                Student       0.36      0.27      0.31       901\n",
      "             Technology       0.14      0.01      0.02       242\n",
      "     Telecommunications       0.00      0.00      0.00        24\n",
      "                Tourism       0.00      0.00      0.00        11\n",
      "         Transportation       0.00      0.00      0.00        11\n",
      "                Unknown       0.38      0.83      0.52      1486\n",
      "\n",
      "               accuracy                           0.37      4000\n",
      "              macro avg       0.08      0.03      0.03      4000\n",
      "           weighted avg       0.27      0.37      0.27      4000\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "models_metrics(rf_bow2,x_train_bow2,y_train,x_test_bow2,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "X1qlgwLth7Od"
   },
   "outputs": [],
   "source": [
    "bow_vect3 = CountVectorizer(max_features=5000,ngram_range=(1,1))     # Keep only 2500 features as number of features will increase the processing time.\n",
    "bow_vect3.fit(x_train)\n",
    "x_train_bow3 = bow_vect3.transform(x_train)\n",
    "x_test_bow3 = bow_vect3.transform(x_test)\n",
    "x_train_bow3 = x_train_bow3.toarray()                      # Convert the data features to array.\n",
    "x_test_bow3 = x_test_bow3.toarray()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "qFl7FjJ_h6QW"
   },
   "outputs": [],
   "source": [
    "rf_bow3 = RandomForestClassifier(n_jobs=-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "lfZ_fRrGh6MJ",
    "outputId": "d99e1308-2f59-46e9-8c20-4404acb8cd0b"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-*\n",
      "RandomForestClassifier(n_jobs=-1)\n",
      "training time : 124.57014393806458 seconds\n",
      "*-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-*\n",
      "------------------------------------------------------------\n",
      "The Training accuracy score  is 0.9941875 \n",
      "The Testing accuracy score is 0.38225 \n",
      "The precision score is 0.2828658969512171\n",
      "The recall score is 0.38225  \n",
      "The Hamming loss is  0.61775\n",
      "The classification report is \n",
      " :                          precision    recall  f1-score   support\n",
      "\n",
      "             Accounting       0.00      0.00      0.00        21\n",
      "            Advertising       0.00      0.00      0.00        25\n",
      "            Agriculture       0.00      0.00      0.00         7\n",
      "           Architecture       0.00      0.00      0.00         9\n",
      "                   Arts       0.00      0.00      0.00       193\n",
      "             Automotive       0.00      0.00      0.00         5\n",
      "                Banking       0.00      0.00      0.00        26\n",
      "                Biotech       1.00      0.08      0.14        13\n",
      "       BusinessServices       0.00      0.00      0.00        26\n",
      "              Chemicals       0.00      0.00      0.00        23\n",
      "   Communications-Media       0.25      0.01      0.02       122\n",
      "           Construction       0.00      0.00      0.00         5\n",
      "             Consulting       0.00      0.00      0.00        40\n",
      "              Education       0.50      0.02      0.04       170\n",
      "            Engineering       0.00      0.00      0.00        65\n",
      "            Environment       0.00      0.00      0.00         4\n",
      "                Fashion       0.00      0.00      0.00        24\n",
      "             Government       0.00      0.00      0.00        42\n",
      "         HumanResources       0.00      0.00      0.00        20\n",
      "               Internet       0.33      0.01      0.02        93\n",
      "      InvestmentBanking       0.00      0.00      0.00         8\n",
      "                    Law       0.00      0.00      0.00        59\n",
      "LawEnforcement-Security       0.00      0.00      0.00        10\n",
      "          Manufacturing       0.00      0.00      0.00        13\n",
      "               Maritime       0.00      0.00      0.00         1\n",
      "              Marketing       0.00      0.00      0.00        27\n",
      "               Military       0.00      0.00      0.00        19\n",
      "      Museums-Libraries       0.00      0.00      0.00        20\n",
      "             Non-Profit       0.00      0.00      0.00        85\n",
      "             Publishing       0.00      0.00      0.00        40\n",
      "             RealEstate       0.00      0.00      0.00        19\n",
      "               Religion       0.00      0.00      0.00        32\n",
      "                Science       0.00      0.00      0.00        42\n",
      "      Sports-Recreation       0.00      0.00      0.00        17\n",
      "                Student       0.40      0.27      0.32       901\n",
      "             Technology       0.17      0.02      0.04       242\n",
      "     Telecommunications       0.00      0.00      0.00        24\n",
      "                Tourism       0.00      0.00      0.00        11\n",
      "         Transportation       0.00      0.00      0.00        11\n",
      "                Unknown       0.38      0.86      0.53      1486\n",
      "\n",
      "               accuracy                           0.38      4000\n",
      "              macro avg       0.08      0.03      0.03      4000\n",
      "           weighted avg       0.28      0.38      0.28      4000\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "models_metrics(rf_bow3,x_train_bow3,y_train,x_test_bow3,y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "njuavVMfBC8U"
   },
   "source": [
    "- By these max_features in bag of words as the number of fetures are increasing the required metric score are increasing and hamming loss decreasing\n",
    "- but its very low and increases the complexity and computational time\n",
    "- May give good results as the large number of samples is considered "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "1Us4J8GiUGRl"
   },
   "source": [
    "## Part A - Q3 E - Clearly print Performance Metrics."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "mdCI94Ppege-"
   },
   "source": [
    "## Part A - Q4 A - Experiment with other vectorisers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "IsWVvoZ-liG8"
   },
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import TfidfVectorizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "krlL52DSavnM"
   },
   "outputs": [],
   "source": [
    "# Using TfidfVectorizer to convert text data to numbers.\n",
    "\n",
    "vectorizer = TfidfVectorizer(max_features = 2500 ,ngram_range=(1,1))\n",
    "vectorizer.fit(x_train)\n",
    "x_train_tfid = vectorizer.transform(x_train)\n",
    "x_test_tfid = vectorizer.transform(x_test) \n",
    "\n",
    "x_train_tfid = x_train_tfid.toarray()\n",
    "x_test_tfid = x_test_tfid.toarray()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "uZyCmdtKLuco"
   },
   "outputs": [],
   "source": [
    "rf_tfid = RandomForestClassifier(n_jobs=-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "n4-uoP2gdrM4",
    "outputId": "f6500231-a99a-45c0-9020-9feeebe96f1d"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-*\n",
      "RandomForestClassifier(n_jobs=-1)\n",
      "training time : 80.08593249320984 seconds\n",
      "*-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-*\n",
      "------------------------------------------------------------\n",
      "The Training accuracy score  is 0.9925 \n",
      "The Testing accuracy score is 0.37875 \n",
      "The precision score is 0.2850559931234752\n",
      "The recall score is 0.37875  \n",
      "The Hamming loss is  0.62125\n",
      "The classification report is \n",
      " :                          precision    recall  f1-score   support\n",
      "\n",
      "             Accounting       0.00      0.00      0.00        21\n",
      "            Advertising       0.00      0.00      0.00        25\n",
      "            Agriculture       0.00      0.00      0.00         7\n",
      "           Architecture       0.00      0.00      0.00         9\n",
      "                   Arts       0.00      0.00      0.00       193\n",
      "             Automotive       0.00      0.00      0.00         5\n",
      "                Banking       0.00      0.00      0.00        26\n",
      "                Biotech       0.00      0.00      0.00        13\n",
      "       BusinessServices       0.00      0.00      0.00        26\n",
      "              Chemicals       0.00      0.00      0.00        23\n",
      "   Communications-Media       0.20      0.01      0.02       122\n",
      "           Construction       0.00      0.00      0.00         5\n",
      "             Consulting       0.00      0.00      0.00        40\n",
      "              Education       0.50      0.01      0.01       170\n",
      "            Engineering       0.00      0.00      0.00        65\n",
      "            Environment       0.00      0.00      0.00         4\n",
      "                Fashion       0.00      0.00      0.00        24\n",
      "             Government       0.00      0.00      0.00        42\n",
      "         HumanResources       0.00      0.00      0.00        20\n",
      "               Internet       0.60      0.03      0.06        93\n",
      "      InvestmentBanking       0.00      0.00      0.00         8\n",
      "                    Law       0.00      0.00      0.00        59\n",
      "LawEnforcement-Security       0.00      0.00      0.00        10\n",
      "          Manufacturing       0.00      0.00      0.00        13\n",
      "               Maritime       0.00      0.00      0.00         1\n",
      "              Marketing       0.00      0.00      0.00        27\n",
      "               Military       0.00      0.00      0.00        19\n",
      "      Museums-Libraries       0.00      0.00      0.00        20\n",
      "             Non-Profit       0.00      0.00      0.00        85\n",
      "             Publishing       0.00      0.00      0.00        40\n",
      "             RealEstate       0.00      0.00      0.00        19\n",
      "               Religion       0.00      0.00      0.00        32\n",
      "                Science       0.00      0.00      0.00        42\n",
      "      Sports-Recreation       0.00      0.00      0.00        17\n",
      "                Student       0.40      0.26      0.31       901\n",
      "             Technology       0.21      0.01      0.02       242\n",
      "     Telecommunications       0.00      0.00      0.00        24\n",
      "                Tourism       0.00      0.00      0.00        11\n",
      "         Transportation       0.00      0.00      0.00        11\n",
      "                Unknown       0.38      0.86      0.52      1486\n",
      "\n",
      "               accuracy                           0.38      4000\n",
      "              macro avg       0.06      0.03      0.02      4000\n",
      "           weighted avg       0.29      0.38      0.27      4000\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "models_metrics(rf_tfid,x_train_tfid,y_train,x_test_tfid,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "9xfhncPGMhjp",
    "outputId": "5c4aabdb-6d31-45b3-c822-cc48cce51bf4"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The ROC-AUC score is 0.5668151698323447\n"
     ]
    }
   ],
   "source": [
    "roc_aucscore(rf_tfid,x_test_tfid,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "-vENTOIykWsQ"
   },
   "outputs": [],
   "source": [
    "vectorizer1 = TfidfVectorizer(max_features = 4000 ,ngram_range=(1,1))\n",
    "vectorizer1.fit(x_train)\n",
    "x_train_tfid1 = vectorizer1.transform(x_train)\n",
    "x_test_tfid1 = vectorizer1.transform(x_test) \n",
    "\n",
    "x_train_tfid1 = x_train_tfid1.toarray()\n",
    "x_test_tfid1 = x_test_tfid1.toarray()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "J65Eb5cckWdP"
   },
   "outputs": [],
   "source": [
    "rf_tfid1 = RandomForestClassifier(n_jobs=-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "BtYTdPKlkgCd",
    "outputId": "539616ef-2639-434d-b853-cda2592cd502"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-*\n",
      "RandomForestClassifier(n_jobs=-1)\n",
      "training time : 123.74146056175232 seconds\n",
      "*-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-*\n",
      "------------------------------------------------------------\n",
      "The Training accuracy score  is 0.9935625 \n",
      "The Testing accuracy score is 0.383 \n",
      "The precision score is 0.3099283328656207\n",
      "The recall score is 0.383  \n",
      "The Hamming loss is  0.617\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The classification report is \n",
      " :                          precision    recall  f1-score   support\n",
      "\n",
      "             Accounting       0.00      0.00      0.00        21\n",
      "            Advertising       0.00      0.00      0.00        25\n",
      "            Agriculture       0.00      0.00      0.00         7\n",
      "           Architecture       0.00      0.00      0.00         9\n",
      "                   Arts       0.00      0.00      0.00       193\n",
      "             Automotive       0.00      0.00      0.00         5\n",
      "                Banking       0.00      0.00      0.00        26\n",
      "                Biotech       1.00      0.08      0.14        13\n",
      "       BusinessServices       0.00      0.00      0.00        26\n",
      "              Chemicals       0.00      0.00      0.00        23\n",
      "   Communications-Media       0.20      0.01      0.02       122\n",
      "           Construction       0.00      0.00      0.00         5\n",
      "             Consulting       0.00      0.00      0.00        40\n",
      "              Education       1.00      0.01      0.02       170\n",
      "            Engineering       0.00      0.00      0.00        65\n",
      "            Environment       0.00      0.00      0.00         4\n",
      "                Fashion       0.00      0.00      0.00        24\n",
      "             Government       0.00      0.00      0.00        42\n",
      "         HumanResources       0.00      0.00      0.00        20\n",
      "               Internet       0.60      0.03      0.06        93\n",
      "      InvestmentBanking       0.00      0.00      0.00         8\n",
      "                    Law       0.00      0.00      0.00        59\n",
      "LawEnforcement-Security       0.00      0.00      0.00        10\n",
      "          Manufacturing       0.00      0.00      0.00        13\n",
      "               Maritime       0.00      0.00      0.00         1\n",
      "              Marketing       0.00      0.00      0.00        27\n",
      "               Military       0.00      0.00      0.00        19\n",
      "      Museums-Libraries       0.00      0.00      0.00        20\n",
      "             Non-Profit       0.00      0.00      0.00        85\n",
      "             Publishing       0.00      0.00      0.00        40\n",
      "             RealEstate       0.00      0.00      0.00        19\n",
      "               Religion       0.00      0.00      0.00        32\n",
      "                Science       0.00      0.00      0.00        42\n",
      "      Sports-Recreation       0.00      0.00      0.00        17\n",
      "                Student       0.41      0.22      0.29       901\n",
      "             Technology       0.15      0.01      0.02       242\n",
      "     Telecommunications       0.00      0.00      0.00        24\n",
      "                Tourism       0.00      0.00      0.00        11\n",
      "         Transportation       0.00      0.00      0.00        11\n",
      "                Unknown       0.38      0.89      0.53      1486\n",
      "\n",
      "               accuracy                           0.38      4000\n",
      "              macro avg       0.09      0.03      0.03      4000\n",
      "           weighted avg       0.31      0.38      0.27      4000\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "models_metrics(rf_tfid1,x_train_tfid1,y_train,x_test_tfid1,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "AUdpA1Q7XU6H"
   },
   "outputs": [],
   "source": [
    "import gensim\n",
    "from gensim.models import Word2Vec"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "cl_2gTIS21KM",
    "outputId": "ab520108-9bd7-4611-dc58-eaf653edce02"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:gensim.models.word2vec:Each 'sentences' item should be a list of words (usually unicode strings). First item here is instead plain <class 'str'>.\n"
     ]
    }
   ],
   "source": [
    "# Model creation\n",
    "model_w2v = Word2Vec(x_train,vector_size=2000, min_count=1, workers=4)\n",
    "\n",
    "def averaged_word_vectorizer(corpus, model, num_features):\n",
    "    vocabulary = set(model.wv.index_to_key)\n",
    "\n",
    "    def average_word_vectors(tokenized_sentence, model, vocabulary, num_features):\n",
    "        feature_vector = np.zeros((num_features,), dtype=\"float32\")\n",
    "        n_words = 0\n",
    "\n",
    "        for token in tokenized_sentence:\n",
    "            if token in vocabulary:\n",
    "                feature_vector = np.add(feature_vector, model.wv.get_vector(token))\n",
    "                n_words += 1\n",
    "\n",
    "        if n_words > 0:\n",
    "            feature_vector = np.divide(feature_vector, n_words)\n",
    "\n",
    "        return feature_vector\n",
    "\n",
    "    features = [average_word_vectors(tokenized_sentence, model, vocabulary, num_features)\n",
    "                for tokenized_sentence in corpus]\n",
    "\n",
    "    return np.array(features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 487
    },
    "id": "k1uUkJFU209A",
    "outputId": "80b45a32-c29b-47fa-9d7e-6c1734baebf4"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-66f47eff-9eb0-40b4-8fc0-32f6e2e1c3c7\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>1990</th>\n",
       "      <th>1991</th>\n",
       "      <th>1992</th>\n",
       "      <th>1993</th>\n",
       "      <th>1994</th>\n",
       "      <th>1995</th>\n",
       "      <th>1996</th>\n",
       "      <th>1997</th>\n",
       "      <th>1998</th>\n",
       "      <th>1999</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.084218</td>\n",
       "      <td>-0.034908</td>\n",
       "      <td>0.100727</td>\n",
       "      <td>0.102172</td>\n",
       "      <td>0.003712</td>\n",
       "      <td>-0.077836</td>\n",
       "      <td>-0.079862</td>\n",
       "      <td>0.058450</td>\n",
       "      <td>0.022323</td>\n",
       "      <td>0.040569</td>\n",
       "      <td>...</td>\n",
       "      <td>0.017132</td>\n",
       "      <td>-0.022885</td>\n",
       "      <td>0.000929</td>\n",
       "      <td>-0.012677</td>\n",
       "      <td>-0.029425</td>\n",
       "      <td>0.015663</td>\n",
       "      <td>-0.002015</td>\n",
       "      <td>-0.007990</td>\n",
       "      <td>-0.006915</td>\n",
       "      <td>0.002629</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.074890</td>\n",
       "      <td>-0.038290</td>\n",
       "      <td>0.098720</td>\n",
       "      <td>0.101156</td>\n",
       "      <td>0.014700</td>\n",
       "      <td>-0.079505</td>\n",
       "      <td>-0.077634</td>\n",
       "      <td>0.055009</td>\n",
       "      <td>0.024271</td>\n",
       "      <td>0.034682</td>\n",
       "      <td>...</td>\n",
       "      <td>0.022206</td>\n",
       "      <td>-0.026933</td>\n",
       "      <td>0.000185</td>\n",
       "      <td>-0.010754</td>\n",
       "      <td>-0.029983</td>\n",
       "      <td>0.013078</td>\n",
       "      <td>0.004640</td>\n",
       "      <td>-0.017487</td>\n",
       "      <td>-0.010593</td>\n",
       "      <td>-0.002751</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.066539</td>\n",
       "      <td>-0.041231</td>\n",
       "      <td>0.090959</td>\n",
       "      <td>0.093353</td>\n",
       "      <td>0.021067</td>\n",
       "      <td>-0.072533</td>\n",
       "      <td>-0.079912</td>\n",
       "      <td>0.049352</td>\n",
       "      <td>0.028231</td>\n",
       "      <td>0.033508</td>\n",
       "      <td>...</td>\n",
       "      <td>0.021919</td>\n",
       "      <td>-0.029415</td>\n",
       "      <td>0.004613</td>\n",
       "      <td>-0.007261</td>\n",
       "      <td>-0.027746</td>\n",
       "      <td>0.013443</td>\n",
       "      <td>0.002933</td>\n",
       "      <td>-0.017454</td>\n",
       "      <td>-0.010519</td>\n",
       "      <td>-0.003314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.072185</td>\n",
       "      <td>-0.036391</td>\n",
       "      <td>0.097639</td>\n",
       "      <td>0.100231</td>\n",
       "      <td>0.013310</td>\n",
       "      <td>-0.078444</td>\n",
       "      <td>-0.077895</td>\n",
       "      <td>0.053663</td>\n",
       "      <td>0.023238</td>\n",
       "      <td>0.035052</td>\n",
       "      <td>...</td>\n",
       "      <td>0.021918</td>\n",
       "      <td>-0.027061</td>\n",
       "      <td>0.000348</td>\n",
       "      <td>-0.010583</td>\n",
       "      <td>-0.029968</td>\n",
       "      <td>0.015355</td>\n",
       "      <td>0.005860</td>\n",
       "      <td>-0.016947</td>\n",
       "      <td>-0.010832</td>\n",
       "      <td>-0.003652</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.073689</td>\n",
       "      <td>-0.041880</td>\n",
       "      <td>0.090791</td>\n",
       "      <td>0.098625</td>\n",
       "      <td>0.010820</td>\n",
       "      <td>-0.077683</td>\n",
       "      <td>-0.076684</td>\n",
       "      <td>0.055164</td>\n",
       "      <td>0.027497</td>\n",
       "      <td>0.037833</td>\n",
       "      <td>...</td>\n",
       "      <td>0.022446</td>\n",
       "      <td>-0.028486</td>\n",
       "      <td>0.001838</td>\n",
       "      <td>-0.009246</td>\n",
       "      <td>-0.026292</td>\n",
       "      <td>0.015277</td>\n",
       "      <td>0.002302</td>\n",
       "      <td>-0.013590</td>\n",
       "      <td>-0.008383</td>\n",
       "      <td>-0.001714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15995</th>\n",
       "      <td>0.074125</td>\n",
       "      <td>-0.037905</td>\n",
       "      <td>0.094943</td>\n",
       "      <td>0.096744</td>\n",
       "      <td>0.012356</td>\n",
       "      <td>-0.078454</td>\n",
       "      <td>-0.075474</td>\n",
       "      <td>0.054611</td>\n",
       "      <td>0.025520</td>\n",
       "      <td>0.035912</td>\n",
       "      <td>...</td>\n",
       "      <td>0.020795</td>\n",
       "      <td>-0.027154</td>\n",
       "      <td>0.001663</td>\n",
       "      <td>-0.010293</td>\n",
       "      <td>-0.028403</td>\n",
       "      <td>0.014665</td>\n",
       "      <td>0.001699</td>\n",
       "      <td>-0.014790</td>\n",
       "      <td>-0.007325</td>\n",
       "      <td>-0.002188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15996</th>\n",
       "      <td>0.081938</td>\n",
       "      <td>-0.035418</td>\n",
       "      <td>0.107092</td>\n",
       "      <td>0.108912</td>\n",
       "      <td>0.011917</td>\n",
       "      <td>-0.085368</td>\n",
       "      <td>-0.078570</td>\n",
       "      <td>0.059750</td>\n",
       "      <td>0.024018</td>\n",
       "      <td>0.035734</td>\n",
       "      <td>...</td>\n",
       "      <td>0.021942</td>\n",
       "      <td>-0.026396</td>\n",
       "      <td>-0.001299</td>\n",
       "      <td>-0.010065</td>\n",
       "      <td>-0.029668</td>\n",
       "      <td>0.015417</td>\n",
       "      <td>0.003298</td>\n",
       "      <td>-0.015372</td>\n",
       "      <td>-0.009962</td>\n",
       "      <td>-0.001105</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15997</th>\n",
       "      <td>0.072488</td>\n",
       "      <td>-0.033943</td>\n",
       "      <td>0.102613</td>\n",
       "      <td>0.101740</td>\n",
       "      <td>0.017475</td>\n",
       "      <td>-0.078228</td>\n",
       "      <td>-0.079217</td>\n",
       "      <td>0.053940</td>\n",
       "      <td>0.024391</td>\n",
       "      <td>0.032806</td>\n",
       "      <td>...</td>\n",
       "      <td>0.021449</td>\n",
       "      <td>-0.026186</td>\n",
       "      <td>0.000588</td>\n",
       "      <td>-0.009787</td>\n",
       "      <td>-0.029832</td>\n",
       "      <td>0.015313</td>\n",
       "      <td>0.003783</td>\n",
       "      <td>-0.015536</td>\n",
       "      <td>-0.011052</td>\n",
       "      <td>-0.002305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15998</th>\n",
       "      <td>0.074731</td>\n",
       "      <td>-0.037990</td>\n",
       "      <td>0.098562</td>\n",
       "      <td>0.101626</td>\n",
       "      <td>0.014261</td>\n",
       "      <td>-0.078944</td>\n",
       "      <td>-0.079349</td>\n",
       "      <td>0.053807</td>\n",
       "      <td>0.024539</td>\n",
       "      <td>0.034934</td>\n",
       "      <td>...</td>\n",
       "      <td>0.021688</td>\n",
       "      <td>-0.027450</td>\n",
       "      <td>0.001348</td>\n",
       "      <td>-0.009189</td>\n",
       "      <td>-0.029654</td>\n",
       "      <td>0.014344</td>\n",
       "      <td>0.003418</td>\n",
       "      <td>-0.017706</td>\n",
       "      <td>-0.009899</td>\n",
       "      <td>-0.002813</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15999</th>\n",
       "      <td>0.079587</td>\n",
       "      <td>-0.039560</td>\n",
       "      <td>0.095228</td>\n",
       "      <td>0.101021</td>\n",
       "      <td>0.008488</td>\n",
       "      <td>-0.081744</td>\n",
       "      <td>-0.076553</td>\n",
       "      <td>0.056631</td>\n",
       "      <td>0.024974</td>\n",
       "      <td>0.039674</td>\n",
       "      <td>...</td>\n",
       "      <td>0.020226</td>\n",
       "      <td>-0.026579</td>\n",
       "      <td>-0.000357</td>\n",
       "      <td>-0.011411</td>\n",
       "      <td>-0.030141</td>\n",
       "      <td>0.014294</td>\n",
       "      <td>0.002454</td>\n",
       "      <td>-0.015330</td>\n",
       "      <td>-0.008634</td>\n",
       "      <td>-0.001843</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>16000 rows × 2000 columns</p>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-66f47eff-9eb0-40b4-8fc0-32f6e2e1c3c7')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-66f47eff-9eb0-40b4-8fc0-32f6e2e1c3c7 button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-66f47eff-9eb0-40b4-8fc0-32f6e2e1c3c7');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "           0         1         2         3         4         5         6     \\\n",
       "0      0.084218 -0.034908  0.100727  0.102172  0.003712 -0.077836 -0.079862   \n",
       "1      0.074890 -0.038290  0.098720  0.101156  0.014700 -0.079505 -0.077634   \n",
       "2      0.066539 -0.041231  0.090959  0.093353  0.021067 -0.072533 -0.079912   \n",
       "3      0.072185 -0.036391  0.097639  0.100231  0.013310 -0.078444 -0.077895   \n",
       "4      0.073689 -0.041880  0.090791  0.098625  0.010820 -0.077683 -0.076684   \n",
       "...         ...       ...       ...       ...       ...       ...       ...   \n",
       "15995  0.074125 -0.037905  0.094943  0.096744  0.012356 -0.078454 -0.075474   \n",
       "15996  0.081938 -0.035418  0.107092  0.108912  0.011917 -0.085368 -0.078570   \n",
       "15997  0.072488 -0.033943  0.102613  0.101740  0.017475 -0.078228 -0.079217   \n",
       "15998  0.074731 -0.037990  0.098562  0.101626  0.014261 -0.078944 -0.079349   \n",
       "15999  0.079587 -0.039560  0.095228  0.101021  0.008488 -0.081744 -0.076553   \n",
       "\n",
       "           7         8         9     ...      1990      1991      1992  \\\n",
       "0      0.058450  0.022323  0.040569  ...  0.017132 -0.022885  0.000929   \n",
       "1      0.055009  0.024271  0.034682  ...  0.022206 -0.026933  0.000185   \n",
       "2      0.049352  0.028231  0.033508  ...  0.021919 -0.029415  0.004613   \n",
       "3      0.053663  0.023238  0.035052  ...  0.021918 -0.027061  0.000348   \n",
       "4      0.055164  0.027497  0.037833  ...  0.022446 -0.028486  0.001838   \n",
       "...         ...       ...       ...  ...       ...       ...       ...   \n",
       "15995  0.054611  0.025520  0.035912  ...  0.020795 -0.027154  0.001663   \n",
       "15996  0.059750  0.024018  0.035734  ...  0.021942 -0.026396 -0.001299   \n",
       "15997  0.053940  0.024391  0.032806  ...  0.021449 -0.026186  0.000588   \n",
       "15998  0.053807  0.024539  0.034934  ...  0.021688 -0.027450  0.001348   \n",
       "15999  0.056631  0.024974  0.039674  ...  0.020226 -0.026579 -0.000357   \n",
       "\n",
       "           1993      1994      1995      1996      1997      1998      1999  \n",
       "0     -0.012677 -0.029425  0.015663 -0.002015 -0.007990 -0.006915  0.002629  \n",
       "1     -0.010754 -0.029983  0.013078  0.004640 -0.017487 -0.010593 -0.002751  \n",
       "2     -0.007261 -0.027746  0.013443  0.002933 -0.017454 -0.010519 -0.003314  \n",
       "3     -0.010583 -0.029968  0.015355  0.005860 -0.016947 -0.010832 -0.003652  \n",
       "4     -0.009246 -0.026292  0.015277  0.002302 -0.013590 -0.008383 -0.001714  \n",
       "...         ...       ...       ...       ...       ...       ...       ...  \n",
       "15995 -0.010293 -0.028403  0.014665  0.001699 -0.014790 -0.007325 -0.002188  \n",
       "15996 -0.010065 -0.029668  0.015417  0.003298 -0.015372 -0.009962 -0.001105  \n",
       "15997 -0.009787 -0.029832  0.015313  0.003783 -0.015536 -0.011052 -0.002305  \n",
       "15998 -0.009189 -0.029654  0.014344  0.003418 -0.017706 -0.009899 -0.002813  \n",
       "15999 -0.011411 -0.030141  0.014294  0.002454 -0.015330 -0.008634 -0.001843  \n",
       "\n",
       "[16000 rows x 2000 columns]"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "feature_size = 2000\n",
    "\n",
    "# get document level embeddings\n",
    "\n",
    "x_train_w2v = averaged_word_vectorizer(corpus = x_train, model = model_w2v,\n",
    "                                             num_features = feature_size)\n",
    "pd.DataFrame(x_train_w2v)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 487
    },
    "id": "omEZC-PnLLLb",
    "outputId": "6fd12b8b-516e-4c5a-98e4-a4d9daa26b2d"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-5219a5ed-2aab-4830-ab23-f49d615ea947\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>1990</th>\n",
       "      <th>1991</th>\n",
       "      <th>1992</th>\n",
       "      <th>1993</th>\n",
       "      <th>1994</th>\n",
       "      <th>1995</th>\n",
       "      <th>1996</th>\n",
       "      <th>1997</th>\n",
       "      <th>1998</th>\n",
       "      <th>1999</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.073883</td>\n",
       "      <td>-0.038449</td>\n",
       "      <td>0.094249</td>\n",
       "      <td>0.100045</td>\n",
       "      <td>0.008822</td>\n",
       "      <td>-0.079024</td>\n",
       "      <td>-0.075201</td>\n",
       "      <td>0.053864</td>\n",
       "      <td>0.024537</td>\n",
       "      <td>0.036423</td>\n",
       "      <td>...</td>\n",
       "      <td>0.021553</td>\n",
       "      <td>-0.026410</td>\n",
       "      <td>0.000605</td>\n",
       "      <td>-0.011085</td>\n",
       "      <td>-0.029595</td>\n",
       "      <td>0.013944</td>\n",
       "      <td>0.003802</td>\n",
       "      <td>-0.015607</td>\n",
       "      <td>-0.008090</td>\n",
       "      <td>-0.003057</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.066858</td>\n",
       "      <td>-0.037957</td>\n",
       "      <td>0.091389</td>\n",
       "      <td>0.093890</td>\n",
       "      <td>0.016062</td>\n",
       "      <td>-0.072852</td>\n",
       "      <td>-0.076989</td>\n",
       "      <td>0.048303</td>\n",
       "      <td>0.024811</td>\n",
       "      <td>0.032353</td>\n",
       "      <td>...</td>\n",
       "      <td>0.021043</td>\n",
       "      <td>-0.026790</td>\n",
       "      <td>0.001968</td>\n",
       "      <td>-0.008078</td>\n",
       "      <td>-0.030211</td>\n",
       "      <td>0.012332</td>\n",
       "      <td>0.003024</td>\n",
       "      <td>-0.016556</td>\n",
       "      <td>-0.011104</td>\n",
       "      <td>-0.001477</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.076467</td>\n",
       "      <td>-0.038883</td>\n",
       "      <td>0.094753</td>\n",
       "      <td>0.101981</td>\n",
       "      <td>0.004560</td>\n",
       "      <td>-0.078691</td>\n",
       "      <td>-0.074932</td>\n",
       "      <td>0.055117</td>\n",
       "      <td>0.023045</td>\n",
       "      <td>0.039850</td>\n",
       "      <td>...</td>\n",
       "      <td>0.021163</td>\n",
       "      <td>-0.025664</td>\n",
       "      <td>0.000174</td>\n",
       "      <td>-0.010632</td>\n",
       "      <td>-0.028914</td>\n",
       "      <td>0.015326</td>\n",
       "      <td>0.002641</td>\n",
       "      <td>-0.013113</td>\n",
       "      <td>-0.008102</td>\n",
       "      <td>-0.000583</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.093253</td>\n",
       "      <td>-0.048416</td>\n",
       "      <td>0.100985</td>\n",
       "      <td>0.107660</td>\n",
       "      <td>0.015576</td>\n",
       "      <td>-0.071939</td>\n",
       "      <td>-0.089920</td>\n",
       "      <td>0.056897</td>\n",
       "      <td>0.029410</td>\n",
       "      <td>0.051893</td>\n",
       "      <td>...</td>\n",
       "      <td>0.015620</td>\n",
       "      <td>-0.021052</td>\n",
       "      <td>0.006067</td>\n",
       "      <td>-0.011776</td>\n",
       "      <td>-0.022275</td>\n",
       "      <td>0.011788</td>\n",
       "      <td>-0.004178</td>\n",
       "      <td>-0.007396</td>\n",
       "      <td>-0.003072</td>\n",
       "      <td>0.003196</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.077271</td>\n",
       "      <td>-0.036866</td>\n",
       "      <td>0.097293</td>\n",
       "      <td>0.101483</td>\n",
       "      <td>0.009160</td>\n",
       "      <td>-0.081969</td>\n",
       "      <td>-0.075527</td>\n",
       "      <td>0.055348</td>\n",
       "      <td>0.023207</td>\n",
       "      <td>0.036373</td>\n",
       "      <td>...</td>\n",
       "      <td>0.020797</td>\n",
       "      <td>-0.025947</td>\n",
       "      <td>-0.001164</td>\n",
       "      <td>-0.012764</td>\n",
       "      <td>-0.031110</td>\n",
       "      <td>0.013229</td>\n",
       "      <td>0.003579</td>\n",
       "      <td>-0.016210</td>\n",
       "      <td>-0.010723</td>\n",
       "      <td>-0.002152</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3995</th>\n",
       "      <td>0.084311</td>\n",
       "      <td>-0.035976</td>\n",
       "      <td>0.097603</td>\n",
       "      <td>0.111207</td>\n",
       "      <td>-0.006177</td>\n",
       "      <td>-0.086937</td>\n",
       "      <td>-0.070955</td>\n",
       "      <td>0.059833</td>\n",
       "      <td>0.019734</td>\n",
       "      <td>0.042839</td>\n",
       "      <td>...</td>\n",
       "      <td>0.021851</td>\n",
       "      <td>-0.026652</td>\n",
       "      <td>-0.004744</td>\n",
       "      <td>-0.013434</td>\n",
       "      <td>-0.031541</td>\n",
       "      <td>0.017919</td>\n",
       "      <td>0.003427</td>\n",
       "      <td>-0.013238</td>\n",
       "      <td>-0.008193</td>\n",
       "      <td>-0.000960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3996</th>\n",
       "      <td>0.087243</td>\n",
       "      <td>-0.034393</td>\n",
       "      <td>0.109226</td>\n",
       "      <td>0.115265</td>\n",
       "      <td>0.000431</td>\n",
       "      <td>-0.083366</td>\n",
       "      <td>-0.074921</td>\n",
       "      <td>0.061996</td>\n",
       "      <td>0.019167</td>\n",
       "      <td>0.041673</td>\n",
       "      <td>...</td>\n",
       "      <td>0.022154</td>\n",
       "      <td>-0.022041</td>\n",
       "      <td>-0.005744</td>\n",
       "      <td>-0.014675</td>\n",
       "      <td>-0.029484</td>\n",
       "      <td>0.016020</td>\n",
       "      <td>0.003956</td>\n",
       "      <td>-0.008183</td>\n",
       "      <td>-0.010561</td>\n",
       "      <td>0.001684</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3997</th>\n",
       "      <td>0.074550</td>\n",
       "      <td>-0.037767</td>\n",
       "      <td>0.101819</td>\n",
       "      <td>0.102365</td>\n",
       "      <td>0.018678</td>\n",
       "      <td>-0.075949</td>\n",
       "      <td>-0.077548</td>\n",
       "      <td>0.056540</td>\n",
       "      <td>0.021847</td>\n",
       "      <td>0.034052</td>\n",
       "      <td>...</td>\n",
       "      <td>0.023365</td>\n",
       "      <td>-0.026878</td>\n",
       "      <td>-0.000014</td>\n",
       "      <td>-0.011912</td>\n",
       "      <td>-0.031842</td>\n",
       "      <td>0.012988</td>\n",
       "      <td>0.005581</td>\n",
       "      <td>-0.018017</td>\n",
       "      <td>-0.011512</td>\n",
       "      <td>-0.003373</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3998</th>\n",
       "      <td>0.064922</td>\n",
       "      <td>-0.041159</td>\n",
       "      <td>0.081942</td>\n",
       "      <td>0.083947</td>\n",
       "      <td>0.019986</td>\n",
       "      <td>-0.070732</td>\n",
       "      <td>-0.074886</td>\n",
       "      <td>0.048675</td>\n",
       "      <td>0.026069</td>\n",
       "      <td>0.036544</td>\n",
       "      <td>...</td>\n",
       "      <td>0.020513</td>\n",
       "      <td>-0.031405</td>\n",
       "      <td>0.006287</td>\n",
       "      <td>-0.006611</td>\n",
       "      <td>-0.023686</td>\n",
       "      <td>0.016083</td>\n",
       "      <td>0.000585</td>\n",
       "      <td>-0.015355</td>\n",
       "      <td>-0.008643</td>\n",
       "      <td>-0.001566</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3999</th>\n",
       "      <td>0.081486</td>\n",
       "      <td>-0.037953</td>\n",
       "      <td>0.103668</td>\n",
       "      <td>0.106032</td>\n",
       "      <td>0.012891</td>\n",
       "      <td>-0.081562</td>\n",
       "      <td>-0.078649</td>\n",
       "      <td>0.056991</td>\n",
       "      <td>0.024318</td>\n",
       "      <td>0.038427</td>\n",
       "      <td>...</td>\n",
       "      <td>0.021313</td>\n",
       "      <td>-0.027671</td>\n",
       "      <td>0.000746</td>\n",
       "      <td>-0.008891</td>\n",
       "      <td>-0.028360</td>\n",
       "      <td>0.016028</td>\n",
       "      <td>0.001815</td>\n",
       "      <td>-0.014834</td>\n",
       "      <td>-0.009057</td>\n",
       "      <td>-0.001238</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4000 rows × 2000 columns</p>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5219a5ed-2aab-4830-ab23-f49d615ea947')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-5219a5ed-2aab-4830-ab23-f49d615ea947 button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-5219a5ed-2aab-4830-ab23-f49d615ea947');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "          0         1         2         3         4         5         6     \\\n",
       "0     0.073883 -0.038449  0.094249  0.100045  0.008822 -0.079024 -0.075201   \n",
       "1     0.066858 -0.037957  0.091389  0.093890  0.016062 -0.072852 -0.076989   \n",
       "2     0.076467 -0.038883  0.094753  0.101981  0.004560 -0.078691 -0.074932   \n",
       "3     0.093253 -0.048416  0.100985  0.107660  0.015576 -0.071939 -0.089920   \n",
       "4     0.077271 -0.036866  0.097293  0.101483  0.009160 -0.081969 -0.075527   \n",
       "...        ...       ...       ...       ...       ...       ...       ...   \n",
       "3995  0.084311 -0.035976  0.097603  0.111207 -0.006177 -0.086937 -0.070955   \n",
       "3996  0.087243 -0.034393  0.109226  0.115265  0.000431 -0.083366 -0.074921   \n",
       "3997  0.074550 -0.037767  0.101819  0.102365  0.018678 -0.075949 -0.077548   \n",
       "3998  0.064922 -0.041159  0.081942  0.083947  0.019986 -0.070732 -0.074886   \n",
       "3999  0.081486 -0.037953  0.103668  0.106032  0.012891 -0.081562 -0.078649   \n",
       "\n",
       "          7         8         9     ...      1990      1991      1992  \\\n",
       "0     0.053864  0.024537  0.036423  ...  0.021553 -0.026410  0.000605   \n",
       "1     0.048303  0.024811  0.032353  ...  0.021043 -0.026790  0.001968   \n",
       "2     0.055117  0.023045  0.039850  ...  0.021163 -0.025664  0.000174   \n",
       "3     0.056897  0.029410  0.051893  ...  0.015620 -0.021052  0.006067   \n",
       "4     0.055348  0.023207  0.036373  ...  0.020797 -0.025947 -0.001164   \n",
       "...        ...       ...       ...  ...       ...       ...       ...   \n",
       "3995  0.059833  0.019734  0.042839  ...  0.021851 -0.026652 -0.004744   \n",
       "3996  0.061996  0.019167  0.041673  ...  0.022154 -0.022041 -0.005744   \n",
       "3997  0.056540  0.021847  0.034052  ...  0.023365 -0.026878 -0.000014   \n",
       "3998  0.048675  0.026069  0.036544  ...  0.020513 -0.031405  0.006287   \n",
       "3999  0.056991  0.024318  0.038427  ...  0.021313 -0.027671  0.000746   \n",
       "\n",
       "          1993      1994      1995      1996      1997      1998      1999  \n",
       "0    -0.011085 -0.029595  0.013944  0.003802 -0.015607 -0.008090 -0.003057  \n",
       "1    -0.008078 -0.030211  0.012332  0.003024 -0.016556 -0.011104 -0.001477  \n",
       "2    -0.010632 -0.028914  0.015326  0.002641 -0.013113 -0.008102 -0.000583  \n",
       "3    -0.011776 -0.022275  0.011788 -0.004178 -0.007396 -0.003072  0.003196  \n",
       "4    -0.012764 -0.031110  0.013229  0.003579 -0.016210 -0.010723 -0.002152  \n",
       "...        ...       ...       ...       ...       ...       ...       ...  \n",
       "3995 -0.013434 -0.031541  0.017919  0.003427 -0.013238 -0.008193 -0.000960  \n",
       "3996 -0.014675 -0.029484  0.016020  0.003956 -0.008183 -0.010561  0.001684  \n",
       "3997 -0.011912 -0.031842  0.012988  0.005581 -0.018017 -0.011512 -0.003373  \n",
       "3998 -0.006611 -0.023686  0.016083  0.000585 -0.015355 -0.008643 -0.001566  \n",
       "3999 -0.008891 -0.028360  0.016028  0.001815 -0.014834 -0.009057 -0.001238  \n",
       "\n",
       "[4000 rows x 2000 columns]"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "feature_size = 2000\n",
    "\n",
    "# get document level embeddings\n",
    "\n",
    "x_test_w2v = averaged_word_vectorizer(corpus = x_test, model = model_w2v,\n",
    "                                             num_features = feature_size)\n",
    "pd.DataFrame(x_test_w2v)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "h2kVaB6wMCP2"
   },
   "outputs": [],
   "source": [
    "rf_w2v = RandomForestClassifier(n_jobs=-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "uF1NxrO46-7p",
    "outputId": "4336475d-d1e6-4132-873d-bd54a40a533b"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-*\n",
      "RandomForestClassifier(n_jobs=-1)\n",
      "training time : 120.71666288375854 seconds\n",
      "*-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-*\n",
      "------------------------------------------------------------\n",
      "The Training accuracy score  is 0.9965 \n",
      "The Testing accuracy score is 0.3675 \n",
      "The precision score is 0.2517116627055804\n",
      "The recall score is 0.3675  \n",
      "The Hamming loss is  0.6325\n",
      "The classification report is \n",
      " :                          precision    recall  f1-score   support\n",
      "\n",
      "             Accounting       0.00      0.00      0.00        21\n",
      "            Advertising       0.00      0.00      0.00        25\n",
      "            Agriculture       0.00      0.00      0.00         7\n",
      "           Architecture       0.00      0.00      0.00         9\n",
      "                   Arts       0.00      0.00      0.00       193\n",
      "             Automotive       0.00      0.00      0.00         5\n",
      "                Banking       0.00      0.00      0.00        26\n",
      "                Biotech       0.00      0.00      0.00        13\n",
      "       BusinessServices       0.00      0.00      0.00        26\n",
      "              Chemicals       0.00      0.00      0.00        23\n",
      "   Communications-Media       0.00      0.00      0.00       122\n",
      "           Construction       0.00      0.00      0.00         5\n",
      "             Consulting       0.00      0.00      0.00        40\n",
      "              Education       0.60      0.02      0.03       170\n",
      "            Engineering       0.00      0.00      0.00        65\n",
      "            Environment       0.00      0.00      0.00         4\n",
      "                Fashion       0.00      0.00      0.00        24\n",
      "             Government       0.00      0.00      0.00        42\n",
      "         HumanResources       0.00      0.00      0.00        20\n",
      "               Internet       0.00      0.00      0.00        93\n",
      "      InvestmentBanking       0.00      0.00      0.00         8\n",
      "                    Law       0.00      0.00      0.00        59\n",
      "LawEnforcement-Security       0.00      0.00      0.00        10\n",
      "          Manufacturing       0.00      0.00      0.00        13\n",
      "               Maritime       0.00      0.00      0.00         1\n",
      "              Marketing       0.00      0.00      0.00        27\n",
      "               Military       0.00      0.00      0.00        19\n",
      "      Museums-Libraries       0.00      0.00      0.00        20\n",
      "             Non-Profit       0.00      0.00      0.00        85\n",
      "             Publishing       0.00      0.00      0.00        40\n",
      "             RealEstate       0.00      0.00      0.00        19\n",
      "               Religion       0.00      0.00      0.00        32\n",
      "                Science       0.00      0.00      0.00        42\n",
      "      Sports-Recreation       0.00      0.00      0.00        17\n",
      "                Student       0.33      0.23      0.27       901\n",
      "             Technology       0.20      0.00      0.01       242\n",
      "     Telecommunications       0.00      0.00      0.00        24\n",
      "                Tourism       0.00      0.00      0.00        11\n",
      "         Transportation       0.00      0.00      0.00        11\n",
      "                Unknown       0.38      0.85      0.52      1486\n",
      "\n",
      "               accuracy                           0.37      4000\n",
      "              macro avg       0.04      0.03      0.02      4000\n",
      "           weighted avg       0.25      0.37      0.26      4000\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "models_metrics(rf_w2v,x_train_w2v,y_train,x_test_w2v,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "c_Dcs9d2PSTB",
    "outputId": "4319bfa1-52db-478d-ea83-cf5c2ce713c8"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The ROC-AUC score is 0.5309362728665894\n"
     ]
    }
   ],
   "source": [
    "roc_aucscore(rf_w2v,x_test_w2v,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "vAMKQiCInlfs",
    "outputId": "2e852de2-bfb1-444b-fae3-181ac7c6bd21"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "400000it [00:48, 8282.37it/s] "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 400000 word vectors.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "# load the GloVe vectors in a dictionary:\n",
    "\n",
    "embeddings_index = {}\n",
    "f = open('glove.6B.300d.txt', encoding=\"utf8\")\n",
    "\n",
    "for line in tqdm(f):\n",
    "    # Splitting the each line \n",
    "    values = line.split()    \n",
    "    word = values[0]\n",
    "    coefs = np.array(values[1:], dtype='float32')\n",
    "    embeddings_index[word] = coefs\n",
    "f.close()\n",
    "\n",
    "print('Found %s word vectors.' % len(embeddings_index))\n",
    "# This function creates a normalized vector for the whole sentence\n",
    "\n",
    "def sent2vec(s):\n",
    "    words = word_tokenize(s)\n",
    "    N = []\n",
    "    for w in words:\n",
    "        try:\n",
    "            N.append(embeddings_index[w])\n",
    "        except:\n",
    "            continue\n",
    "    N = np.array(N)\n",
    "    v = N.sum(axis=0)\n",
    "    if type(v) != np.ndarray:\n",
    "        return np.zeros(300)\n",
    "    return v / np.sqrt((v ** 2).sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "gddyLFK8nmsR",
    "outputId": "01496a98-8fd5-40fc-d2fd-1626af61203a"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 16000/16000 [00:24<00:00, 653.55it/s]\n",
      "100%|██████████| 4000/4000 [00:05<00:00, 784.93it/s]\n"
     ]
    }
   ],
   "source": [
    "from tqdm import tqdm\n",
    "# Create sentence vectors using the above function for training and validation set\n",
    "x_train_glove = [sent2vec(x) for x in tqdm(x_train)]\n",
    "x_test_glove = [sent2vec(x) for x in tqdm(x_test)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "jwneHjsTnn_R"
   },
   "outputs": [],
   "source": [
    "rf_glove = RandomForestClassifier(n_jobs = -1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "-kYBvAfupFRA",
    "outputId": "8d75c4d8-a05a-4e8e-9110-3e70028e03d6"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-*\n",
      "RandomForestClassifier(n_jobs=-1)\n",
      "training time : 28.302907466888428 seconds\n",
      "*-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-*\n",
      "------------------------------------------------------------\n",
      "The Training accuracy score  is 0.5249375 \n",
      "The Testing accuracy score is 0.331 \n",
      "The precision score is 0.21837881801661377\n",
      "The recall score is 0.331  \n",
      "The Hamming loss is  0.669\n",
      "The classification report is \n",
      " :                          precision    recall  f1-score   support\n",
      "\n",
      "             Accounting       0.00      0.00      0.00        21\n",
      "            Advertising       0.00      0.00      0.00        25\n",
      "            Agriculture       0.00      0.00      0.00         7\n",
      "           Architecture       0.00      0.00      0.00         9\n",
      "                   Arts       0.02      0.01      0.01       193\n",
      "             Automotive       0.00      0.00      0.00         5\n",
      "                Banking       0.00      0.00      0.00        26\n",
      "                Biotech       0.00      0.00      0.00        13\n",
      "       BusinessServices       0.00      0.00      0.00        26\n",
      "              Chemicals       0.00      0.00      0.00        23\n",
      "   Communications-Media       0.04      0.01      0.01       122\n",
      "           Construction       0.00      0.00      0.00         5\n",
      "             Consulting       0.22      0.05      0.08        40\n",
      "              Education       0.13      0.04      0.06       170\n",
      "            Engineering       0.07      0.02      0.03        65\n",
      "            Environment       0.00      0.00      0.00         4\n",
      "                Fashion       0.00      0.00      0.00        24\n",
      "             Government       0.00      0.00      0.00        42\n",
      "         HumanResources       0.17      0.05      0.08        20\n",
      "               Internet       0.00      0.00      0.00        93\n",
      "      InvestmentBanking       0.00      0.00      0.00         8\n",
      "                    Law       0.00      0.00      0.00        59\n",
      "LawEnforcement-Security       0.00      0.00      0.00        10\n",
      "          Manufacturing       0.00      0.00      0.00        13\n",
      "               Maritime       0.00      0.00      0.00         1\n",
      "              Marketing       0.00      0.00      0.00        27\n",
      "               Military       0.00      0.00      0.00        19\n",
      "      Museums-Libraries       0.00      0.00      0.00        20\n",
      "             Non-Profit       0.00      0.00      0.00        85\n",
      "             Publishing       0.00      0.00      0.00        40\n",
      "             RealEstate       0.00      0.00      0.00        19\n",
      "               Religion       0.00      0.00      0.00        32\n",
      "                Science       0.40      0.05      0.09        42\n",
      "      Sports-Recreation       0.00      0.00      0.00        17\n",
      "                Student       0.26      0.13      0.17       901\n",
      "             Technology       0.07      0.02      0.03       242\n",
      "     Telecommunications       0.00      0.00      0.00        24\n",
      "                Tourism       0.00      0.00      0.00        11\n",
      "         Transportation       0.00      0.00      0.00        11\n",
      "                Unknown       0.38      0.80      0.51      1486\n",
      "\n",
      "               accuracy                           0.33      4000\n",
      "              macro avg       0.04      0.03      0.03      4000\n",
      "           weighted avg       0.22      0.33      0.24      4000\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "models_metrics(rf_glove,x_train_glove,y_train,x_test_glove,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "DBHHHvdfRF4_",
    "outputId": "d9da1e94-a8b6-45e7-c0d5-3551071ae9ba"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The ROC-AUC score is 0.5142121863013097\n"
     ]
    }
   ],
   "source": [
    "roc_aucscore(rf_glove,x_test_glove,y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "WnW8VvAeCeLy"
   },
   "source": [
    "- By comparing all those results bag of words giving higher precision and recall and f1 score\n",
    "- The Hamming loss is also quite low when compared with other vectorization techniques"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "h74E3QxOCbkd"
   },
   "source": [
    "## Part A - Q4 B - Build classifier Models using other algorithms than base model.\n",
    "\n",
    "## Part A - Q4 C - Tune Parameters/Hyperparameters of the models.\n",
    "\n",
    "## Part A - Q4 D - Clearly print Performance Metrics."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "FOZVOB0-FBmb"
   },
   "source": [
    "# Machine learning models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "Z9o0qcPsCbRe"
   },
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import AdaBoostClassifier,BaggingClassifier,RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "I_4JqWCZCbPM"
   },
   "outputs": [],
   "source": [
    "lgt = LogisticRegression(max_iter=50000)\n",
    "gnb = GaussianNB()\n",
    "knn = KNeighborsClassifier()\n",
    "svm = SVC()\n",
    "dtree = DecisionTreeClassifier(max_depth=5)\n",
    "adb = AdaBoostClassifier()\n",
    "bc = BaggingClassifier()\n",
    "rfA = RandomForestClassifier(n_jobs=4)\n",
    "\n",
    "models = [lgt,gnb,knn,svm,dtree,adb,bc,rfA]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "1khFX5IdCbLv"
   },
   "outputs": [],
   "source": [
    "le = LabelEncoder()\n",
    "le.fit(y_train)\n",
    "y_train_le = le.transform(y_train)\n",
    "y_test_le = le.transform(y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "Wsmzud_nCbIl",
    "outputId": "ad12536e-ddd2-421d-a128-3678a74e1ce6"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-*\n",
      "LogisticRegression(max_iter=50000)\n",
      "training time : 265.26883244514465 seconds\n",
      "*-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-*\n",
      "------------------------------------------------------------\n",
      "The Training accuracy score  is 0.762375 \n",
      "The Testing accuracy score is 0.3055 \n",
      "The precision score is 0.2460881489726517\n",
      "The recall score is 0.3055  \n",
      "The Hamming loss is  0.6945\n",
      "The classification report is \n",
      " :               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.17      0.05      0.07        21\n",
      "           1       0.00      0.00      0.00        25\n",
      "           2       0.00      0.00      0.00         7\n",
      "           3       0.00      0.00      0.00         9\n",
      "           4       0.06      0.05      0.05       193\n",
      "           5       0.00      0.00      0.00         5\n",
      "           6       0.00      0.00      0.00        26\n",
      "           7       0.00      0.00      0.00        13\n",
      "           8       0.20      0.08      0.11        26\n",
      "           9       0.00      0.00      0.00        23\n",
      "          10       0.03      0.02      0.03       122\n",
      "          11       0.00      0.00      0.00         5\n",
      "          12       0.00      0.00      0.00        40\n",
      "          13       0.09      0.07      0.08       170\n",
      "          14       0.08      0.03      0.04        65\n",
      "          15       0.00      0.00      0.00         4\n",
      "          16       0.00      0.00      0.00        24\n",
      "          17       0.00      0.00      0.00        42\n",
      "          18       0.00      0.00      0.00        20\n",
      "          19       0.07      0.05      0.06        93\n",
      "          20       0.00      0.00      0.00         8\n",
      "          21       0.07      0.03      0.05        59\n",
      "          22       0.00      0.00      0.00        10\n",
      "          23       1.00      0.08      0.14        13\n",
      "          24       0.00      0.00      0.00         1\n",
      "          25       0.00      0.00      0.00        27\n",
      "          26       0.00      0.00      0.00        19\n",
      "          27       0.00      0.00      0.00        20\n",
      "          28       0.00      0.00      0.00        85\n",
      "          29       0.11      0.03      0.04        40\n",
      "          30       0.00      0.00      0.00        19\n",
      "          31       0.00      0.00      0.00        32\n",
      "          32       0.06      0.02      0.03        42\n",
      "          33       0.00      0.00      0.00        17\n",
      "          34       0.34      0.34      0.34       901\n",
      "          35       0.09      0.08      0.08       242\n",
      "          36       0.00      0.00      0.00        24\n",
      "          37       0.00      0.00      0.00        11\n",
      "          38       0.00      0.00      0.00        11\n",
      "          39       0.39      0.58      0.46      1486\n",
      "\n",
      "    accuracy                           0.31      4000\n",
      "   macro avg       0.07      0.04      0.04      4000\n",
      "weighted avg       0.25      0.31      0.27      4000\n",
      "\n",
      "*-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-*\n",
      "GaussianNB()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "training time : 0.5569860935211182 seconds\n",
      "*-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-*\n",
      "------------------------------------------------------------\n",
      "The Training accuracy score  is 0.3064375 \n",
      "The Testing accuracy score is 0.08625 \n",
      "The precision score is 0.2455783961973314\n",
      "The recall score is 0.08625  \n",
      "The Hamming loss is  0.91375\n",
      "The classification report is \n",
      " :               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.03      0.10      0.05        21\n",
      "           1       0.02      0.04      0.03        25\n",
      "           2       0.00      0.00      0.00         7\n",
      "           3       0.03      0.11      0.05         9\n",
      "           4       0.05      0.05      0.05       193\n",
      "           5       0.02      0.20      0.03         5\n",
      "           6       0.00      0.00      0.00        26\n",
      "           7       0.02      0.08      0.03        13\n",
      "           8       0.00      0.00      0.00        26\n",
      "           9       0.00      0.00      0.00        23\n",
      "          10       0.01      0.03      0.02       122\n",
      "          11       0.00      0.00      0.00         5\n",
      "          12       0.03      0.07      0.04        40\n",
      "          13       0.06      0.06      0.06       170\n",
      "          14       0.02      0.06      0.03        65\n",
      "          15       0.00      0.00      0.00         4\n",
      "          16       0.02      0.04      0.03        24\n",
      "          17       0.01      0.02      0.02        42\n",
      "          18       0.03      0.05      0.03        20\n",
      "          19       0.03      0.09      0.05        93\n",
      "          20       0.00      0.00      0.00         8\n",
      "          21       0.05      0.12      0.07        59\n",
      "          22       0.00      0.00      0.00        10\n",
      "          23       0.00      0.00      0.00        13\n",
      "          24       0.00      0.00      0.00         1\n",
      "          25       0.00      0.00      0.00        27\n",
      "          26       0.00      0.00      0.00        19\n",
      "          27       0.00      0.00      0.00        20\n",
      "          28       0.01      0.05      0.02        85\n",
      "          29       0.01      0.03      0.02        40\n",
      "          30       0.00      0.00      0.00        19\n",
      "          31       0.01      0.03      0.01        32\n",
      "          32       0.01      0.05      0.02        42\n",
      "          33       0.00      0.00      0.00        17\n",
      "          34       0.41      0.16      0.23       901\n",
      "          35       0.10      0.05      0.07       242\n",
      "          36       0.00      0.00      0.00        24\n",
      "          37       0.02      0.09      0.04        11\n",
      "          38       0.00      0.00      0.00        11\n",
      "          39       0.37      0.08      0.14      1486\n",
      "\n",
      "    accuracy                           0.09      4000\n",
      "   macro avg       0.03      0.04      0.03      4000\n",
      "weighted avg       0.25      0.09      0.12      4000\n",
      "\n",
      "*-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-*\n",
      "KNeighborsClassifier()\n",
      "training time : 0.0023772716522216797 seconds\n",
      "*-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-*\n",
      "------------------------------------------------------------\n",
      "The Training accuracy score  is 0.465 \n",
      "The Testing accuracy score is 0.2735 \n",
      "The precision score is 0.22803948046209718\n",
      "The recall score is 0.2735  \n",
      "The Hamming loss is  0.7265\n",
      "The classification report is \n",
      " :               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.00      0.00      0.00        21\n",
      "           1       0.00      0.00      0.00        25\n",
      "           2       0.00      0.00      0.00         7\n",
      "           3       0.00      0.00      0.00         9\n",
      "           4       0.04      0.04      0.04       193\n",
      "           5       0.00      0.00      0.00         5\n",
      "           6       0.02      0.04      0.03        26\n",
      "           7       0.12      0.08      0.10        13\n",
      "           8       0.07      0.08      0.08        26\n",
      "           9       0.00      0.00      0.00        23\n",
      "          10       0.05      0.04      0.05       122\n",
      "          11       0.00      0.00      0.00         5\n",
      "          12       0.04      0.03      0.03        40\n",
      "          13       0.09      0.05      0.07       170\n",
      "          14       0.06      0.02      0.02        65\n",
      "          15       0.00      0.00      0.00         4\n",
      "          16       0.00      0.00      0.00        24\n",
      "          17       0.00      0.00      0.00        42\n",
      "          18       0.00      0.00      0.00        20\n",
      "          19       0.00      0.00      0.00        93\n",
      "          20       0.00      0.00      0.00         8\n",
      "          21       0.33      0.03      0.06        59\n",
      "          22       0.00      0.00      0.00        10\n",
      "          23       0.00      0.00      0.00        13\n",
      "          24       0.00      0.00      0.00         1\n",
      "          25       0.00      0.00      0.00        27\n",
      "          26       0.00      0.00      0.00        19\n",
      "          27       0.00      0.00      0.00        20\n",
      "          28       0.00      0.00      0.00        85\n",
      "          29       0.00      0.00      0.00        40\n",
      "          30       0.12      0.05      0.07        19\n",
      "          31       0.20      0.03      0.05        32\n",
      "          32       0.00      0.00      0.00        42\n",
      "          33       0.00      0.00      0.00        17\n",
      "          34       0.27      0.36      0.31       901\n",
      "          35       0.07      0.07      0.07       242\n",
      "          36       0.00      0.00      0.00        24\n",
      "          37       0.00      0.00      0.00        11\n",
      "          38       0.00      0.00      0.00        11\n",
      "          39       0.39      0.49      0.43      1486\n",
      "\n",
      "    accuracy                           0.27      4000\n",
      "   macro avg       0.05      0.03      0.04      4000\n",
      "weighted avg       0.23      0.27      0.24      4000\n",
      "\n",
      "*-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-*\n",
      "SVC()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "training time : 1452.2271511554718 seconds\n",
      "*-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-*\n",
      "------------------------------------------------------------\n",
      "The Training accuracy score  is 0.4689375 \n",
      "The Testing accuracy score is 0.38075 \n",
      "The precision score is 0.24620744680851062\n",
      "The recall score is 0.38075  \n",
      "The Hamming loss is  0.61925\n",
      "The classification report is \n",
      " :               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.00      0.00      0.00        21\n",
      "           1       0.00      0.00      0.00        25\n",
      "           2       0.00      0.00      0.00         7\n",
      "           3       0.00      0.00      0.00         9\n",
      "           4       0.00      0.00      0.00       193\n",
      "           5       0.00      0.00      0.00         5\n",
      "           6       0.00      0.00      0.00        26\n",
      "           7       0.00      0.00      0.00        13\n",
      "           8       0.00      0.00      0.00        26\n",
      "           9       0.00      0.00      0.00        23\n",
      "          10       0.00      0.00      0.00       122\n",
      "          11       0.00      0.00      0.00         5\n",
      "          12       0.00      0.00      0.00        40\n",
      "          13       0.00      0.00      0.00       170\n",
      "          14       0.00      0.00      0.00        65\n",
      "          15       0.00      0.00      0.00         4\n",
      "          16       0.00      0.00      0.00        24\n",
      "          17       0.00      0.00      0.00        42\n",
      "          18       0.00      0.00      0.00        20\n",
      "          19       0.00      0.00      0.00        93\n",
      "          20       0.00      0.00      0.00         8\n",
      "          21       0.00      0.00      0.00        59\n",
      "          22       0.00      0.00      0.00        10\n",
      "          23       0.00      0.00      0.00        13\n",
      "          24       0.00      0.00      0.00         1\n",
      "          25       0.00      0.00      0.00        27\n",
      "          26       0.00      0.00      0.00        19\n",
      "          27       0.00      0.00      0.00        20\n",
      "          28       0.00      0.00      0.00        85\n",
      "          29       0.00      0.00      0.00        40\n",
      "          30       0.00      0.00      0.00        19\n",
      "          31       0.00      0.00      0.00        32\n",
      "          32       0.00      0.00      0.00        42\n",
      "          33       0.00      0.00      0.00        17\n",
      "          34       0.47      0.13      0.20       901\n",
      "          35       0.00      0.00      0.00       242\n",
      "          36       0.00      0.00      0.00        24\n",
      "          37       0.00      0.00      0.00        11\n",
      "          38       0.00      0.00      0.00        11\n",
      "          39       0.37      0.95      0.54      1486\n",
      "\n",
      "    accuracy                           0.38      4000\n",
      "   macro avg       0.02      0.03      0.02      4000\n",
      "weighted avg       0.25      0.38      0.24      4000\n",
      "\n",
      "*-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-*\n",
      "DecisionTreeClassifier(max_depth=5)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "training time : 2.9301257133483887 seconds\n",
      "*-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-*\n",
      "------------------------------------------------------------\n",
      "The Training accuracy score  is 0.385375 \n",
      "The Testing accuracy score is 0.3745 \n",
      "The precision score is 0.26789392337190043\n",
      "The recall score is 0.3745  \n",
      "The Hamming loss is  0.6255\n",
      "The classification report is \n",
      " :               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.00      0.00      0.00        21\n",
      "           1       0.00      0.00      0.00        25\n",
      "           2       0.00      0.00      0.00         7\n",
      "           3       0.00      0.00      0.00         9\n",
      "           4       0.00      0.00      0.00       193\n",
      "           5       0.00      0.00      0.00         5\n",
      "           6       0.00      0.00      0.00        26\n",
      "           7       0.00      0.00      0.00        13\n",
      "           8       0.50      0.04      0.07        26\n",
      "           9       0.00      0.00      0.00        23\n",
      "          10       0.00      0.00      0.00       122\n",
      "          11       0.00      0.00      0.00         5\n",
      "          12       0.00      0.00      0.00        40\n",
      "          13       0.36      0.02      0.04       170\n",
      "          14       0.00      0.00      0.00        65\n",
      "          15       0.00      0.00      0.00         4\n",
      "          16       0.00      0.00      0.00        24\n",
      "          17       0.00      0.00      0.00        42\n",
      "          18       0.00      0.00      0.00        20\n",
      "          19       0.50      0.03      0.06        93\n",
      "          20       0.00      0.00      0.00         8\n",
      "          21       0.00      0.00      0.00        59\n",
      "          22       0.00      0.00      0.00        10\n",
      "          23       0.00      0.00      0.00        13\n",
      "          24       0.00      0.00      0.00         1\n",
      "          25       0.00      0.00      0.00        27\n",
      "          26       0.00      0.00      0.00        19\n",
      "          27       0.00      0.00      0.00        20\n",
      "          28       0.00      0.00      0.00        85\n",
      "          29       0.00      0.00      0.00        40\n",
      "          30       0.00      0.00      0.00        19\n",
      "          31       0.00      0.00      0.00        32\n",
      "          32       0.00      0.00      0.00        42\n",
      "          33       0.00      0.00      0.00        17\n",
      "          34       0.37      0.17      0.23       901\n",
      "          35       0.25      0.00      0.01       242\n",
      "          36       0.00      0.00      0.00        24\n",
      "          37       0.00      0.00      0.00        11\n",
      "          38       0.00      0.00      0.00        11\n",
      "          39       0.38      0.90      0.53      1486\n",
      "\n",
      "    accuracy                           0.37      4000\n",
      "   macro avg       0.06      0.03      0.02      4000\n",
      "weighted avg       0.27      0.37      0.25      4000\n",
      "\n",
      "*-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-*\n",
      "AdaBoostClassifier()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "training time : 32.35322570800781 seconds\n",
      "*-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-*\n",
      "------------------------------------------------------------\n",
      "The Training accuracy score  is 0.3715625 \n",
      "The Testing accuracy score is 0.372 \n",
      "The precision score is 0.36333129064532266\n",
      "The recall score is 0.372  \n",
      "The Hamming loss is  0.628\n",
      "The classification report is \n",
      " :               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.00      0.00      0.00        21\n",
      "           1       0.00      0.00      0.00        25\n",
      "           2       0.00      0.00      0.00         7\n",
      "           3       0.00      0.00      0.00         9\n",
      "           4       0.00      0.00      0.00       193\n",
      "           5       0.00      0.00      0.00         5\n",
      "           6       0.00      0.00      0.00        26\n",
      "           7       0.00      0.00      0.00        13\n",
      "           8       0.00      0.00      0.00        26\n",
      "           9       0.00      0.00      0.00        23\n",
      "          10       0.00      0.00      0.00       122\n",
      "          11       0.00      0.00      0.00         5\n",
      "          12       0.00      0.00      0.00        40\n",
      "          13       0.00      0.00      0.00       170\n",
      "          14       0.00      0.00      0.00        65\n",
      "          15       0.00      0.00      0.00         4\n",
      "          16       0.00      0.00      0.00        24\n",
      "          17       0.00      0.00      0.00        42\n",
      "          18       0.00      0.00      0.00        20\n",
      "          19       0.00      0.00      0.00        93\n",
      "          20       0.00      0.00      0.00         8\n",
      "          21       0.00      0.00      0.00        59\n",
      "          22       0.00      0.00      0.00        10\n",
      "          23       0.00      0.00      0.00        13\n",
      "          24       0.00      0.00      0.00         1\n",
      "          25       0.00      0.00      0.00        27\n",
      "          26       0.00      0.00      0.00        19\n",
      "          27       0.00      0.00      0.00        20\n",
      "          28       0.00      0.00      0.00        85\n",
      "          29       0.00      0.00      0.00        40\n",
      "          30       0.00      0.00      0.00        19\n",
      "          31       0.00      0.00      0.00        32\n",
      "          32       0.00      0.00      0.00        42\n",
      "          33       0.00      0.00      0.00        17\n",
      "          34       1.00      0.00      0.00       901\n",
      "          35       0.00      0.00      0.00       242\n",
      "          36       0.00      0.00      0.00        24\n",
      "          37       0.00      0.00      0.00        11\n",
      "          38       0.00      0.00      0.00        11\n",
      "          39       0.37      1.00      0.54      1486\n",
      "\n",
      "    accuracy                           0.37      4000\n",
      "   macro avg       0.03      0.03      0.01      4000\n",
      "weighted avg       0.36      0.37      0.20      4000\n",
      "\n",
      "*-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-*\n",
      "BaggingClassifier()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "training time : 181.0156855583191 seconds\n",
      "*-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-*\n",
      "------------------------------------------------------------\n",
      "The Training accuracy score  is 0.978375 \n",
      "The Testing accuracy score is 0.33375 \n",
      "The precision score is 0.24413658809740954\n",
      "The recall score is 0.33375  \n",
      "The Hamming loss is  0.66625\n",
      "The classification report is \n",
      " :               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.00      0.00      0.00        21\n",
      "           1       0.00      0.00      0.00        25\n",
      "           2       0.00      0.00      0.00         7\n",
      "           3       0.00      0.00      0.00         9\n",
      "           4       0.14      0.05      0.07       193\n",
      "           5       0.00      0.00      0.00         5\n",
      "           6       0.00      0.00      0.00        26\n",
      "           7       0.50      0.08      0.13        13\n",
      "           8       0.00      0.00      0.00        26\n",
      "           9       0.00      0.00      0.00        23\n",
      "          10       0.14      0.04      0.06       122\n",
      "          11       0.00      0.00      0.00         5\n",
      "          12       0.00      0.00      0.00        40\n",
      "          13       0.21      0.06      0.09       170\n",
      "          14       0.00      0.00      0.00        65\n",
      "          15       0.00      0.00      0.00         4\n",
      "          16       0.00      0.00      0.00        24\n",
      "          17       0.00      0.00      0.00        42\n",
      "          18       0.00      0.00      0.00        20\n",
      "          19       0.22      0.04      0.07        93\n",
      "          20       0.00      0.00      0.00         8\n",
      "          21       0.00      0.00      0.00        59\n",
      "          22       0.00      0.00      0.00        10\n",
      "          23       0.00      0.00      0.00        13\n",
      "          24       0.00      0.00      0.00         1\n",
      "          25       0.00      0.00      0.00        27\n",
      "          26       0.00      0.00      0.00        19\n",
      "          27       0.00      0.00      0.00        20\n",
      "          28       0.00      0.00      0.00        85\n",
      "          29       0.00      0.00      0.00        40\n",
      "          30       0.00      0.00      0.00        19\n",
      "          31       0.00      0.00      0.00        32\n",
      "          32       0.00      0.00      0.00        42\n",
      "          33       0.00      0.00      0.00        17\n",
      "          34       0.30      0.42      0.35       901\n",
      "          35       0.12      0.05      0.07       242\n",
      "          36       0.00      0.00      0.00        24\n",
      "          37       0.00      0.00      0.00        11\n",
      "          38       0.00      0.00      0.00        11\n",
      "          39       0.39      0.62      0.47      1486\n",
      "\n",
      "    accuracy                           0.33      4000\n",
      "   macro avg       0.05      0.03      0.03      4000\n",
      "weighted avg       0.24      0.33      0.27      4000\n",
      "\n",
      "*-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-*\n",
      "RandomForestClassifier(n_jobs=4)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "training time : 43.07795310020447 seconds\n",
      "*-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-*\n",
      "------------------------------------------------------------\n",
      "The Training accuracy score  is 0.993 \n",
      "The Testing accuracy score is 0.37625 \n",
      "The precision score is 0.2821511363636363\n",
      "The recall score is 0.37625  \n",
      "The Hamming loss is  0.62375\n",
      "The classification report is \n",
      " :               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.00      0.00      0.00        21\n",
      "           1       0.00      0.00      0.00        25\n",
      "           2       0.00      0.00      0.00         7\n",
      "           3       0.00      0.00      0.00         9\n",
      "           4       0.00      0.00      0.00       193\n",
      "           5       0.00      0.00      0.00         5\n",
      "           6       0.00      0.00      0.00        26\n",
      "           7       1.00      0.08      0.14        13\n",
      "           8       0.00      0.00      0.00        26\n",
      "           9       0.00      0.00      0.00        23\n",
      "          10       0.20      0.01      0.02       122\n",
      "          11       0.00      0.00      0.00         5\n",
      "          12       0.00      0.00      0.00        40\n",
      "          13       0.40      0.02      0.04       170\n",
      "          14       0.00      0.00      0.00        65\n",
      "          15       0.00      0.00      0.00         4\n",
      "          16       0.00      0.00      0.00        24\n",
      "          17       0.00      0.00      0.00        42\n",
      "          18       0.00      0.00      0.00        20\n",
      "          19       0.67      0.04      0.08        93\n",
      "          20       0.00      0.00      0.00         8\n",
      "          21       0.00      0.00      0.00        59\n",
      "          22       0.00      0.00      0.00        10\n",
      "          23       0.00      0.00      0.00        13\n",
      "          24       0.00      0.00      0.00         1\n",
      "          25       0.00      0.00      0.00        27\n",
      "          26       0.00      0.00      0.00        19\n",
      "          27       0.00      0.00      0.00        20\n",
      "          28       0.00      0.00      0.00        85\n",
      "          29       0.00      0.00      0.00        40\n",
      "          30       0.00      0.00      0.00        19\n",
      "          31       0.00      0.00      0.00        32\n",
      "          32       0.00      0.00      0.00        42\n",
      "          33       0.00      0.00      0.00        17\n",
      "          34       0.38      0.27      0.32       901\n",
      "          35       0.22      0.02      0.04       242\n",
      "          36       0.00      0.00      0.00        24\n",
      "          37       0.00      0.00      0.00        11\n",
      "          38       0.00      0.00      0.00        11\n",
      "          39       0.38      0.84      0.52      1486\n",
      "\n",
      "    accuracy                           0.38      4000\n",
      "   macro avg       0.08      0.03      0.03      4000\n",
      "weighted avg       0.28      0.38      0.27      4000\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "for i in models:\n",
    "  models_metrics(i,x_train_bow2,y_train_le,x_test_bow2,y_test_le)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "hkfHt8hk_TWD"
   },
   "outputs": [],
   "source": [
    "from sklearn.metrics import f1_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "wzKYLZHd_ojK"
   },
   "outputs": [],
   "source": [
    "test_score = []\n",
    "pr = []\n",
    "re = []\n",
    "f1s = []\n",
    "hm = []\n",
    "def func(model):\n",
    "  y_pred = model.predict(x_test_bow2)\n",
    "  ts = accuracy_score(y_test_le,y_pred)\n",
    "  p = precision_score(y_test_le,y_pred,average = 'weighted')\n",
    "  r = recall_score(y_test_le,y_pred,average = 'weighted')\n",
    "  f1 = f1_score(y_test_le,y_pred,average = 'weighted')\n",
    "  h = hamming_loss(y_test_le,y_pred)\n",
    "  test_score.append(ts)\n",
    "  pr.append(p)\n",
    "  re.append(r)\n",
    "  f1s.append(f1)\n",
    "  hm.append(h)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "rb-d-GJMCFaV",
    "outputId": "53f35c83-4b6c-46eb-f389-24e14d775053"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      "  0%|          | 0/8 [00:00<?, ?it/s]/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      " 25%|██▌       | 2/8 [00:02<00:07,  1.23s/it]/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      " 38%|███▊      | 3/8 [00:14<00:27,  5.55s/it]/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      " 50%|█████     | 4/8 [03:26<05:00, 75.15s/it]/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      " 75%|███████▌  | 6/8 [03:27<01:13, 36.66s/it]/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      " 88%|████████▊ | 7/8 [03:28<00:27, 27.11s/it]/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "100%|██████████| 8/8 [03:29<00:00, 26.18s/it]\n"
     ]
    }
   ],
   "source": [
    "model_name  = []\n",
    "for i in tqdm(models):\n",
    "  model_name.append(i)\n",
    "  func(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "cvu_kTXNEgsJ"
   },
   "outputs": [],
   "source": [
    "mds_sc = pd.DataFrame()\n",
    "mds_sc['model'] = model_name\n",
    "mds_sc['test_scores'] = test_score\n",
    "mds_sc['precision'] = pr\n",
    "mds_sc['recall'] = re\n",
    "mds_sc['f1 score'] = f1s\n",
    "mds_sc['hamming_loss'] = hm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 300
    },
    "id": "B7BzcjKVLgOg",
    "outputId": "7a58fbe5-e22d-4a29-928a-90aea9a639bf"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-3993e09a-2eeb-47c3-8594-52862a24c83c\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model</th>\n",
       "      <th>test_scores</th>\n",
       "      <th>precision</th>\n",
       "      <th>recall</th>\n",
       "      <th>f1 score</th>\n",
       "      <th>hamming_loss</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>LogisticRegression(max_iter=50000)</td>\n",
       "      <td>0.30550</td>\n",
       "      <td>0.246088</td>\n",
       "      <td>0.30550</td>\n",
       "      <td>0.266598</td>\n",
       "      <td>0.69450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>GaussianNB()</td>\n",
       "      <td>0.08625</td>\n",
       "      <td>0.245578</td>\n",
       "      <td>0.08625</td>\n",
       "      <td>0.117490</td>\n",
       "      <td>0.91375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>KNeighborsClassifier()</td>\n",
       "      <td>0.27350</td>\n",
       "      <td>0.228039</td>\n",
       "      <td>0.27350</td>\n",
       "      <td>0.244609</td>\n",
       "      <td>0.72650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>SVC()</td>\n",
       "      <td>0.38075</td>\n",
       "      <td>0.246207</td>\n",
       "      <td>0.38075</td>\n",
       "      <td>0.244570</td>\n",
       "      <td>0.61925</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>DecisionTreeClassifier(max_depth=5)</td>\n",
       "      <td>0.37450</td>\n",
       "      <td>0.267894</td>\n",
       "      <td>0.37450</td>\n",
       "      <td>0.252521</td>\n",
       "      <td>0.62550</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>(DecisionTreeClassifier(max_depth=1, random_st...</td>\n",
       "      <td>0.37200</td>\n",
       "      <td>0.363331</td>\n",
       "      <td>0.37200</td>\n",
       "      <td>0.202329</td>\n",
       "      <td>0.62800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>(DecisionTreeClassifier(random_state=662531326...</td>\n",
       "      <td>0.33375</td>\n",
       "      <td>0.244137</td>\n",
       "      <td>0.33375</td>\n",
       "      <td>0.270433</td>\n",
       "      <td>0.66625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>(DecisionTreeClassifier(max_features='sqrt', r...</td>\n",
       "      <td>0.37625</td>\n",
       "      <td>0.282151</td>\n",
       "      <td>0.37625</td>\n",
       "      <td>0.273265</td>\n",
       "      <td>0.62375</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3993e09a-2eeb-47c3-8594-52862a24c83c')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-3993e09a-2eeb-47c3-8594-52862a24c83c button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-3993e09a-2eeb-47c3-8594-52862a24c83c');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "                                               model  test_scores  precision  \\\n",
       "0                 LogisticRegression(max_iter=50000)      0.30550   0.246088   \n",
       "1                                       GaussianNB()      0.08625   0.245578   \n",
       "2                             KNeighborsClassifier()      0.27350   0.228039   \n",
       "3                                              SVC()      0.38075   0.246207   \n",
       "4                DecisionTreeClassifier(max_depth=5)      0.37450   0.267894   \n",
       "5  (DecisionTreeClassifier(max_depth=1, random_st...      0.37200   0.363331   \n",
       "6  (DecisionTreeClassifier(random_state=662531326...      0.33375   0.244137   \n",
       "7  (DecisionTreeClassifier(max_features='sqrt', r...      0.37625   0.282151   \n",
       "\n",
       "    recall  f1 score  hamming_loss  \n",
       "0  0.30550  0.266598       0.69450  \n",
       "1  0.08625  0.117490       0.91375  \n",
       "2  0.27350  0.244609       0.72650  \n",
       "3  0.38075  0.244570       0.61925  \n",
       "4  0.37450  0.252521       0.62550  \n",
       "5  0.37200  0.202329       0.62800  \n",
       "6  0.33375  0.270433       0.66625  \n",
       "7  0.37625  0.273265       0.62375  "
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mds_sc"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "9eyhhpxQGFsg"
   },
   "source": [
    "- Logistic Regression,SVM,RandomForest classifiers are giving better results\n",
    "\n",
    "- I taken F1 score and Hamming loss as measures"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "PCtNku5NE2L7"
   },
   "source": [
    "# Deep Learning models\n",
    "## ANN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "OW7fzCzatGI-"
   },
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import LSTM,Dense,Dropout\n",
    "from tensorflow.keras.utils import to_categorical"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "uxSu0xtmhDfr"
   },
   "outputs": [],
   "source": [
    "#converting test sets for ANN\n",
    "y_train_1 = to_categorical(y_train_le,40)\n",
    "y_test_1 = to_categorical(y_test_le,40)\n",
    "\n",
    "x_train_1 = np.reshape(x_train_bow2,(x_train_bow2.shape[0],1,x_train_bow2.shape[1]))\n",
    "x_test_1 = np.reshape(x_test_bow2,(x_test_bow2.shape[0],1,x_test_bow2.shape[1]))\n",
    "\n",
    "#ANN model\n",
    "\n",
    "model_ann = Sequential()\n",
    "model_ann.add(Dense(128,input_shape = (3000,) ))\n",
    "model_ann.add(Dense(64,activation='relu'))\n",
    "model_ann.add(Dense(32))\n",
    "\n",
    "model_ann.add(Dense(40,activation='softmax'))\n",
    "#compile the model\n",
    "model_ann.compile(loss = 'categorical_crossentropy',optimizer = 'adam',metrics =['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "Y9vmkyD0sCgQ",
    "outputId": "ff0d4b73-d97f-4d0f-f09a-b08e675683f1"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "1600/1600 [==============================] - 10s 6ms/step - loss: 2.4019 - accuracy: 0.3737 - val_loss: 2.3260 - val_accuracy: 0.3747\n",
      "Epoch 2/20\n",
      "1600/1600 [==============================] - 8s 5ms/step - loss: 2.0871 - accuracy: 0.4140 - val_loss: 2.4189 - val_accuracy: 0.3656\n",
      "Epoch 3/20\n",
      "1600/1600 [==============================] - 8s 5ms/step - loss: 1.7321 - accuracy: 0.4858 - val_loss: 2.7452 - val_accuracy: 0.3147\n",
      "Epoch 4/20\n",
      "1600/1600 [==============================] - 9s 6ms/step - loss: 1.3031 - accuracy: 0.6074 - val_loss: 3.2129 - val_accuracy: 0.2934\n",
      "Epoch 5/20\n",
      "1600/1600 [==============================] - 8s 5ms/step - loss: 0.9233 - accuracy: 0.7238 - val_loss: 4.0177 - val_accuracy: 0.2887\n",
      "Epoch 6/20\n",
      "1600/1600 [==============================] - 8s 5ms/step - loss: 0.6753 - accuracy: 0.8076 - val_loss: 4.8295 - val_accuracy: 0.2772\n",
      "Epoch 7/20\n",
      "1600/1600 [==============================] - 9s 5ms/step - loss: 0.5442 - accuracy: 0.8420 - val_loss: 5.7540 - val_accuracy: 0.2688\n",
      "Epoch 8/20\n",
      "1600/1600 [==============================] - 9s 5ms/step - loss: 0.4203 - accuracy: 0.8837 - val_loss: 6.6975 - val_accuracy: 0.2553\n",
      "Epoch 9/20\n",
      "1600/1600 [==============================] - 8s 5ms/step - loss: 0.4121 - accuracy: 0.8910 - val_loss: 6.6946 - val_accuracy: 0.2581\n",
      "Epoch 10/20\n",
      "1600/1600 [==============================] - 9s 6ms/step - loss: 0.3655 - accuracy: 0.9022 - val_loss: 7.4085 - val_accuracy: 0.2503\n",
      "Epoch 11/20\n",
      "1600/1600 [==============================] - 8s 5ms/step - loss: 0.2929 - accuracy: 0.9246 - val_loss: 7.8338 - val_accuracy: 0.2775\n",
      "Epoch 12/20\n",
      "1600/1600 [==============================] - 9s 6ms/step - loss: 0.2801 - accuracy: 0.9291 - val_loss: 8.8389 - val_accuracy: 0.2387\n",
      "Epoch 13/20\n",
      "1600/1600 [==============================] - 10s 6ms/step - loss: 0.2936 - accuracy: 0.9262 - val_loss: 9.1795 - val_accuracy: 0.2641\n",
      "Epoch 14/20\n",
      "1600/1600 [==============================] - 9s 6ms/step - loss: 0.2422 - accuracy: 0.9391 - val_loss: 9.7617 - val_accuracy: 0.2491\n",
      "Epoch 15/20\n",
      "1600/1600 [==============================] - 8s 5ms/step - loss: 0.2624 - accuracy: 0.9290 - val_loss: 9.8339 - val_accuracy: 0.2619\n",
      "Epoch 16/20\n",
      "1600/1600 [==============================] - 9s 5ms/step - loss: 0.2219 - accuracy: 0.9424 - val_loss: 10.3124 - val_accuracy: 0.2537\n",
      "Epoch 17/20\n",
      "1600/1600 [==============================] - 9s 6ms/step - loss: 0.1854 - accuracy: 0.9523 - val_loss: 10.6890 - val_accuracy: 0.2650\n",
      "Epoch 18/20\n",
      "1600/1600 [==============================] - 8s 5ms/step - loss: 0.2021 - accuracy: 0.9488 - val_loss: 10.9216 - val_accuracy: 0.2572\n",
      "Epoch 19/20\n",
      "1600/1600 [==============================] - 9s 6ms/step - loss: 0.2280 - accuracy: 0.9472 - val_loss: 11.4096 - val_accuracy: 0.2497\n",
      "Epoch 20/20\n",
      "1600/1600 [==============================] - 9s 5ms/step - loss: 0.2102 - accuracy: 0.9488 - val_loss: 11.7032 - val_accuracy: 0.2397\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x7f9e75e97730>"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Training the model\n",
    "model_ann.fit(x_train_bow2,y_train_1,epochs=20,batch_size=8,validation_split=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "-ax3XioVvTZi",
    "outputId": "552b0c59-e63c-468d-a562-eb182f549822"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "125/125 [==============================] - 1s 4ms/step - loss: 11.9146 - accuracy: 0.2447\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[11.914551734924316, 0.2447499930858612]"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#evaluating on test set\n",
    "model_ann.evaluate(x_test_bow2,y_test_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "IKI9l_7FipFJ",
    "outputId": "ef7dbb5f-a660-47e5-82a8-6ea4bc848d58"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "125/125 [==============================] - 0s 2ms/step\n"
     ]
    }
   ],
   "source": [
    "# prediction of test set\n",
    "y_pred_ann = model_ann.predict(x_test_bow2)\n",
    "y_pred_ann1 = [np.argmax(x) for x in y_pred_ann]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "tdMODb23i-L3"
   },
   "outputs": [],
   "source": [
    "#function for metrics for deep learning models\n",
    "def dnn_metrics(y_test,y_pred):\n",
    "    print(\"--\"*30)\n",
    "    print(\"The Testing accuracy score is {} \".format(accuracy_score(y_test,y_pred)))\n",
    "    print(\"The precision score is {}\".format(precision_score(y_test,y_pred,average='weighted')))\n",
    "    print(\"The recall score is {}  \".format(recall_score(y_test,y_pred,average = 'weighted')))\n",
    "    print('The Hamming loss is ', hamming_loss(y_test,y_pred))\n",
    "    print(\"The classification report is \\n :\" , classification_report(y_test,y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "8XkPWLFzxfh1",
    "outputId": "c8f3042f-a636-4d07-d08c-340cac1ea02e"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "------------------------------------------------------------\n",
      "The Testing accuracy score is 0.24475 \n",
      "The precision score is 0.2398743097829706\n",
      "The recall score is 0.24475  \n",
      "The Hamming loss is  0.75525\n",
      "The classification report is \n",
      " :               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.00      0.00      0.00        21\n",
      "           1       0.00      0.00      0.00        25\n",
      "           2       0.00      0.00      0.00         7\n",
      "           3       0.00      0.00      0.00         9\n",
      "           4       0.06      0.05      0.05       193\n",
      "           5       0.00      0.00      0.00         5\n",
      "           6       0.00      0.00      0.00        26\n",
      "           7       0.11      0.08      0.09        13\n",
      "           8       0.00      0.00      0.00        26\n",
      "           9       0.11      0.04      0.06        23\n",
      "          10       0.05      0.04      0.05       122\n",
      "          11       0.00      0.00      0.00         5\n",
      "          12       0.02      0.03      0.02        40\n",
      "          13       0.05      0.07      0.06       170\n",
      "          14       0.09      0.05      0.06        65\n",
      "          15       0.00      0.00      0.00         4\n",
      "          16       0.00      0.00      0.00        24\n",
      "          17       0.00      0.00      0.00        42\n",
      "          18       0.00      0.00      0.00        20\n",
      "          19       0.06      0.05      0.06        93\n",
      "          20       0.00      0.00      0.00         8\n",
      "          21       0.04      0.03      0.04        59\n",
      "          22       0.00      0.00      0.00        10\n",
      "          23       0.10      0.08      0.09        13\n",
      "          24       0.00      0.00      0.00         1\n",
      "          25       0.00      0.00      0.00        27\n",
      "          26       0.00      0.00      0.00        19\n",
      "          27       0.05      0.05      0.05        20\n",
      "          28       0.05      0.06      0.05        85\n",
      "          29       0.02      0.03      0.02        40\n",
      "          30       0.00      0.00      0.00        19\n",
      "          31       0.05      0.03      0.04        32\n",
      "          32       0.04      0.05      0.04        42\n",
      "          33       0.06      0.06      0.06        17\n",
      "          34       0.31      0.26      0.28       901\n",
      "          35       0.11      0.12      0.11       242\n",
      "          36       0.03      0.04      0.04        24\n",
      "          37       0.00      0.00      0.00        11\n",
      "          38       0.00      0.00      0.00        11\n",
      "          39       0.40      0.45      0.42      1486\n",
      "\n",
      "    accuracy                           0.24      4000\n",
      "   macro avg       0.05      0.04      0.04      4000\n",
      "weighted avg       0.24      0.24      0.24      4000\n",
      "\n"
     ]
    }
   ],
   "source": [
    "dnn_metrics(y_test_le,y_pred_ann1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "f6tBC2HtEaZJ"
   },
   "source": [
    "- simple ANN gives quite less scores compared with machine learning models"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "uqHQZGimExHM"
   },
   "source": [
    "# LSTM model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "gUYRp-dACbCf",
    "outputId": "a8ec9bf8-142d-4402-b665-61533f2fd108"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "1280/1280 [==============================] - 25s 17ms/step - loss: 2.3479 - accuracy: 0.3784 - val_loss: 2.2819 - val_accuracy: 0.3806\n",
      "Epoch 2/10\n",
      "1280/1280 [==============================] - 20s 15ms/step - loss: 2.1565 - accuracy: 0.4159 - val_loss: 2.3082 - val_accuracy: 0.3784\n",
      "Epoch 3/10\n",
      "1280/1280 [==============================] - 21s 16ms/step - loss: 1.8713 - accuracy: 0.4816 - val_loss: 2.4671 - val_accuracy: 0.3609\n",
      "Epoch 4/10\n",
      "1280/1280 [==============================] - 20s 16ms/step - loss: 1.3577 - accuracy: 0.6213 - val_loss: 2.8911 - val_accuracy: 0.3128\n",
      "Epoch 5/10\n",
      "1280/1280 [==============================] - 21s 16ms/step - loss: 0.8165 - accuracy: 0.7812 - val_loss: 3.5294 - val_accuracy: 0.2966\n",
      "Epoch 6/10\n",
      "1280/1280 [==============================] - 21s 16ms/step - loss: 0.4679 - accuracy: 0.8821 - val_loss: 4.0332 - val_accuracy: 0.2769\n",
      "Epoch 7/10\n",
      "1280/1280 [==============================] - 20s 16ms/step - loss: 0.2779 - accuracy: 0.9319 - val_loss: 4.4894 - val_accuracy: 0.2775\n",
      "Epoch 8/10\n",
      "1280/1280 [==============================] - 21s 16ms/step - loss: 0.1720 - accuracy: 0.9575 - val_loss: 5.0059 - val_accuracy: 0.2831\n",
      "Epoch 9/10\n",
      "1280/1280 [==============================] - 20s 16ms/step - loss: 0.1156 - accuracy: 0.9694 - val_loss: 5.3950 - val_accuracy: 0.2706\n",
      "Epoch 10/10\n",
      "1280/1280 [==============================] - 20s 16ms/step - loss: 0.0865 - accuracy: 0.9766 - val_loss: 5.6837 - val_accuracy: 0.2753\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x7f9e2ebd84f0>"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import LSTM,Dense,Dropout\n",
    "from tensorflow.keras.utils import to_categorical\n",
    "\n",
    "y_train_1 = to_categorical(y_train_le,40)\n",
    "y_test_1 = to_categorical(y_test_le,40)\n",
    "x_train_1 = np.reshape(x_train_bow2,(x_train_bow2.shape[0],1,x_train_bow2.shape[1]))\n",
    "x_test_1 = np.reshape(x_test_bow2,(x_test_bow2.shape[0],1,x_test_bow2.shape[1]))\n",
    "model = Sequential()\n",
    "model.add(LSTM(128,input_shape = (1,3000),return_sequences=True))\n",
    "model.add(LSTM(64))\n",
    "model.add(Dense(40,activation='softmax'))\n",
    "\n",
    "model.compile(loss = 'categorical_crossentropy',optimizer = 'adam',metrics =['accuracy'])\n",
    "\n",
    "model.fit(x_train_1,y_train_1,epochs=10,batch_size=10,validation_split=0.2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "XJ8PS29GWv3f",
    "outputId": "dd8674b4-0990-4df6-9b9f-1322cac285db"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "125/125 [==============================] - 1s 5ms/step\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.00      0.00      0.00        21\n",
      "           1       0.00      0.00      0.00        25\n",
      "           2       0.00      0.00      0.00         7\n",
      "           3       0.00      0.00      0.00         9\n",
      "           4       0.06      0.04      0.05       193\n",
      "           5       0.00      0.00      0.00         5\n",
      "           6       0.00      0.00      0.00        26\n",
      "           7       0.33      0.08      0.12        13\n",
      "           8       0.05      0.04      0.04        26\n",
      "           9       0.00      0.00      0.00        23\n",
      "          10       0.06      0.05      0.05       122\n",
      "          11       0.00      0.00      0.00         5\n",
      "          12       0.00      0.00      0.00        40\n",
      "          13       0.09      0.08      0.08       170\n",
      "          14       0.02      0.02      0.02        65\n",
      "          15       0.00      0.00      0.00         4\n",
      "          16       0.00      0.00      0.00        24\n",
      "          17       0.00      0.00      0.00        42\n",
      "          18       0.00      0.00      0.00        20\n",
      "          19       0.03      0.01      0.02        93\n",
      "          20       0.00      0.00      0.00         8\n",
      "          21       0.07      0.03      0.04        59\n",
      "          22       0.00      0.00      0.00        10\n",
      "          23       0.00      0.00      0.00        13\n",
      "          24       0.00      0.00      0.00         1\n",
      "          25       0.05      0.04      0.04        27\n",
      "          26       0.00      0.00      0.00        19\n",
      "          27       0.00      0.00      0.00        20\n",
      "          28       0.04      0.02      0.03        85\n",
      "          29       0.05      0.03      0.03        40\n",
      "          30       0.07      0.05      0.06        19\n",
      "          31       0.07      0.06      0.07        32\n",
      "          32       0.08      0.05      0.06        42\n",
      "          33       0.06      0.06      0.06        17\n",
      "          34       0.31      0.36      0.34       901\n",
      "          35       0.08      0.07      0.08       242\n",
      "          36       0.00      0.00      0.00        24\n",
      "          37       0.00      0.00      0.00        11\n",
      "          38       0.00      0.00      0.00        11\n",
      "          39       0.38      0.47      0.42      1486\n",
      "\n",
      "    accuracy                           0.27      4000\n",
      "   macro avg       0.05      0.04      0.04      4000\n",
      "weighted avg       0.23      0.27      0.25      4000\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "y_pred = model.predict(x_test_1)\n",
    "y_pred_1 = [np.argmax(x) for x in y_pred]\n",
    "\n",
    "print(classification_report(y_test_le,y_pred_1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "YdRtl0fYFVqw"
   },
   "source": [
    "- LSTM model giving better F1 score , I will try random forest and Lstm for model development"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "GE56hjt-OWYZ"
   },
   "source": [
    "### Model Development"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "OPgEfz-wGT6h"
   },
   "source": [
    "#### class imbalance is the main issue and some other isuues like large vocabulary , first I deal with class imbalance problem"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "kOV7D3WCGqpq",
    "outputId": "d6544a06-cca8-4c60-e407-0e528ec2721e"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "high classes : ['Unknown', 'Student', 'Technology']\n",
      "low classes : ['Arts', 'Education', 'Communications-Media', 'Internet', 'Non-Profit', 'Engineering', 'Law', 'Publishing', 'Science', 'Government', 'Consulting', 'Religion', 'Fashion', 'Marketing', 'Advertising', 'BusinessServices', 'Banking', 'Chemicals', 'Telecommunications', 'Accounting', 'Museums-Libraries', 'Military', 'Sports-Recreation', 'HumanResources', 'RealEstate', 'Manufacturing', 'Biotech', 'Transportation', 'Tourism', 'LawEnforcement-Security', 'Architecture', 'InvestmentBanking', 'Agriculture', 'Automotive', 'Construction', 'Environment', 'Maritime']\n"
     ]
    }
   ],
   "source": [
    "## I'm dividing the topics as higher (greater than 5%) and lower (less than 5%) classes\n",
    "topics_1 = []\n",
    "topics_2 = []\n",
    "topics = final_df['topic'].value_counts(normalize=True)\n",
    "for i in topics.index:\n",
    "  if topics[i]*100 >= 5 :     #topics which are greater than 5% \n",
    "    topics_1.append(i)\n",
    "  else:\n",
    "    topics_2.append(i)\n",
    "print(\"high classes :\",topics_1)\n",
    "print(\"low classes :\",topics_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "uk_zU3XBvgva"
   },
   "outputs": [],
   "source": [
    "df9 = final_df.copy()\n",
    "# replacing lower classes, with 'other topics'\n",
    "df9['topic']=df9['topic'].replace(topics_2,'other_topics')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "VHNZvbNnPK2o",
    "outputId": "c1907241-1c41-47f7-8a8e-93dbfcb4c9e4"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Unknown         0.368687\n",
       "other_topics    0.343898\n",
       "Student         0.225676\n",
       "Technology      0.061739\n",
       "Name: topic, dtype: float64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df9.topic.value_counts(normalize = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "5MEhTtwKHxMm"
   },
   "source": [
    "- Now some what class imbalance is manageble"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ePlU8dLmKSq5"
   },
   "source": [
    "### Taking first 25K samples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "r-3viTEx7UM_"
   },
   "outputs": [],
   "source": [
    "df_B = df9.iloc[:25000,:]\n",
    "X = df_B['word_cleaned_text']\n",
    "Y = df_B['topic']\n",
    "x_train,x_test,y_train,y_test = train_test_split(X,Y,test_size = .2,random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "bAIZDcCG3yKd"
   },
   "outputs": [],
   "source": [
    "#bagof vectors for 3000 features\n",
    "bow_vect_final = CountVectorizer(max_features=3000,ngram_range=(1,1))     # Keep only 3000 features as number of features will increase the processing time.\n",
    "bow_vect_final.fit(x_train)\n",
    "x_train_bow_1 = bow_vect_final.transform(x_train)\n",
    "x_test_bow_1 = bow_vect_final.transform(x_test)\n",
    "x_train_bow_1 = x_train_bow_1.toarray()                      # Convert the data features to array.\n",
    "x_test_bow_1 = x_test_bow_1.toarray()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "t-blsNufqvt8"
   },
   "outputs": [],
   "source": [
    "#encoding classes\n",
    "le = LabelEncoder()\n",
    "le.fit(y_train)\n",
    "y_train_le = le.transform(y_train)\n",
    "y_test_le = le.transform(y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "xWwSb5d7WEx6",
    "outputId": "2e8471f7-862c-496b-bb75-9ec040c63356"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(Unknown         2069\n",
       " other_topics    1572\n",
       " Student          713\n",
       " Technology       646\n",
       " Name: topic, dtype: int64,\n",
       " array([3, 3, 3, ..., 2, 2, 3]))"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test.value_counts(),y_test_le"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "u4b1gqTOIjMd"
   },
   "source": [
    "### Machine learning model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "eDpmclzSWovH"
   },
   "outputs": [],
   "source": [
    "rfB = RandomForestClassifier(n_jobs=-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "4zx_RJjNUnVl",
    "outputId": "14587cfb-6075-4945-eb5d-0c05d162807c"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-*\n",
      "RandomForestClassifier(n_jobs=-1)\n",
      "training time : 56.911909341812134 seconds\n",
      "*-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-*\n",
      "------------------------------------------------------------\n",
      "The Training accuracy score  is 0.99525 \n",
      "The Testing accuracy score is 0.5264 \n",
      "The precision score is 0.5598209083818958\n",
      "The recall score is 0.5264  \n",
      "The Hamming loss is  0.4736\n",
      "The classification report is \n",
      " :               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.73      0.05      0.10       713\n",
      "           1       0.59      0.23      0.33       646\n",
      "           2       0.52      0.83      0.64      2069\n",
      "           3       0.53      0.46      0.49      1572\n",
      "\n",
      "    accuracy                           0.53      5000\n",
      "   macro avg       0.59      0.39      0.39      5000\n",
      "weighted avg       0.56      0.53      0.48      5000\n",
      "\n"
     ]
    }
   ],
   "source": [
    "models_metrics(rfB,x_train_bow_1,y_train_le,x_test_bow_1,y_test_le)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "qlYhTUCLInpq"
   },
   "source": [
    "- Now precision,recall and F1score is increased little high\n",
    "- Hamming loss also decreases a little bit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "CUfmXUWBqxIx"
   },
   "outputs": [],
   "source": [
    "x_train_1 = np.reshape(x_train_bow_1,(x_train_bow_1.shape[0],1,x_train_bow_1.shape[1]))\n",
    "x_test_1 = np.reshape(x_test_bow_1,(x_test_bow_1.shape[0],1,x_test_bow_1.shape[1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "tuiJ_OoXmaP8"
   },
   "outputs": [],
   "source": [
    "from tensorflow.keras.utils import to_categorical"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "ELD0BEh2tYb0"
   },
   "outputs": [],
   "source": [
    "y_train_1 = to_categorical(y_train_le,len(np.unique(y_train_le)))\n",
    "y_test_1 = to_categorical(y_test_le,len(np.unique(y_test_le)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "4ehdAdBMqyI-"
   },
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import LSTM,Dense,Dropout\n",
    "model = Sequential()\n",
    "model.add(LSTM(512,input_shape = (1,3000),return_sequences = True))\n",
    "model.add(Dropout(0.2))\n",
    "model.add(LSTM(256,return_sequences = True))\n",
    "model.add(LSTM(128))\n",
    "model.add(Dense(4,activation='softmax'))\n",
    "\n",
    "model.compile(loss = 'categorical_crossentropy',optimizer = 'adam',metrics =['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "FJ0OKJB7tOL_",
    "outputId": "03754b66-ed3c-466a-88ad-7d7b82caca83"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "2000/2000 [==============================] - 229s 112ms/step - loss: 1.1015 - accuracy: 0.5064 - val_loss: 1.0321 - val_accuracy: 0.5380\n",
      "Epoch 2/10\n",
      "2000/2000 [==============================] - 214s 107ms/step - loss: 0.8152 - accuracy: 0.6502 - val_loss: 1.0808 - val_accuracy: 0.5380\n",
      "Epoch 3/10\n",
      "2000/2000 [==============================] - 212s 106ms/step - loss: 0.5064 - accuracy: 0.7893 - val_loss: 1.3386 - val_accuracy: 0.5372\n",
      "Epoch 4/10\n",
      "2000/2000 [==============================] - 211s 106ms/step - loss: 0.2796 - accuracy: 0.8876 - val_loss: 1.8601 - val_accuracy: 0.5403\n",
      "Epoch 5/10\n",
      "2000/2000 [==============================] - 210s 105ms/step - loss: 0.1658 - accuracy: 0.9343 - val_loss: 2.2453 - val_accuracy: 0.5290\n",
      "Epoch 6/10\n",
      "2000/2000 [==============================] - 206s 103ms/step - loss: 0.1130 - accuracy: 0.9566 - val_loss: 2.4988 - val_accuracy: 0.5188\n",
      "Epoch 7/10\n",
      "2000/2000 [==============================] - 211s 106ms/step - loss: 0.0863 - accuracy: 0.9659 - val_loss: 2.6506 - val_accuracy: 0.5238\n",
      "Epoch 8/10\n",
      "2000/2000 [==============================] - 207s 103ms/step - loss: 0.0711 - accuracy: 0.9749 - val_loss: 2.7086 - val_accuracy: 0.5200\n",
      "Epoch 9/10\n",
      "2000/2000 [==============================] - 235s 117ms/step - loss: 0.0520 - accuracy: 0.9801 - val_loss: 2.9859 - val_accuracy: 0.5150\n",
      "Epoch 10/10\n",
      "2000/2000 [==============================] - 239s 120ms/step - loss: 0.0491 - accuracy: 0.9819 - val_loss: 2.8672 - val_accuracy: 0.5288\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x7fe2698ffa00>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#training the model\n",
    "model.fit(x_train_1,y_train_1,epochs=10,batch_size=8,validation_split=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "MNFxDoL-er-Q",
    "outputId": "9fc4f651-a81d-4633-8e77-4f4bdcee4604"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "157/157 [==============================] - 7s 34ms/step - loss: 2.7833 - accuracy: 0.5362\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[2.7833077907562256, 0.5361999869346619]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#testing the model\n",
    "model.evaluate(x_test_1,y_test_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "oD9jhdbLusv9",
    "outputId": "f8c5e77c-33a7-442d-e4d3-62c39dc7def6"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "157/157 [==============================] - 7s 34ms/step\n",
      "------------------------------------------------------------\n",
      "The Testing accuracy score is 0.5362 \n",
      "The precision score is 0.534062142777726\n",
      "The recall score is 0.5362  \n",
      "The Hamming loss is  0.4638\n",
      "The classification report is \n",
      " :               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.41      0.32      0.36       713\n",
      "           1       0.54      0.35      0.42       646\n",
      "           2       0.59      0.61      0.60      2069\n",
      "           3       0.51      0.61      0.55      1572\n",
      "\n",
      "    accuracy                           0.54      5000\n",
      "   macro avg       0.51      0.47      0.49      5000\n",
      "weighted avg       0.53      0.54      0.53      5000\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#prediction results\n",
    "y_pred = model.predict(x_test_1)\n",
    "y_pred_1 = [np.argmax(x) for x in y_pred]\n",
    "dnn_metrics(y_test_le,y_pred_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "49pVcV34Jkpm"
   },
   "source": [
    "- I observed that LSTM model giving quite high evaluation metric scores than compared with Machine learning models and Hamming loss is also decreses"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ltGfuEK3LlRs"
   },
   "source": [
    "- if we increase more number of samples we may see better results "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Lwm2dzlgKKNT"
   },
   "source": [
    "### taking first 50000 samples\n",
    "\n",
    "---\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "vzL_xtuhfftb"
   },
   "outputs": [],
   "source": [
    "df_C = df9.iloc[:50000,:]\n",
    "X = df_C['word_cleaned_text']\n",
    "Y = df_C['topic']\n",
    "x_train,x_test,y_train,y_test = train_test_split(X,Y,test_size = .2,random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "kTB67zT7fSG4"
   },
   "outputs": [],
   "source": [
    "bow_vect_final = CountVectorizer(max_features=8000,ngram_range=(1,1))     # Keep only 8000 features as number of features will increase the processing time.\n",
    "bow_vect_final.fit(x_train)\n",
    "x_train_bow_1 = bow_vect_final.transform(x_train)\n",
    "x_test_bow_1 = bow_vect_final.transform(x_test)\n",
    "x_train_bow_1 = x_train_bow_1.toarray()                      # Convert the data features to array.\n",
    "x_test_bow_1 = x_test_bow_1.toarray()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "_P16G8OqgTMH"
   },
   "outputs": [],
   "source": [
    "#encoding targets\n",
    "le = LabelEncoder()\n",
    "le.fit(y_train)\n",
    "y_train_le = le.transform(y_train)\n",
    "y_test_le = le.transform(y_test)\n",
    "#reshape for LSTM model\n",
    "x_train_1 = np.reshape(x_train_bow_1,(x_train_bow_1.shape[0],1,x_train_bow_1.shape[1]))\n",
    "x_test_1 = np.reshape(x_test_bow_1,(x_test_bow_1.shape[0],1,x_test_bow_1.shape[1]))\n",
    "y_train_1 = to_categorical(y_train_le,len(np.unique(y_train_le)))\n",
    "y_test_1 = to_categorical(y_test_le,len(np.unique(y_test_le)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "jgvGkYNhLJku"
   },
   "source": [
    "##### LSTM Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "ws3aYSfautdL"
   },
   "outputs": [],
   "source": [
    "#LSTM model\n",
    "model = Sequential()\n",
    "model.add(LSTM(1024,input_shape = (1,8000),return_sequences = True))\n",
    "model.add(Dropout(0.2))\n",
    "model.add(LSTM(512,return_sequences = True))\n",
    "model.add(LSTM(128,return_sequences = True))\n",
    "model.add(LSTM(64))\n",
    "model.add(Dense(4,activation='softmax'))\n",
    "#model compilation\n",
    "model.compile(loss = 'categorical_crossentropy',optimizer = 'adam',metrics =['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "FW3yI8yqgy_Q",
    "outputId": "c4b3a848-c23a-4f59-9783-5ba3ab4e0562"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/3\n",
      "320/320 [==============================] - 397s 1s/step - loss: 1.1471 - accuracy: 0.4611 - val_loss: 1.0340 - val_accuracy: 0.5369\n",
      "Epoch 2/3\n",
      "320/320 [==============================] - 376s 1s/step - loss: 0.8424 - accuracy: 0.6462 - val_loss: 1.0234 - val_accuracy: 0.5594\n",
      "Epoch 3/3\n",
      "320/320 [==============================] - 382s 1s/step - loss: 0.5799 - accuracy: 0.7654 - val_loss: 1.1355 - val_accuracy: 0.5552\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x7f99141c96c0>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Training the model\n",
    "model.fit(x_train_1,y_train_1,epochs=3,batch_size=100,validation_split=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "0q8DdoZvg6wG",
    "outputId": "79dd96d3-126e-43f8-87b9-2ecfc3ed0f5f"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "313/313 [==============================] - 35s 112ms/step\n",
      "------------------------------------------------------------\n",
      "The Testing accuracy score is 0.5485 \n",
      "The precision score is 0.5545525558805945\n",
      "The recall score is 0.5485  \n",
      "The Hamming loss is  0.4515\n",
      "The classification report is \n",
      " :               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.63      0.40      0.49      2181\n",
      "           1       0.47      0.39      0.42       849\n",
      "           2       0.55      0.58      0.57      3515\n",
      "           3       0.54      0.65      0.59      3455\n",
      "\n",
      "    accuracy                           0.55     10000\n",
      "   macro avg       0.55      0.50      0.52     10000\n",
      "weighted avg       0.55      0.55      0.54     10000\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#predicting target classes\n",
    "y_pred = model.predict(x_test_1)\n",
    "y_pred_1 = [np.argmax(x) for x in y_pred]\n",
    "dnn_metrics(y_test_le,y_pred_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "fnLES6LLL7Rk"
   },
   "source": [
    "- Precision,Recall and F1-score is increased by increasing the number of samples and max_features\n",
    "- Hamming loss is also decreases by increasing the number of samples"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "r9GyVUqAN8Km"
   },
   "source": [
    "#### If we futher try with more number of samples and max_features we may get good results\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "rDGwlgBMOYfm"
   },
   "source": [
    "# 5. Share insights on relative performance comparison\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "RfmpJQcTOYNC"
   },
   "source": [
    "## 5.A. Which vectorizer performed better? Probable reason?."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "tOOQ3TcpPZkr"
   },
   "source": [
    "- *Bag of Words* performs better than TF-IDF , WORD2VEC , Glove vectorization techniques\n",
    "- **Reasons**  :\n",
    "      - The primary reason is the dataset size is very large,It has large set of vocabulary\n",
    "      - BoW can handle a large number of features since it represents each unique word as a separate feature\n",
    "      - Noise tolerance\n",
    "      - Insensitivity to word order\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "yEy42wwMR88U"
   },
   "source": [
    "## 5.B. Which model outperformed? Probable reason?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Clm8CNzwSAXb"
   },
   "source": [
    "- In Machine learning models , Randomforest classifier performs quite better\n",
    "- The probable reason for its performance due to \n",
    "     - Ensemble of decision trees - Each tree in the forest is trained on a random subset of the dataset and features, which helps to reduce overfitting and improve generalization\n",
    "     - Non-linearity and interactions: Random Forest can capture non-linear relationships and interactions between features effectively. While BoW vectors represent individual words as features, the Random Forest model can identify complex interactions between words and their combined impact on the target variable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "pDVAFFhXTrjL"
   },
   "source": [
    "- In overall models LSTM model is outperformes well\n",
    "- The probable reason for its performance due to \n",
    "      - Flexibility in modeling complex relationships: LSTMs are known for their capability to model complex relationships in data\n",
    "      - Handling variable-length sequences : Since BoW vectors represent documents of varying lengths, LSTM's ability to handle sequences of different lengths allows it to process and learn from the entire document"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "49_02S_yUv5Q"
   },
   "source": [
    "## C. Which parameter/hyperparameter significantly helped to improve performance?Probable reason?."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "og5OzDL-WIID"
   },
   "source": [
    "- Adding more LSTM layers:\n",
    "   - Adding more LSTM layers allows the model to learn increasingly abstract and complex representations of the input data. Each layer can extract higher-level features from the previous layer's output\n",
    "   - Adding more units\n",
    "      units allow the model to capture more complex patterns but also increase the computational complexity and memory requirements\n",
    "   - Dropout\n",
    "      regularization used to prevent overfitting\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "_oOPyQXlW7mB"
   },
   "source": [
    "## D. According to you, which performance metric should be given most importance, why?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "KG1Kbc_OXAZC"
   },
   "source": [
    "- Accroding to me Hamming loss given more importance than compared with other metrics \n",
    "- since it is highly imbalanced dataset , Hamming loss calculates the average fraction of labels that are incorrectly predicted, making it a label-wise evaluation metric. It measures the accuracy of each individual label prediction independently, rather than considering the entire set of labels"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "O0KsftJ8X9zV"
   },
   "source": [
    "- Along  with the Hamming loss , Precision, Recall, and F1-Score are considered , Precision measures the proportion of correctly predicted positive instances out of all predicted positive instances, while recall calculates the proportion of correctly predicted positive instances out of all actual positive instances. F1-score is the harmonic mean of precision and recall, providing a balanced measure. These metrics are beneficial when the dataset is imbalanced, as they focus on the performance of the minority class, which is often of higher interest."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PART-B"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "yR85kiJniWrJ"
   },
   "source": [
    "• DOMAIN: Customer support\n",
    "\n",
    "• CONTEXT: Great Learning has a an academic support department which receives numerous support requests every day throughout the year.\n",
    "Teams are spread across geographies and try to provide support round the year. Sometimes there are circumstances where due to heavy\n",
    "workload certain request resolutions are delayed, impacting company’s business. Some of the requests are very generic where a proper\n",
    "resolution procedure delivered to the user can solve the problem. Company is looking forward to design an automation which can interact with\n",
    "the user, understand the problem and display the resolution procedure [ if found as a generic request ] or redirect the request to an actual human\n",
    "support executive if the request is complex or not in it’s database.\n",
    "\n",
    "• DATA DESCRIPTION: A sample corpus is attached for your reference. Please enhance/add more data to the corpus using your linguistics skills."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "lHwql-A2jC_I"
   },
   "source": [
    "PROJECT OBJECTIVE: Design a python based interactive semi - rule based chatbot which can do the following:\n",
    "1. Start chat session with greetings and ask what the user is looking for.\n",
    "2. Accept dynamic text based questions from the user. Reply back with relevant answer from the designed corpus.\n",
    "3. End the chat session only if the user requests to end else ask what the user is looking for. Loop continues till the user asks to end it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "xK_BoVg-i6V4",
    "outputId": "be310ff7-a11f-4293-f4a2-4e0f4a86088b"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mounted at /content/drive/\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from google.colab import drive\n",
    "drive.mount(\"/content/drive/\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "4hEZixV358yD",
    "outputId": "ef630ae7-a476-4b44-ed24-a1dfccbbb499"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
      "[nltk_data]   Unzipping tokenizers/punkt.zip.\n",
      "[nltk_data] Downloading package wordnet to /root/nltk_data...\n",
      "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
      "[nltk_data]   Unzipping corpora/stopwords.zip.\n"
     ]
    }
   ],
   "source": [
    "import string\n",
    "import random \n",
    "import nltk\n",
    "import json\n",
    "import numpy as np\n",
    "from nltk import word_tokenize,sent_tokenize\n",
    "from nltk.stem import WordNetLemmatizer \n",
    "import tensorflow as tf \n",
    "from tensorflow.keras import Sequential \n",
    "from tensorflow.keras.layers import Dense, Dropout,LSTM\n",
    "from tensorflow.keras.utils import to_categorical\n",
    "nltk.download(\"punkt\")\n",
    "nltk.download(\"wordnet\")\n",
    "nltk.download(\"stopwords\")\n",
    "from tqdm import tqdm\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.chat.util import Chat, reflections\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "lemmatizer = WordNetLemmatizer()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "id": "LKlEbNJ6jbsR"
   },
   "outputs": [],
   "source": [
    "import os\n",
    "os.chdir(\"/content/drive/My Drive/NLP/\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "id": "85jXEhTFjvzB"
   },
   "outputs": [],
   "source": [
    "df = pd.read_json('GL Bot.json')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 300
    },
    "id": "1bSV6K-YPntq",
    "outputId": "76641ac8-2558-4378-f36c-eda322b8acbc"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-d4bd5e27-826f-434c-b070-74434359a20a\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>intents</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>{'tag': 'Intro', 'patterns': ['hi', 'how are y...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>{'tag': 'Exit', 'patterns': ['thank you', 'tha...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>{'tag': 'Olympus', 'patterns': ['olympus', 'ex...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>{'tag': 'SL', 'patterns': ['i am not able to u...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>{'tag': 'NN', 'patterns': ['what is deep learn...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>{'tag': 'Bot', 'patterns': ['what is your name...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>{'tag': 'Profane', 'patterns': ['what the hell...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>{'tag': 'Ticket', 'patterns': ['my problem is ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d4bd5e27-826f-434c-b070-74434359a20a')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-d4bd5e27-826f-434c-b070-74434359a20a button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-d4bd5e27-826f-434c-b070-74434359a20a');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "                                             intents\n",
       "0  {'tag': 'Intro', 'patterns': ['hi', 'how are y...\n",
       "1  {'tag': 'Exit', 'patterns': ['thank you', 'tha...\n",
       "2  {'tag': 'Olympus', 'patterns': ['olympus', 'ex...\n",
       "3  {'tag': 'SL', 'patterns': ['i am not able to u...\n",
       "4  {'tag': 'NN', 'patterns': ['what is deep learn...\n",
       "5  {'tag': 'Bot', 'patterns': ['what is your name...\n",
       "6  {'tag': 'Profane', 'patterns': ['what the hell...\n",
       "7  {'tag': 'Ticket', 'patterns': ['my problem is ..."
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "id": "SGlUFsOiX-Rh"
   },
   "outputs": [],
   "source": [
    "sent =[]\n",
    "for i in range(len(df)):\n",
    "   m = df['intents'][i]['patterns']\n",
    "   sent.append(m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "id": "uu31p0USZjKo"
   },
   "outputs": [],
   "source": [
    "tags = []\n",
    "for i in range(len(df)):\n",
    "   m = df['intents'][i]['tag']\n",
    "   tags.append(m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "id": "t__ruYDZT2GP"
   },
   "outputs": [],
   "source": [
    "response= []\n",
    "for i in range(len(df)):\n",
    "   m = df['intents'][i]['responses']\n",
    "   response.append(m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {
    "id": "F5VhEnpTVB59"
   },
   "outputs": [],
   "source": [
    "df1 = pd.DataFrame()\n",
    "df1['tag'] = tags\n",
    "df1['patterns']= sent\n",
    "df1['responses']= response"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 300
    },
    "id": "zRdD2IKz0qaX",
    "outputId": "0dba5519-5803-4100-e4a9-5ee2cf039fb6"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-3d89c13d-0dd4-4470-a7e0-cc8f85fdc9df\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tag</th>\n",
       "      <th>patterns</th>\n",
       "      <th>responses</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Intro</td>\n",
       "      <td>[hi, how are you, is anyone there, hello, what...</td>\n",
       "      <td>[Hello! how can i help you ?]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Exit</td>\n",
       "      <td>[thank you, thanks, cya, see you, later, see y...</td>\n",
       "      <td>[I hope I was able to assist you, Good Bye]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Olympus</td>\n",
       "      <td>[olympus, explain me how olympus works, I am n...</td>\n",
       "      <td>[Link: Olympus wiki]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>SL</td>\n",
       "      <td>[i am not able to understand svm, explain me h...</td>\n",
       "      <td>[Link: Machine Learning wiki ]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NN</td>\n",
       "      <td>[what is deep learning, unable to understand d...</td>\n",
       "      <td>[Link: Neural Nets wiki]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Bot</td>\n",
       "      <td>[what is your name, who are you, name please, ...</td>\n",
       "      <td>[I am your virtual learning assistant]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Profane</td>\n",
       "      <td>[what the hell, bloody stupid bot, do you thin...</td>\n",
       "      <td>[Please use respectful words]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Ticket</td>\n",
       "      <td>[my problem is not solved, you did not help me...</td>\n",
       "      <td>[Tarnsferring the request to your PM]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3d89c13d-0dd4-4470-a7e0-cc8f85fdc9df')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-3d89c13d-0dd4-4470-a7e0-cc8f85fdc9df button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-3d89c13d-0dd4-4470-a7e0-cc8f85fdc9df');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "       tag                                           patterns  \\\n",
       "0    Intro  [hi, how are you, is anyone there, hello, what...   \n",
       "1     Exit  [thank you, thanks, cya, see you, later, see y...   \n",
       "2  Olympus  [olympus, explain me how olympus works, I am n...   \n",
       "3       SL  [i am not able to understand svm, explain me h...   \n",
       "4       NN  [what is deep learning, unable to understand d...   \n",
       "5      Bot  [what is your name, who are you, name please, ...   \n",
       "6  Profane  [what the hell, bloody stupid bot, do you thin...   \n",
       "7   Ticket  [my problem is not solved, you did not help me...   \n",
       "\n",
       "                                     responses  \n",
       "0                [Hello! how can i help you ?]  \n",
       "1  [I hope I was able to assist you, Good Bye]  \n",
       "2                         [Link: Olympus wiki]  \n",
       "3               [Link: Machine Learning wiki ]  \n",
       "4                     [Link: Neural Nets wiki]  \n",
       "5       [I am your virtual learning assistant]  \n",
       "6                [Please use respectful words]  \n",
       "7        [Tarnsferring the request to your PM]  "
      ]
     },
     "execution_count": 175,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "_qcdF7Ubs4ql",
    "outputId": "2299a988-eabb-4197-ff48-48035b8e586c"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0                  [Hello! how can i help you ?]\n",
       "1    [I hope I was able to assist you, Good Bye]\n",
       "2                           [Link: Olympus wiki]\n",
       "3                 [Link: Machine Learning wiki ]\n",
       "4                       [Link: Neural Nets wiki]\n",
       "5         [I am your virtual learning assistant]\n",
       "6                  [Please use respectful words]\n",
       "7          [Tarnsferring the request to your PM]\n",
       "Name: responses, dtype: object"
      ]
     },
     "execution_count": 176,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1['responses']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {
    "id": "PYMjUGYCnLs8"
   },
   "outputs": [],
   "source": [
    "stop_words = set(stopwords.words('english'))\n",
    "stop_words.discard(\"no\")\n",
    "stop_words.discard(\"not\")\n",
    "stop_words.discard(\"do not\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "jqQaRbWKoFN0",
    "outputId": "e3f30403-6ee7-4af7-c558-4b680e3dfb9c"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 8/8 [00:00<00:00, 5273.37it/s]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# defining an empty list\n",
    "text = []\n",
    "\n",
    "for i in tqdm(range(df1.shape[0])):\n",
    "    word = df1['patterns'][i]# splitting text into separate words \n",
    "    # removing the english language stopwords from the messages\n",
    "    new_text = [w.lower() for w in word] \n",
    "    new_text = ' '.join(new_text) #retriving the original text\n",
    "    text.append(new_text) \n",
    "    \n",
    "df1['word_clean_text'] = text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "Qed5awI4pkZA",
    "outputId": "9d1c9abc-7bb6-43d7-b158-654ce49aa989"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 8/8 [00:00<00:00, 980.38it/s]\n"
     ]
    }
   ],
   "source": [
    "# initiating Lemmatizer available in NLTK library\n",
    "lemmatizer = WordNetLemmatizer()\n",
    "\n",
    "# defining empty list for lemmatizer output\n",
    "lemma = []\n",
    "\n",
    "# looping over each message in the data\n",
    "for i in tqdm(range(df1.shape[0])):\n",
    "  text = df1['word_clean_text'][i].split()  # splitting text into separate words \n",
    "  new_text = [lemmatizer.lemmatize(word) for word in text] # perfoming lemmatization on every word of a mesaage\n",
    "  new_text = ' '.join(new_text) #retriving the original text\n",
    "  lemma.append(new_text) # append the text with base form of words in a message to empty list text\n",
    "\n",
    "df1['lem_clean_text'] = lemma"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "l7OsS2l4nKzh",
    "outputId": "5ec6dcea-842d-4b6d-e424-270bf631eb01"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 8/8 [00:00<00:00, 2929.49it/s]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# defining an empty list\n",
    "text = []\n",
    "\n",
    "for i in tqdm(range(df1.shape[0])):\n",
    "    word = df1['lem_clean_text'][i].split()# splitting text into separate words \n",
    "    # removing the english language stopwords from the messages\n",
    "    new_text = [w for w in word if not w in stop_words] \n",
    "    new_text = ' '.join(new_text) #retriving the original text\n",
    "    text.append(new_text) \n",
    "    \n",
    "df1['lem_clean_text'] = text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "M4uGk6NUnoVf",
    "outputId": "2b737cfd-6909-4cf5-c05d-af73d11ed87c"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    hi anyone hello whats hey yo listen please hel...\n",
       "1    thank thanks cya see later see later goodbye l...\n",
       "2    olympus explain olympus work not able understa...\n",
       "3    not able understand svm explain machine learni...\n",
       "4    deep learning unable understand deep learning ...\n",
       "5    name name please hour opertions working hour h...\n",
       "6    hell bloody stupid bot think smart screw hate ...\n",
       "7    problem not solved not help not good solution ...\n",
       "Name: lem_clean_text, dtype: object"
      ]
     },
     "execution_count": 181,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1['lem_clean_text']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "WLQdWxEkpq3V",
    "outputId": "c68ef377-661f-4a8a-fb89-c9410b8e7801"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 8/8 [00:00<00:00, 9162.87it/s]\n"
     ]
    }
   ],
   "source": [
    "text = []\n",
    "\n",
    "for i in tqdm(range(df1.shape[0])):\n",
    "    word = df1['lem_clean_text'][i].split()\n",
    "    text.append(word)\n",
    "\n",
    "df1['new_text'] = text\n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {
    "id": "O4PfxOWQ3gHC"
   },
   "outputs": [],
   "source": [
    "greet =  df1['new_text'][0]\n",
    "greet_response  = df1['responses'][0]\n",
    "def greeting(sentence):\n",
    "    for word in sentence.split():\n",
    "        if word.lower() in greet:\n",
    "            return greet_response\n",
    "        elif (lemmatizer.lemmatize(word.lower())) in greet:\n",
    "            return greet_response"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {
    "id": "rH9XEkqX37kL"
   },
   "outputs": [],
   "source": [
    "exit =  df1['new_text'][1]\n",
    "exit_response  = df1['responses'][1]\n",
    "def EXIT(sentence):\n",
    "    for word in sentence.split():\n",
    "        if word.lower() in exit:\n",
    "            return str(\"I hope I was able to assist you, would like to continue ? or If you want to exit please type exit'\")\n",
    "        elif (lemmatizer.lemmatize(word.lower())) in exit:\n",
    "            return str(\"I hope I was able to assist you, would like to continue ? or If you want to exit please type exit'\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {
    "id": "4WkTezqP6cxJ"
   },
   "outputs": [],
   "source": [
    "olymps =  df1['new_text'][2]\n",
    "olp_response  = df1['responses'][2]\n",
    "def OLYMPUS(sentence):\n",
    "    for word in sentence.split():\n",
    "        if word.lower() in olymps:\n",
    "            return olp_response\n",
    "        elif (lemmatizer.lemmatize(word.lower())) in olymps:\n",
    "            return olp_response"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {
    "id": "Ldgsua3G6dJG"
   },
   "outputs": [],
   "source": [
    "sl =  df1['new_text'][3]\n",
    "sl_response  = df1['responses'][3]\n",
    "def SL(sentence):\n",
    "    for word in sentence.split():\n",
    "        if word.lower() in sl:\n",
    "            return sl_response\n",
    "        elif (lemmatizer.lemmatize(word.lower())) in sl:\n",
    "            return sl_response"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "metadata": {
    "id": "bdzsZOuI6daz"
   },
   "outputs": [],
   "source": [
    "nn =  df1['new_text'][4]\n",
    "nn_response  = df1['responses'][4]\n",
    "def NN(sentence):\n",
    "    for word in sentence.split():\n",
    "        if word.lower() in nn:\n",
    "            return nn_response\n",
    "        elif (lemmatizer.lemmatize(word.lower())) in nn:\n",
    "            return nn_response"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {
    "id": "BVIGZmeJ6dqT"
   },
   "outputs": [],
   "source": [
    "bot =  df1['new_text'][5]\n",
    "bot_response  = df1['responses'][5]\n",
    "def BOT(sentence):\n",
    "    for word in sentence.split():\n",
    "        if word.lower() in bot:\n",
    "            return bot_response\n",
    "        elif (lemmatizer.lemmatize(word.lower())) in bot:\n",
    "            return bot_response"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "metadata": {
    "id": "TFi_6Bim6efT"
   },
   "outputs": [],
   "source": [
    "profane =  df1['new_text'][6]\n",
    "profane_response  = df1['responses'][6]\n",
    "def PROFANE(sentence):\n",
    "    for word in sentence.split():\n",
    "        if word.lower() in profane:\n",
    "            return profane_response\n",
    "        elif (lemmatizer.lemmatize(word.lower())) in profane:\n",
    "            return profane_response"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {
    "id": "JUnrLPXX6fSQ"
   },
   "outputs": [],
   "source": [
    "ticket =  df1['new_text'][7]\n",
    "ticket_response  = df1['responses'][7]\n",
    "def TICKET(sentence):\n",
    "    for word in sentence.split():\n",
    "        if word.lower() in ticket:\n",
    "            return ticket_response\n",
    "        elif (lemmatizer.lemmatize(word.lower())) in ticket:\n",
    "            return ticket_response"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "metadata": {
    "id": "v7xQjDEt81OS"
   },
   "outputs": [],
   "source": [
    "def chat():\n",
    "    print(\"Chatbot: Hello! How can I assist you today?\")\n",
    "    while (True):\n",
    "        user_input = input(\"User: \")\n",
    "        user_response = user_input.lower()\n",
    "        if (user_response == 'exit'):\n",
    "          print(\"Chat bot: Thank you ! Have a good day, Good bye\")\n",
    "          break\n",
    "        elif(greeting(user_response)!=None):\n",
    "          print(\"Chatbot: \",greeting(user_response))\n",
    "        elif (EXIT(user_response)!=None):\n",
    "          print(\"Chatbot:\",EXIT(user_response))\n",
    "        elif (user_response == 'continue' or user_response == 'yes' or user_response == 'yeah'):\n",
    "          print(\"Chat bot: How can I assist you\")      \n",
    "        elif(OLYMPUS(user_response)!=None):\n",
    "          print(\"Chatbot: \",OLYMPUS(user_response))\n",
    "        elif(SL(user_response)!=None):\n",
    "          print(\"Chat bot:\",SL(user_response))\n",
    "        elif(BOT(user_response)!=None):\n",
    "          print(\"Chat bot:\",BOT(user_response))\n",
    "        elif(NN(user_response)!=None):\n",
    "          print(\"Chat bot:\",NN(user_response))\n",
    "        elif(PROFANE(user_response)!=None):\n",
    "          print(\"Chat bot:\",PROFANE(user_response))\n",
    "        elif(TICKET(user_response)!=None):\n",
    "          print(\"Chat bot:\",TICKET(user_response))\n",
    "        else:\n",
    "          print(\"invalid response, please rephrase your question correctly\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "tWE4N5zB81k8",
    "outputId": "0fec5ad0-e423-4364-a495-aa94c4e12b8b"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Chatbot: Hello! How can I assist you today?\n",
      "User: HI\n",
      "Chatbot:  ['Hello! how can i help you ?']\n",
      "User: I need to learn about knn\n",
      "Chat bot: ['Link: Machine Learning wiki ']\n",
      "User: I need to learn about ann\n",
      "Chat bot: ['Link: Neural Nets wiki']\n",
      "User: thank you\n",
      "Chatbot: I hope I was able to assist you, would like to continue ? or If you want to exit please type exit'\n",
      "User: yes\n",
      "Chat bot: How can I assist you\n",
      "User: teach me about olympus\n",
      "Chatbot:  ['Link: Olympus wiki']\n",
      "User: yeah its good\n",
      "Chatbot: I hope I was able to assist you, would like to continue ? or If you want to exit please type exit'\n",
      "User: EXIT\n",
      "Chat bot: Thank you ! Have a good day, Good bye\n"
     ]
    }
   ],
   "source": [
    "chat()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "cjThU7-dyu-f"
   },
   "source": [
    "## Using neural network model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {
    "id": "9HSGt7itys7h"
   },
   "outputs": [],
   "source": [
    "df2 = open('GL Bot.json').read()\n",
    "intents = json.loads(df2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "f29Vrf7kwxUx",
    "outputId": "ab8d2e04-2d08-4337-e569-c9868b1d5b32"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'intents': [{'tag': 'Intro',\n",
       "   'patterns': ['hi',\n",
       "    'how are you',\n",
       "    'is anyone there',\n",
       "    'hello',\n",
       "    'whats up',\n",
       "    'hey',\n",
       "    'yo',\n",
       "    'listen',\n",
       "    'please help me',\n",
       "    'i am learner from',\n",
       "    'i belong to',\n",
       "    'aiml batch',\n",
       "    'aifl batch',\n",
       "    'i am from',\n",
       "    'my pm is',\n",
       "    'blended',\n",
       "    'online',\n",
       "    'i am from',\n",
       "    'hey ya',\n",
       "    'talking to you for first time'],\n",
       "   'responses': ['Hello! how can i help you ?'],\n",
       "   'context_set': ''},\n",
       "  {'tag': 'Exit',\n",
       "   'patterns': ['thank you',\n",
       "    'thanks',\n",
       "    'cya',\n",
       "    'see you',\n",
       "    'later',\n",
       "    'see you later',\n",
       "    'goodbye',\n",
       "    'i am leaving',\n",
       "    'have a Good day',\n",
       "    'you helped me',\n",
       "    'thanks a lot',\n",
       "    'thanks a ton',\n",
       "    'you are the best',\n",
       "    'great help',\n",
       "    'too good',\n",
       "    'you are a good learning buddy'],\n",
       "   'responses': ['I hope I was able to assist you, Good Bye'],\n",
       "   'context_set': ''},\n",
       "  {'tag': 'Olympus',\n",
       "   'patterns': ['olympus',\n",
       "    'explain me how olympus works',\n",
       "    'I am not able to understand olympus',\n",
       "    'olympus window not working',\n",
       "    'no access to olympus',\n",
       "    'unable to see link in olympus',\n",
       "    'no link visible on olympus',\n",
       "    'whom to contact for olympus',\n",
       "    'lot of problem with olympus',\n",
       "    'olypus is not a good tool',\n",
       "    'lot of problems with olympus',\n",
       "    'how to use olympus',\n",
       "    'teach me olympus'],\n",
       "   'responses': ['Link: Olympus wiki'],\n",
       "   'context_set': ''},\n",
       "  {'tag': 'SL',\n",
       "   'patterns': ['i am not able to understand svm',\n",
       "    'explain me how machine learning works',\n",
       "    'i am not able to understand naive bayes',\n",
       "    'i am not able to understand logistic regression',\n",
       "    'i am not able to understand ensemble techb=niques',\n",
       "    'i am not able to understand knn',\n",
       "    'i am not able to understand knn imputer',\n",
       "    'i am not able to understand cross validation',\n",
       "    'i am not able to understand boosting',\n",
       "    'i am not able to understand random forest',\n",
       "    'i am not able to understand ada boosting',\n",
       "    'i am not able to understand gradient boosting',\n",
       "    'machine learning',\n",
       "    'ML',\n",
       "    'SL',\n",
       "    'supervised learning',\n",
       "    'knn',\n",
       "    'logistic regression',\n",
       "    'regression',\n",
       "    'classification',\n",
       "    'naive bayes',\n",
       "    'nb',\n",
       "    'ensemble techniques',\n",
       "    'bagging',\n",
       "    'boosting',\n",
       "    'ada boosting',\n",
       "    'ada',\n",
       "    'gradient boosting',\n",
       "    'hyper parameters'],\n",
       "   'responses': ['Link: Machine Learning wiki '],\n",
       "   'context_set': ''},\n",
       "  {'tag': 'NN',\n",
       "   'patterns': ['what is deep learning',\n",
       "    'unable to understand deep learning',\n",
       "    'explain me how deep learning works',\n",
       "    'i am not able to understand deep learning',\n",
       "    'not able to understand neural nets',\n",
       "    'very diffult to understand neural nets',\n",
       "    'unable to understand neural nets',\n",
       "    'ann',\n",
       "    'artificial intelligence',\n",
       "    'artificial neural networks',\n",
       "    'weights',\n",
       "    'activation function',\n",
       "    'hidden layers',\n",
       "    'softmax',\n",
       "    'sigmoid',\n",
       "    'relu',\n",
       "    'otimizer',\n",
       "    'forward propagation',\n",
       "    'backward propagation',\n",
       "    'epochs',\n",
       "    'epoch',\n",
       "    'what is an epoch',\n",
       "    'adam',\n",
       "    'sgd'],\n",
       "   'responses': ['Link: Neural Nets wiki'],\n",
       "   'context_set': ''},\n",
       "  {'tag': 'Bot',\n",
       "   'patterns': ['what is your name',\n",
       "    'who are you',\n",
       "    'name please',\n",
       "    'when are your hours of opertions',\n",
       "    'what are your working hours',\n",
       "    'hours of operation',\n",
       "    'working hours',\n",
       "    'hours'],\n",
       "   'responses': ['I am your virtual learning assistant'],\n",
       "   'context_set': ''},\n",
       "  {'tag': 'Profane',\n",
       "   'patterns': ['what the hell',\n",
       "    'bloody stupid bot',\n",
       "    'do you think you are very smart',\n",
       "    'screw you',\n",
       "    'i hate you',\n",
       "    'you are stupid',\n",
       "    'jerk',\n",
       "    'you are a joke',\n",
       "    'useless piece of shit'],\n",
       "   'responses': ['Please use respectful words'],\n",
       "   'context_set': ''},\n",
       "  {'tag': 'Ticket',\n",
       "   'patterns': ['my problem is not solved',\n",
       "    'you did not help me',\n",
       "    'not a good solution',\n",
       "    'bad solution',\n",
       "    'not good solution',\n",
       "    'no help',\n",
       "    'wasted my time',\n",
       "    'useless bot',\n",
       "    'create a ticket'],\n",
       "   'responses': ['Tarnsferring the request to your PM'],\n",
       "   'context_set': ''}]}"
      ]
     },
     "execution_count": 197,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "intents"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {
    "id": "arrE2UezzCYd"
   },
   "outputs": [],
   "source": [
    "words = []\n",
    "docs = []\n",
    "classes = []\n",
    "for intent in intents['intents']:\n",
    "    for pattern in intent['patterns']:        \n",
    "        #tokenize each word       \n",
    "        w = nltk.word_tokenize(pattern)\n",
    "        words.extend(w)        \n",
    "        #add documents in the corpus     \n",
    "        docs.append((w, intent['tag']))\n",
    "        # add to our classes list      \n",
    "        if intent['tag'] not in classes:\n",
    "            classes.append(intent['tag'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "7ze6qY2azr4l",
    "outputId": "1b57e9b1-1632-461f-f6f5-748eb3d816ca"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "128 documents\n",
      "8 classes ['Bot', 'Exit', 'Intro', 'NN', 'Olympus', 'Profane', 'SL', 'Ticket']\n",
      "129 lemmatized words ['able', 'access', 'activation', 'ada', 'adam', 'aifl', 'aiml', 'ann', 'anyone', 'artificial', 'backward', 'bad', 'bagging', 'batch', 'bayes', 'belong', 'best', 'blended', 'bloody', 'boosting', 'bot', 'buddy', 'classification', 'contact', 'create', 'cross', 'cya', 'day', 'deep', 'diffult', 'ensemble', 'epoch', 'explain', 'first', 'forest', 'forward', 'function', 'good', 'goodbye', 'gradient', 'great', 'hate', 'hell', 'hello', 'help', 'helped', 'hey', 'hi', 'hidden', 'hour', 'hyper', 'i', 'imputer', 'intelligence', 'jerk', 'joke', 'knn', 'later', 'layer', 'learner', 'learning', 'leaving', 'link', 'listen', 'logistic', 'lot', 'machine', 'ml', 'naive', 'name', 'nb', 'net', 'network', 'neural', 'no', 'not', 'olympus', 'olypus', 'online', 'operation', 'opertions', 'otimizer', 'parameter', 'piece', 'please', 'pm', 'problem', 'propagation', 'random', 'regression', 'relu', 'screw', 'see', 'sgd', 'shit', 'sigmoid', 'sl', 'smart', 'softmax', 'solution', 'solved', 'stupid', 'supervised', 'svm', 'talking', 'teach', 'techb=niques', 'technique', 'thank', 'thanks', 'think', 'ticket', 'time', 'ton', 'tool', 'unable', 'understand', 'use', 'useless', 'validation', 'visible', 'wasted', 'weight', 'whats', 'window', 'work', 'working', 'ya', 'yo']\n"
     ]
    }
   ],
   "source": [
    "# lemmatize, lower each word and remove duplicates\n",
    "words = [lemmatizer.lemmatize(w.lower()) for w in words if w not in stop_words]\n",
    "words = sorted(list(set(words)))\n",
    "# sort classes\n",
    "classes = sorted(list(set(classes)))\n",
    "# documents = combination between patterns and intents\n",
    "print (len(docs), \"documents\")\n",
    "# classes = intents\n",
    "print (len(classes), \"classes\", classes)\n",
    "# words = all words, vocabulary\n",
    "print (len(words), \"lemmatized words\", words)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "aI89lWUP0HRB"
   },
   "source": [
    "# Training Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {
    "id": "zwxBUGYdz76P"
   },
   "outputs": [],
   "source": [
    "# create our training data\n",
    "train = []\n",
    "# create an empty array for our output\n",
    "output_empty = [0] * len(classes)\n",
    "# training set, bag of words for each sentence\n",
    "for doc in docs:\n",
    "    # initialize our bag of words\n",
    "    bag = []\n",
    "    # list of tokenized words for the pattern\n",
    "    pattern_words = doc[0]\n",
    "    # lemmatize each word - create base word, in attempt to represent related words\n",
    "    pattern_words = [lemmatizer.lemmatize(word.lower()) for word in pattern_words]\n",
    "    # create our bag of words array with 1, if word match found in current pattern\n",
    "    for w in words:\n",
    "        bag.append(1) if w in pattern_words else bag.append(0)\n",
    "    # output is a '0' for each tag and '1' for current tag (for each pattern)\n",
    "    output_row = list(output_empty)\n",
    "    output_row[classes.index(doc[1])] = 1\n",
    "    train.append([bag, output_row])\n",
    "    # shuffle our features and turn into np.array\n",
    "random.shuffle(train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "AnRKoLpr01au",
    "outputId": "d47ed94d-9045-48c0-cb47-3af16bc29ac9"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-206-85a3b7e49ecb>:1: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n",
      "  train = np.array(train)\n"
     ]
    }
   ],
   "source": [
    "train = np.array(train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {
    "id": "-i6y8aX00iyT"
   },
   "outputs": [],
   "source": [
    "# create train and test lists. X - patterns, Y - intents\n",
    "X= list(train[:,0])\n",
    "Y = list(train[:,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "IMReublo0lXQ",
    "outputId": "18e4b152-a868-44de-d07c-4433f9fcb6ac"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[0, 0, 0, 1, 0, 0, 0, 0],\n",
       " [0, 0, 0, 0, 1, 0, 0, 0],\n",
       " [0, 0, 0, 1, 0, 0, 0, 0],\n",
       " [0, 0, 0, 0, 1, 0, 0, 0],\n",
       " [0, 0, 0, 0, 0, 0, 1, 0],\n",
       " [0, 0, 0, 0, 1, 0, 0, 0],\n",
       " [0, 0, 0, 0, 0, 0, 1, 0],\n",
       " [0, 0, 0, 0, 0, 0, 0, 1],\n",
       " [0, 1, 0, 0, 0, 0, 0, 0],\n",
       " [0, 0, 0, 1, 0, 0, 0, 0],\n",
       " [0, 0, 1, 0, 0, 0, 0, 0],\n",
       " [0, 0, 0, 1, 0, 0, 0, 0],\n",
       " [0, 1, 0, 0, 0, 0, 0, 0],\n",
       " [0, 0, 0, 0, 0, 0, 1, 0],\n",
       " [0, 0, 0, 0, 0, 0, 0, 1],\n",
       " [0, 0, 1, 0, 0, 0, 0, 0],\n",
       " [0, 0, 0, 0, 0, 1, 0, 0],\n",
       " [1, 0, 0, 0, 0, 0, 0, 0],\n",
       " [0, 0, 0, 0, 0, 0, 1, 0],\n",
       " [0, 1, 0, 0, 0, 0, 0, 0],\n",
       " [0, 1, 0, 0, 0, 0, 0, 0],\n",
       " [0, 0, 0, 0, 0, 0, 1, 0],\n",
       " [0, 1, 0, 0, 0, 0, 0, 0],\n",
       " [0, 0, 0, 1, 0, 0, 0, 0],\n",
       " [0, 0, 0, 0, 0, 1, 0, 0],\n",
       " [0, 0, 0, 0, 0, 0, 1, 0],\n",
       " [0, 0, 0, 0, 0, 0, 1, 0],\n",
       " [0, 0, 1, 0, 0, 0, 0, 0],\n",
       " [0, 0, 1, 0, 0, 0, 0, 0],\n",
       " [0, 0, 1, 0, 0, 0, 0, 0],\n",
       " [0, 0, 0, 0, 0, 1, 0, 0],\n",
       " [0, 1, 0, 0, 0, 0, 0, 0],\n",
       " [1, 0, 0, 0, 0, 0, 0, 0],\n",
       " [0, 0, 0, 1, 0, 0, 0, 0],\n",
       " [0, 0, 1, 0, 0, 0, 0, 0],\n",
       " [0, 0, 0, 0, 0, 0, 1, 0],\n",
       " [0, 0, 0, 0, 0, 0, 1, 0],\n",
       " [0, 0, 0, 1, 0, 0, 0, 0],\n",
       " [0, 0, 0, 0, 1, 0, 0, 0],\n",
       " [0, 0, 1, 0, 0, 0, 0, 0],\n",
       " [0, 0, 0, 1, 0, 0, 0, 0],\n",
       " [0, 0, 0, 0, 0, 0, 0, 1],\n",
       " [0, 0, 0, 0, 0, 0, 0, 1],\n",
       " [1, 0, 0, 0, 0, 0, 0, 0],\n",
       " [0, 1, 0, 0, 0, 0, 0, 0],\n",
       " [1, 0, 0, 0, 0, 0, 0, 0],\n",
       " [0, 0, 0, 0, 0, 0, 1, 0],\n",
       " [0, 0, 0, 1, 0, 0, 0, 0],\n",
       " [0, 0, 0, 1, 0, 0, 0, 0],\n",
       " [0, 0, 0, 0, 0, 1, 0, 0],\n",
       " [0, 0, 0, 0, 0, 0, 1, 0],\n",
       " [0, 0, 0, 1, 0, 0, 0, 0],\n",
       " [0, 0, 0, 1, 0, 0, 0, 0],\n",
       " [0, 0, 0, 1, 0, 0, 0, 0],\n",
       " [0, 0, 1, 0, 0, 0, 0, 0],\n",
       " [0, 0, 0, 0, 0, 0, 1, 0],\n",
       " [0, 0, 0, 0, 0, 0, 1, 0],\n",
       " [0, 0, 1, 0, 0, 0, 0, 0],\n",
       " [0, 0, 1, 0, 0, 0, 0, 0],\n",
       " [0, 0, 0, 0, 0, 0, 1, 0],\n",
       " [0, 0, 0, 0, 1, 0, 0, 0],\n",
       " [0, 0, 0, 0, 0, 0, 1, 0],\n",
       " [0, 0, 0, 0, 0, 0, 1, 0],\n",
       " [0, 0, 0, 0, 0, 0, 1, 0],\n",
       " [0, 0, 0, 0, 0, 0, 1, 0],\n",
       " [1, 0, 0, 0, 0, 0, 0, 0],\n",
       " [0, 0, 0, 1, 0, 0, 0, 0],\n",
       " [0, 0, 0, 0, 0, 1, 0, 0],\n",
       " [0, 0, 0, 0, 0, 0, 1, 0],\n",
       " [0, 0, 0, 0, 0, 0, 0, 1],\n",
       " [0, 0, 0, 0, 0, 0, 0, 1],\n",
       " [0, 0, 0, 0, 1, 0, 0, 0],\n",
       " [0, 0, 0, 0, 0, 0, 1, 0],\n",
       " [0, 0, 0, 0, 0, 0, 1, 0],\n",
       " [0, 0, 0, 1, 0, 0, 0, 0],\n",
       " [0, 0, 1, 0, 0, 0, 0, 0],\n",
       " [0, 0, 0, 1, 0, 0, 0, 0],\n",
       " [0, 0, 0, 0, 0, 0, 0, 1],\n",
       " [0, 0, 0, 0, 0, 0, 0, 1],\n",
       " [0, 0, 0, 0, 0, 0, 1, 0],\n",
       " [0, 0, 1, 0, 0, 0, 0, 0],\n",
       " [0, 1, 0, 0, 0, 0, 0, 0],\n",
       " [0, 0, 0, 0, 0, 0, 1, 0],\n",
       " [0, 0, 0, 1, 0, 0, 0, 0],\n",
       " [0, 0, 0, 0, 1, 0, 0, 0],\n",
       " [0, 1, 0, 0, 0, 0, 0, 0],\n",
       " [0, 0, 0, 0, 0, 0, 1, 0],\n",
       " [0, 0, 0, 0, 1, 0, 0, 0],\n",
       " [0, 0, 1, 0, 0, 0, 0, 0],\n",
       " [0, 1, 0, 0, 0, 0, 0, 0],\n",
       " [0, 0, 0, 0, 0, 0, 1, 0],\n",
       " [0, 0, 0, 0, 0, 1, 0, 0],\n",
       " [0, 0, 0, 0, 0, 0, 1, 0],\n",
       " [0, 1, 0, 0, 0, 0, 0, 0],\n",
       " [0, 0, 0, 1, 0, 0, 0, 0],\n",
       " [0, 0, 0, 1, 0, 0, 0, 0],\n",
       " [0, 1, 0, 0, 0, 0, 0, 0],\n",
       " [1, 0, 0, 0, 0, 0, 0, 0],\n",
       " [0, 0, 0, 0, 0, 0, 0, 1],\n",
       " [0, 0, 0, 0, 0, 0, 1, 0],\n",
       " [1, 0, 0, 0, 0, 0, 0, 0],\n",
       " [0, 0, 1, 0, 0, 0, 0, 0],\n",
       " [0, 1, 0, 0, 0, 0, 0, 0],\n",
       " [0, 0, 0, 1, 0, 0, 0, 0],\n",
       " [0, 0, 0, 0, 1, 0, 0, 0],\n",
       " [0, 1, 0, 0, 0, 0, 0, 0],\n",
       " [0, 0, 1, 0, 0, 0, 0, 0],\n",
       " [0, 0, 0, 0, 1, 0, 0, 0],\n",
       " [0, 0, 0, 0, 0, 0, 1, 0],\n",
       " [0, 0, 0, 0, 1, 0, 0, 0],\n",
       " [0, 0, 0, 0, 1, 0, 0, 0],\n",
       " [0, 0, 0, 0, 0, 1, 0, 0],\n",
       " [0, 0, 1, 0, 0, 0, 0, 0],\n",
       " [0, 0, 0, 0, 0, 1, 0, 0],\n",
       " [0, 0, 0, 0, 0, 0, 1, 0],\n",
       " [0, 0, 0, 1, 0, 0, 0, 0],\n",
       " [0, 0, 0, 0, 1, 0, 0, 0],\n",
       " [0, 0, 1, 0, 0, 0, 0, 0],\n",
       " [0, 1, 0, 0, 0, 0, 0, 0],\n",
       " [1, 0, 0, 0, 0, 0, 0, 0],\n",
       " [0, 0, 0, 1, 0, 0, 0, 0],\n",
       " [0, 0, 1, 0, 0, 0, 0, 0],\n",
       " [0, 0, 0, 1, 0, 0, 0, 0],\n",
       " [0, 1, 0, 0, 0, 0, 0, 0],\n",
       " [0, 0, 0, 0, 0, 1, 0, 0],\n",
       " [0, 0, 1, 0, 0, 0, 0, 0],\n",
       " [0, 0, 1, 0, 0, 0, 0, 0],\n",
       " [0, 0, 0, 1, 0, 0, 0, 0]]"
      ]
     },
     "execution_count": 209,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "qTN8PWCV1LtK",
    "outputId": "64218f3c-5402-44af-862c-f2ecebf0d525"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "9/9 [==============================] - 1s 9ms/step - loss: 2.0429 - accuracy: 0.1797\n",
      "Epoch 2/100\n",
      "9/9 [==============================] - 0s 7ms/step - loss: 1.8764 - accuracy: 0.2578\n",
      "Epoch 3/100\n",
      "9/9 [==============================] - 0s 9ms/step - loss: 1.7444 - accuracy: 0.3438\n",
      "Epoch 4/100\n",
      "9/9 [==============================] - 0s 7ms/step - loss: 1.6401 - accuracy: 0.4375\n",
      "Epoch 5/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 1.4570 - accuracy: 0.5703\n",
      "Epoch 6/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 1.3256 - accuracy: 0.6328\n",
      "Epoch 7/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 1.1578 - accuracy: 0.7344\n",
      "Epoch 8/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 1.0128 - accuracy: 0.7812\n",
      "Epoch 9/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.8151 - accuracy: 0.8984\n",
      "Epoch 10/100\n",
      "9/9 [==============================] - 0s 7ms/step - loss: 0.6455 - accuracy: 0.9219\n",
      "Epoch 11/100\n",
      "9/9 [==============================] - 0s 9ms/step - loss: 0.5055 - accuracy: 0.9609\n",
      "Epoch 12/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.3722 - accuracy: 0.9766\n",
      "Epoch 13/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.2840 - accuracy: 0.9766\n",
      "Epoch 14/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.2312 - accuracy: 0.9766\n",
      "Epoch 15/100\n",
      "9/9 [==============================] - 0s 9ms/step - loss: 0.1858 - accuracy: 0.9844\n",
      "Epoch 16/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.1461 - accuracy: 0.9922\n",
      "Epoch 17/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.1108 - accuracy: 0.9922\n",
      "Epoch 18/100\n",
      "9/9 [==============================] - 0s 9ms/step - loss: 0.1024 - accuracy: 0.9922\n",
      "Epoch 19/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0908 - accuracy: 0.9844\n",
      "Epoch 20/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0651 - accuracy: 0.9922\n",
      "Epoch 21/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0661 - accuracy: 0.9922\n",
      "Epoch 22/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0692 - accuracy: 0.9922\n",
      "Epoch 23/100\n",
      "9/9 [==============================] - 0s 7ms/step - loss: 0.0582 - accuracy: 0.9922\n",
      "Epoch 24/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0516 - accuracy: 0.9922\n",
      "Epoch 25/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0440 - accuracy: 0.9922\n",
      "Epoch 26/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0369 - accuracy: 0.9922\n",
      "Epoch 27/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0425 - accuracy: 1.0000\n",
      "Epoch 28/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0467 - accuracy: 0.9844\n",
      "Epoch 29/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0338 - accuracy: 0.9922\n",
      "Epoch 30/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0295 - accuracy: 0.9922\n",
      "Epoch 31/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0242 - accuracy: 1.0000\n",
      "Epoch 32/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0344 - accuracy: 0.9922\n",
      "Epoch 33/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0314 - accuracy: 0.9922\n",
      "Epoch 34/100\n",
      "9/9 [==============================] - 0s 7ms/step - loss: 0.0273 - accuracy: 0.9922\n",
      "Epoch 35/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0357 - accuracy: 0.9844\n",
      "Epoch 36/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0233 - accuracy: 1.0000\n",
      "Epoch 37/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0263 - accuracy: 0.9922\n",
      "Epoch 38/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0264 - accuracy: 0.9844\n",
      "Epoch 39/100\n",
      "9/9 [==============================] - 0s 9ms/step - loss: 0.0280 - accuracy: 0.9922\n",
      "Epoch 40/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0230 - accuracy: 0.9844\n",
      "Epoch 41/100\n",
      "9/9 [==============================] - 0s 10ms/step - loss: 0.0232 - accuracy: 0.9844\n",
      "Epoch 42/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0168 - accuracy: 1.0000\n",
      "Epoch 43/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0161 - accuracy: 1.0000\n",
      "Epoch 44/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0219 - accuracy: 0.9844\n",
      "Epoch 45/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0268 - accuracy: 0.9844\n",
      "Epoch 46/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0276 - accuracy: 0.9844\n",
      "Epoch 47/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0125 - accuracy: 1.0000\n",
      "Epoch 48/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0256 - accuracy: 0.9844\n",
      "Epoch 49/100\n",
      "9/9 [==============================] - 0s 7ms/step - loss: 0.0189 - accuracy: 0.9922\n",
      "Epoch 50/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0168 - accuracy: 0.9844\n",
      "Epoch 51/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0180 - accuracy: 0.9844\n",
      "Epoch 52/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0110 - accuracy: 1.0000\n",
      "Epoch 53/100\n",
      "9/9 [==============================] - 0s 9ms/step - loss: 0.0182 - accuracy: 0.9922\n",
      "Epoch 54/100\n",
      "9/9 [==============================] - 0s 10ms/step - loss: 0.0246 - accuracy: 0.9922\n",
      "Epoch 55/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0215 - accuracy: 0.9844\n",
      "Epoch 56/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0080 - accuracy: 1.0000\n",
      "Epoch 57/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0214 - accuracy: 0.9922\n",
      "Epoch 58/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0166 - accuracy: 0.9922\n",
      "Epoch 59/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0200 - accuracy: 0.9922\n",
      "Epoch 60/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0196 - accuracy: 0.9844\n",
      "Epoch 61/100\n",
      "9/9 [==============================] - 0s 9ms/step - loss: 0.0099 - accuracy: 1.0000\n",
      "Epoch 62/100\n",
      "9/9 [==============================] - 0s 9ms/step - loss: 0.0156 - accuracy: 0.9844\n",
      "Epoch 63/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0151 - accuracy: 0.9922\n",
      "Epoch 64/100\n",
      "9/9 [==============================] - 0s 7ms/step - loss: 0.0233 - accuracy: 0.9844\n",
      "Epoch 65/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0140 - accuracy: 0.9922\n",
      "Epoch 66/100\n",
      "9/9 [==============================] - 0s 9ms/step - loss: 0.0239 - accuracy: 0.9844\n",
      "Epoch 67/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0232 - accuracy: 0.9922\n",
      "Epoch 68/100\n",
      "9/9 [==============================] - 0s 7ms/step - loss: 0.0129 - accuracy: 0.9922\n",
      "Epoch 69/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0127 - accuracy: 0.9922\n",
      "Epoch 70/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0144 - accuracy: 0.9922\n",
      "Epoch 71/100\n",
      "9/9 [==============================] - 0s 7ms/step - loss: 0.0236 - accuracy: 0.9844\n",
      "Epoch 72/100\n",
      "9/9 [==============================] - 0s 7ms/step - loss: 0.0161 - accuracy: 0.9844\n",
      "Epoch 73/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0237 - accuracy: 0.9844\n",
      "Epoch 74/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0167 - accuracy: 0.9922\n",
      "Epoch 75/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0168 - accuracy: 0.9922\n",
      "Epoch 76/100\n",
      "9/9 [==============================] - 0s 8ms/step - loss: 0.0199 - accuracy: 0.9922\n",
      "Epoch 77/100\n",
      "9/9 [==============================] - 0s 9ms/step - loss: 0.0210 - accuracy: 0.9844\n",
      "Epoch 78/100\n",
      "9/9 [==============================] - 0s 10ms/step - loss: 0.0113 - accuracy: 1.0000\n",
      "Epoch 79/100\n",
      "9/9 [==============================] - 0s 12ms/step - loss: 0.0195 - accuracy: 0.9922\n",
      "Epoch 80/100\n",
      "9/9 [==============================] - 0s 12ms/step - loss: 0.0107 - accuracy: 1.0000\n",
      "Epoch 81/100\n",
      "9/9 [==============================] - 0s 15ms/step - loss: 0.0120 - accuracy: 1.0000\n",
      "Epoch 82/100\n",
      "9/9 [==============================] - 0s 12ms/step - loss: 0.0235 - accuracy: 0.9922\n",
      "Epoch 83/100\n",
      "9/9 [==============================] - 0s 11ms/step - loss: 0.0120 - accuracy: 1.0000\n",
      "Epoch 84/100\n",
      "9/9 [==============================] - 0s 12ms/step - loss: 0.0200 - accuracy: 0.9922\n",
      "Epoch 85/100\n",
      "9/9 [==============================] - 0s 13ms/step - loss: 0.0149 - accuracy: 0.9922\n",
      "Epoch 86/100\n",
      "9/9 [==============================] - 0s 11ms/step - loss: 0.0171 - accuracy: 0.9844\n",
      "Epoch 87/100\n",
      "9/9 [==============================] - 0s 12ms/step - loss: 0.0079 - accuracy: 1.0000\n",
      "Epoch 88/100\n",
      "9/9 [==============================] - 0s 11ms/step - loss: 0.0243 - accuracy: 0.9844\n",
      "Epoch 89/100\n",
      "9/9 [==============================] - 0s 11ms/step - loss: 0.0156 - accuracy: 0.9922\n",
      "Epoch 90/100\n",
      "9/9 [==============================] - 0s 12ms/step - loss: 0.0188 - accuracy: 0.9844\n",
      "Epoch 91/100\n",
      "9/9 [==============================] - 0s 11ms/step - loss: 0.0127 - accuracy: 0.9922\n",
      "Epoch 92/100\n",
      "9/9 [==============================] - 0s 11ms/step - loss: 0.0118 - accuracy: 0.9922\n",
      "Epoch 93/100\n",
      "9/9 [==============================] - 0s 11ms/step - loss: 0.0175 - accuracy: 0.9922\n",
      "Epoch 94/100\n",
      "9/9 [==============================] - 0s 12ms/step - loss: 0.0169 - accuracy: 0.9844\n",
      "Epoch 95/100\n",
      "9/9 [==============================] - 0s 12ms/step - loss: 0.0218 - accuracy: 0.9844\n",
      "Epoch 96/100\n",
      "9/9 [==============================] - 0s 11ms/step - loss: 0.0113 - accuracy: 0.9922\n",
      "Epoch 97/100\n",
      "9/9 [==============================] - 0s 12ms/step - loss: 0.0225 - accuracy: 0.9844\n",
      "Epoch 98/100\n",
      "9/9 [==============================] - 0s 11ms/step - loss: 0.0174 - accuracy: 0.9922\n",
      "Epoch 99/100\n",
      "9/9 [==============================] - 0s 11ms/step - loss: 0.0126 - accuracy: 0.9922\n",
      "Epoch 100/100\n",
      "9/9 [==============================] - 0s 12ms/step - loss: 0.0107 - accuracy: 0.9922\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "model.add(Dense(600, input_shape=(len(X[0]),), activation='relu'))\n",
    "model.add(Dropout(0.5))\n",
    "model.add(Dense(400, activation='relu'))\n",
    "model.add(Dropout(0.5))\n",
    "model.add(Dense(len(Y[0]), activation='softmax'))\n",
    "\n",
    "model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
    "\n",
    "#fitting and saving the model \n",
    "hist = model.fit(np.array(X), np.array(Y), epochs=100, batch_size=15, verbose=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {
    "id": "xBdXVVu41sJy"
   },
   "outputs": [],
   "source": [
    "def clean_sentence(sent):\n",
    "    # tokenize the pattern - split words into array\n",
    "    sentence_words = nltk.word_tokenize(sent)\n",
    "    # stem each word - create short form for word\n",
    "    sentence_words = [lemmatizer.lemmatize(word.lower()) for word in sentence_words]\n",
    "    return sentence_words\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "metadata": {
    "id": "u2SQjYly16EV"
   },
   "outputs": [],
   "source": [
    "def bow(sentence, words):\n",
    "    # tokenize the pattern\n",
    "    sentence_words = clean_sentence(sentence)\n",
    "    # bag of words - matrix of N words, vocabulary matrix\n",
    "    bag = [0]*len(words) \n",
    "    for s in sentence_words:\n",
    "        for i,w in enumerate(words):\n",
    "            if w == s: \n",
    "                # assign 1 if current word is in the vocabulary position\n",
    "                bag[i] = 1\n",
    "    return(np.array(bag))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "metadata": {
    "id": "nRSngf6v2GgY"
   },
   "outputs": [],
   "source": [
    "def predict_class(sent, model):\n",
    "    # filter out predictions below a threshold\n",
    "    p = bow(sent, words)\n",
    "    res = model.predict(np.array([p]))[0]\n",
    "    err_thres = 0.25\n",
    "    results = [[i,r] for i,r in enumerate(res) if r>err_thres]\n",
    "    # sort by strength of probability\n",
    "    results.sort(key=lambda x: x[1], reverse=True)\n",
    "    return_list = []\n",
    "    for r in results:\n",
    "        return_list.append({\"intent\": classes[r[0]], \"probability\": str(r[1])})\n",
    "    return return_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "metadata": {
    "id": "ZCwLSQ6D2O--"
   },
   "outputs": [],
   "source": [
    "def getResponse(ints, intents):\n",
    "    tag = ints[0]['intent']\n",
    "    list_of_intents = intents['intents']\n",
    "    for i in list_of_intents:\n",
    "        if(i['tag']== tag):\n",
    "            result = i['responses']\n",
    "            break\n",
    "    return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "metadata": {
    "id": "wb24oTG52nI3"
   },
   "outputs": [],
   "source": [
    "def chatbot_response(text):\n",
    "    ints = predict_class(text, model)\n",
    "    res = getResponse(ints, intents)\n",
    "    return res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "metadata": {
    "id": "0oNHohag2ref"
   },
   "outputs": [],
   "source": [
    "def chat_dl():\n",
    "    print(\"Chatbot: Hello! How can I assist you today?\")\n",
    "    while (True):\n",
    "        user_input = input(\"User: \")\n",
    "        user_response = user_input.lower()\n",
    "        if (user_response == 'exit'):\n",
    "          print(\"Chat bot: Thank you ! Have a good day, Good bye\")\n",
    "          break\n",
    "        elif(greeting(user_response)!=None):\n",
    "          print(\"Chatbot: \",greeting(user_response))\n",
    "        elif (EXIT(user_response)!=None):\n",
    "          print(\"Chatbot:\",EXIT(user_response)) \n",
    "        elif (user_response == 'continue' or user_response == 'yes' or user_response == 'yeah'):\n",
    "          print(\"Chatbot: How can I assist you\")            \n",
    "        elif(chatbot_response(user_response)!=None):\n",
    "          res = chatbot_response(user_response)\n",
    "          print(\"Chatbot:\",res)\n",
    "        else:\n",
    "          print(\"Chatbot : Invalid response, please rephrase your question correctly\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "cFQmOUy_3dFx",
    "outputId": "33d97f97-943c-451e-ef1c-24a05abd5104"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Chatbot: Hello! How can I assist you today?\n",
      "User: Hello\n",
      "Chatbot:  ['Hello! how can i help you ?']\n",
      "User: I need to learn about bagging\n",
      "1/1 [==============================] - 0s 27ms/step\n",
      "1/1 [==============================] - 0s 25ms/step\n",
      "Chatbot: ['Link: Machine Learning wiki ']\n",
      "User: I am unable to understand the SGD\n",
      "1/1 [==============================] - 0s 24ms/step\n",
      "1/1 [==============================] - 0s 23ms/step\n",
      "Chatbot: ['Link: Neural Nets wiki']\n",
      "User: yeah\n",
      "Chatbot: How can I assist you\n",
      "User: what is your name\n",
      "1/1 [==============================] - 0s 27ms/step\n",
      "1/1 [==============================] - 0s 24ms/step\n",
      "Chatbot: ['I am your virtual learning assistant']\n",
      "User: please help with me to understand hidden layers\n",
      "Chatbot:  ['Hello! how can i help you ?']\n",
      "User: hidden layer\n",
      "1/1 [==============================] - 0s 28ms/step\n",
      "1/1 [==============================] - 0s 27ms/step\n",
      "Chatbot: ['Link: Neural Nets wiki']\n",
      "User: thank you so much\n",
      "Chatbot: I hope I was able to assist you, would like to continue ? or If you want to exit please type exit'\n",
      "User: exit\n",
      "Chat bot: Thank you ! Have a good day, Good bye\n"
     ]
    }
   ],
   "source": [
    "chat_dl()"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "gpuClass": "standard",
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
